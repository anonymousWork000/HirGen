import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_16 = relay.const([[[-4,8,-2,-9,-4,-2,-4,1,-5,4,1,6,9],[4,-10,10,3,5,6,4,7,-9,4,-10,10,-2],[3,8,-5,-2,3,-6,-9,-2,5,4,-1,-6,6],[3,-10,-9,-4,-5,-3,-3,-10,-5,-9,5,-10,-9],[-4,7,9,-6,-4,1,3,-4,-4,5,5,2,-4],[2,-6,6,-4,-7,-10,1,9,-1,-10,1,3,8],[5,-3,-9,-4,4,4,-2,2,-8,-7,6,1,4],[-2,7,6,-1,10,4,6,3,-7,-3,-8,-3,-7],[-6,9,-8,6,10,-7,1,-1,-1,-4,-7,1,1],[10,-8,-4,-5,4,-3,-1,4,-4,-7,-1,-3,3]],[[7,1,-5,3,10,-8,2,10,-4,-8,1,5,-8],[8,-3,-3,-7,10,9,-7,-1,-6,7,-8,-9,9],[-10,-9,1,2,-8,-4,-1,-9,8,-1,-1,3,3],[8,8,3,2,-8,1,6,-5,6,-7,-10,9,5],[6,-7,-9,-2,-4,7,-1,8,-5,1,9,7,2],[-4,-9,-10,-6,6,6,4,-7,6,6,-9,-2,-2],[-8,8,6,-1,-10,-10,2,2,5,7,-9,-9,-9],[-5,-9,-2,5,8,-10,8,2,6,5,-3,6,-4],[5,9,2,-4,2,-7,-6,10,-4,7,8,3,3],[-6,7,3,3,-7,7,-5,9,-6,7,-2,8,-8]],[[-3,2,6,-5,9,-5,8,-9,-3,-4,6,-7,9],[3,-9,4,3,-9,5,2,-10,10,10,4,4,8],[-9,-5,6,-8,1,8,7,3,-1,-9,5,-10,-9],[-10,4,2,-5,-6,7,8,3,1,5,-5,2,-7],[3,4,6,2,-2,-5,-3,9,-4,-9,-5,8,-6],[-6,9,5,-5,-2,3,-10,2,3,8,-7,-1,9],[7,-3,2,-1,-7,3,-7,10,10,-8,-7,8,-5],[6,-9,9,4,-9,3,7,8,1,-6,-9,3,7],[-6,-5,-9,-6,-6,6,-7,6,7,-2,-5,2,4],[-8,-7,-6,9,6,2,8,-5,10,9,3,-1,-1]],[[-8,10,6,-8,2,-8,3,2,-5,5,-7,3,-1],[4,-1,-2,9,10,9,-8,2,-5,9,-2,10,-4],[10,-4,4,-5,-2,6,9,9,-4,3,3,10,-7],[-4,-8,3,6,3,5,6,6,-1,6,5,6,-5],[-7,-1,-7,-1,-5,-5,2,-10,-7,-6,-8,8,-6],[-3,10,-1,5,1,-7,7,9,-3,-1,9,1,8],[2,-1,-8,1,6,-7,4,-1,2,-4,-1,3,-2],[-7,-8,10,1,-8,-10,9,9,-5,3,5,-5,6],[6,5,2,10,-8,-1,4,10,-6,-9,2,-9,1],[10,-3,-1,8,10,9,1,2,8,1,1,-4,2]],[[6,3,-7,5,-3,-2,10,10,-10,7,-5,10,-3],[-3,1,7,1,7,4,8,6,-8,-2,10,-1,5],[-1,2,-6,-3,4,-6,-9,-1,-5,-2,-2,1,-7],[5,-7,-4,5,-6,-2,-8,8,-1,9,10,4,-6],[2,-8,10,9,-6,-8,10,4,3,-10,7,6,5],[9,9,4,5,-10,-9,-2,1,-8,6,-3,-5,7],[-6,8,-2,9,-2,-3,-6,10,2,-10,4,4,-1],[6,-3,10,10,9,4,-5,10,3,-3,-1,7,-9],[-1,-10,1,-10,10,4,-9,4,-10,2,-7,7,-2],[-4,-4,-1,-8,-9,8,5,-1,-10,1,-6,2,-4]],[[6,10,4,8,-7,-10,9,-5,-1,7,-9,-4,10],[3,9,3,-1,-3,7,10,10,10,-1,8,-5,-4],[1,-5,8,-5,7,4,10,-10,9,-2,4,-8,-7],[7,-1,-6,-10,3,9,9,-3,4,10,-10,-6,8],[4,-4,-2,3,-5,6,-10,-5,7,4,7,-5,4],[6,8,9,-9,7,6,-7,-8,6,3,8,-7,10],[-2,3,-10,5,2,-4,-9,-6,-10,5,7,-8,7],[10,10,-8,-5,-8,1,-5,-7,5,7,-10,6,6],[9,6,2,9,-6,-4,-9,5,6,-2,8,-9,-1],[-3,6,-4,3,-10,6,7,-8,4,-3,-7,9,-2]],[[-9,4,-1,10,-6,4,-6,8,-6,5,-6,-3,-8],[-10,2,-5,-4,-4,8,6,-8,-7,5,-8,10,6],[2,7,-2,8,8,6,4,8,-3,8,-5,8,10],[-2,7,8,-9,-1,1,-2,5,-2,-7,-3,-7,2],[7,1,-3,-8,2,2,-1,10,-2,-1,-2,8,-3],[8,3,1,9,7,-6,-4,3,2,9,-5,6,-10],[9,8,10,-4,-7,10,7,-7,4,-3,-7,2,9],[-9,-3,3,-8,8,8,-10,6,-2,9,8,-1,2],[-8,-6,-2,-9,-5,-1,-7,2,10,2,-3,-9,-4],[-8,9,-6,6,1,-8,-5,7,7,-4,9,10,1]],[[6,8,8,8,7,2,6,3,6,-7,3,-6,3],[-2,7,-10,5,6,3,-1,-7,-6,-8,7,7,8],[-9,9,-10,-9,-6,3,-7,5,2,-4,10,-4,-1],[4,-6,-7,7,-9,9,-7,8,-8,-8,5,-10,-10],[1,1,-4,7,7,7,2,-2,-5,-5,8,8,-8],[-5,3,9,9,3,2,3,8,5,5,10,-4,-3],[-10,-8,5,7,1,10,-5,-1,-7,-8,4,4,9],[-9,2,-7,4,-1,1,5,-3,9,-1,4,-5,-2],[6,-8,9,9,-1,4,-2,-4,-6,-2,-5,-6,1],[4,-4,5,-10,4,10,3,-10,7,-5,-4,10,-9]],[[-6,9,8,-3,10,4,-9,-1,4,10,-2,-5,-8],[7,6,2,2,-9,-7,-3,-10,-6,7,-2,1,4],[-1,-10,9,-6,3,7,1,6,-10,-2,-5,-1,-6],[-1,5,10,-4,6,6,-8,-9,-4,3,-8,-8,3],[-1,-6,-7,3,4,-9,-2,4,6,8,-9,8,2],[-2,10,-4,10,-9,-8,-3,8,1,-9,-9,-8,-2],[1,6,-10,6,6,3,1,-4,-6,9,1,5,6],[-4,-3,9,6,1,-6,8,-6,-7,-4,-6,-10,-6],[7,-10,5,5,-10,-6,-2,4,4,9,2,-9,-10],[7,-9,2,4,7,8,1,-8,6,-6,7,4,-1]],[[5,5,4,5,6,-9,9,-2,-8,5,-2,6,-5],[7,1,8,-8,1,-6,5,-2,-2,10,8,-9,-6],[5,-8,-6,-2,4,5,4,6,-4,1,7,7,-9],[7,-7,8,8,-2,4,-5,3,-10,8,6,9,8],[-1,3,-9,8,7,9,4,10,-7,-6,-5,-7,4],[-4,3,7,8,-3,-2,4,7,-5,-7,8,-1,4],[1,-10,-7,8,-8,-3,6,-3,7,10,-5,8,1],[7,2,-8,5,10,4,-1,4,9,9,10,1,3],[-6,-7,-9,-1,-6,-6,8,-2,-5,-5,6,-10,-5],[-5,2,-2,1,7,6,2,8,-4,5,9,8,8]],[[-7,10,-9,-8,-5,1,-4,5,-8,-3,-5,1,2],[10,3,5,-4,-1,2,-4,-4,2,-3,7,5,6],[-6,10,10,-7,7,4,-8,4,8,8,1,9,10],[5,-7,-5,-1,-2,-6,3,-2,-3,-4,2,-5,4],[-4,-1,-1,10,-1,-3,-10,3,-4,9,7,-10,-9],[3,-5,-9,9,3,-8,10,-8,2,-7,-5,-5,-9],[-4,-1,1,6,-10,7,7,-1,-3,-4,1,-10,-5],[9,7,10,9,6,-7,8,-9,9,6,-3,-1,1],[-5,10,6,-9,1,6,-5,2,9,1,6,6,-2],[-3,5,4,-5,-1,-8,-5,2,-1,-8,-8,2,4]]], dtype = "int16")#candidate|16|(11, 10, 13)|const|int16
uop_17 = relay.log(const_16) # shape=(11, 10, 13)
output = relay.Tuple([uop_17,])
output2 = relay.Tuple([uop_17,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')