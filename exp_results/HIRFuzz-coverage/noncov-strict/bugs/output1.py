import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (12, 16))#candidate|0|(12, 16)|var|float32
const_1 = relay.const([[-1.461746,-1.180887,3.967720,1.483980,-9.645296,-2.936916,-9.385852,5.126620,1.839251,7.834796,5.841499,4.301351,-9.552974,9.411200,-8.344340,4.243432],[6.328694,-6.157572,9.367338,0.659355,1.021077,3.789934,-2.195252,8.651777,-4.352322,9.005103,-2.382412,-1.219953,-4.360616,5.160082,-7.676845,4.462915],[-7.535900,-1.553061,-6.528701,-8.500325,-4.147898,1.642837,-0.557808,-3.174831,-3.472653,-5.463045,-7.825740,3.664224,-4.268784,-6.592098,5.879107,-6.777225],[4.127885,8.559517,-4.384094,6.896477,-7.102638,2.646533,3.395689,4.604407,8.959193,-0.038861,-3.560931,1.939043,-4.165936,3.564259,0.689698,7.488364],[-3.903858,-0.939341,-9.502419,7.803966,3.376569,7.362334,7.817607,-0.850270,-3.656409,-5.388000,-1.555583,-3.735160,2.477776,-2.067659,1.943671,0.792757],[-4.538395,7.965414,1.643945,4.238613,7.715072,6.277897,3.342364,-9.824343,-3.665221,-7.124736,-0.143153,7.241640,-4.006171,-3.284367,-4.888356,-7.584832],[-5.145787,4.627508,-5.964659,-9.478173,-4.855779,-2.331397,1.239430,0.138980,-8.277492,-3.802197,-2.270282,-1.534005,7.464681,5.852530,2.083167,-9.920824],[1.775360,9.823177,1.663374,8.825814,-2.185461,1.112408,-6.592763,7.427344,8.716571,1.985097,-2.922863,-2.190037,8.924014,7.897272,7.595652,-0.922110],[7.117777,8.099335,0.397963,-4.923533,-0.200292,7.842980,4.300470,5.262555,-5.848865,-1.380927,0.081024,-0.434131,-1.186487,6.248670,1.851046,-3.621471],[0.359969,4.445029,7.405837,-5.870160,-6.785741,-9.332516,3.281328,-9.862023,4.392507,-2.534339,6.974389,9.886658,-9.825545,-4.597652,-0.237834,-9.635355],[-7.612479,-7.330671,-1.990162,2.919313,-5.623936,-5.944559,-7.793801,1.622837,5.278465,-2.196283,-7.005714,7.261185,-5.807764,-0.390904,-7.786958,-5.779283],[0.865573,-2.478308,-6.049845,-9.051598,-8.569693,-8.501724,2.409024,-1.762281,3.432321,3.059694,-8.057245,-4.339308,-3.825910,5.549455,3.862820,6.019026]], dtype = "float32")#candidate|1|(12, 16)|const|float32
bop_2 = relay.less_equal(var_0.astype('bool'), relay.reshape(const_1.astype('bool'), relay.shape_of(var_0))) # shape=(12, 16)
bop_5 = relay.logical_xor(const_1.astype('uint16'), relay.reshape(var_0.astype('uint16'), relay.shape_of(const_1))) # shape=(12, 16)
uop_8 = relay.sigmoid(var_0.astype('float32')) # shape=(12, 16)
const_10 = relay.const([[-6.494766,-8.110431,-5.289923,-7.082669,9.006045,-5.244819,3.649094,-6.975039,3.234507,-6.601007,-6.555305,-2.467122,2.435727,2.612821,5.523671,-6.550862],[5.301482,-0.677866,-4.574499,5.950557,4.238384,7.008224,-7.405595,-0.380860,3.155861,-1.020805,-9.745297,-8.368463,9.603818,-5.644962,3.340723,-2.311337],[8.997678,-4.333236,-8.011714,0.845465,-4.385088,-4.334249,-4.921357,-1.656707,5.575356,7.828605,6.575366,7.178024,3.859874,-4.539315,-6.285326,9.911283],[2.314052,0.648696,0.009900,1.886405,4.735231,-0.089709,-8.901459,0.421499,-4.918038,2.521878,4.052986,-4.252825,4.931071,0.082629,7.858329,7.617805],[-3.781306,-1.881056,-0.528683,3.453092,6.939290,9.099550,9.197149,-3.467768,-0.553698,7.766760,-6.979052,-6.652342,-2.877023,-8.536170,9.542415,-0.348808],[-4.382582,0.336527,-4.816176,0.037949,2.900094,4.122735,9.414913,-0.649983,-4.597089,5.579396,4.639768,-6.640804,8.391350,3.210546,-7.066296,0.390808],[3.751375,9.239758,3.001346,3.068267,-3.750280,3.537339,-8.109252,6.302476,-3.025934,-3.178826,-2.579389,5.808770,3.241915,-7.961384,9.639652,-5.874647],[3.160480,-2.031757,-6.178701,3.271753,1.510147,5.566362,-6.783493,-6.187443,5.211045,-0.250398,7.267007,-0.430378,-7.855520,-2.147710,-0.605440,-0.284515],[1.238533,-0.224388,2.529582,-6.165361,2.092253,-4.893107,-3.849710,-3.034203,8.033593,5.724267,-8.962778,3.956195,3.236212,-3.335910,1.923307,4.321065],[-3.921959,-5.955626,7.943579,-1.604245,-8.948999,-8.825944,0.571974,8.759167,0.988429,5.452495,-0.596522,-1.606130,-2.960212,6.224619,-7.370532,-3.947556],[-8.446851,-3.088069,9.160402,-0.227397,9.529795,-5.614486,2.437468,-4.358746,9.712696,9.631701,-7.869851,0.538987,-7.125270,-2.469386,5.029317,6.257624],[-3.405471,2.827924,-3.255711,1.427048,-5.872977,-7.250994,3.132365,-4.721780,-5.673112,-2.431051,1.927569,-3.242896,-0.475081,-0.714520,7.901003,-5.404038]], dtype = "float32")#candidate|10|(12, 16)|const|float32
bop_11 = relay.logical_or(var_0.astype('bool'), relay.reshape(const_10.astype('bool'), relay.shape_of(var_0))) # shape=(12, 16)
bop_14 = relay.floor_divide(const_10.astype('float64'), relay.reshape(var_0.astype('float64'), relay.shape_of(const_10))) # shape=(12, 16)
bop_17 = relay.less(uop_8.astype('bool'), relay.reshape(bop_5.astype('bool'), relay.shape_of(uop_8))) # shape=(12, 16)
output = relay.Tuple([bop_2,bop_11,bop_14,bop_17,])
output2 = relay.Tuple([bop_2,bop_11,bop_14,bop_17,])
func_20 = relay.Function([var_0,], output)
mod['func_20'] = func_20
mod = relay.transform.InferType()(mod)
mutated_mod['func_20'] = func_20
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21 = relay.var("var_21", dtype = "float32", shape = (12, 16))#candidate|21|(12, 16)|var|float32
func_20_call = mutated_mod.get_global_var('func_20')
call_22 = func_20_call(var_21)
output = call_22
func_23 = relay.Function([var_21], output)
mutated_mod['func_23'] = func_23
mutated_mod = relay.transform.InferType()(mutated_mod)
var_25 = relay.var("var_25", dtype = "float64", shape = (8, 1))#candidate|25|(8, 1)|var|float64
uop_26 = relay.asin(var_25.astype('float64')) # shape=(8, 1)
bop_28 = relay.subtract(uop_26.astype('uint32'), relay.reshape(var_25.astype('uint32'), relay.shape_of(uop_26))) # shape=(8, 1)
uop_31 = relay.asin(uop_26.astype('float32')) # shape=(8, 1)
func_20_call = mod.get_global_var('func_20')
func_23_call = mutated_mod.get_global_var('func_23')
const_34 = relay.const([[-0.805026],[-8.623133],[5.031173],[0.158315],[5.047485],[-8.012730],[6.286598],[7.598175],[-3.929400],[-2.630924],[4.450632],[-5.536166],[6.452507],[8.772195],[-9.339385],[8.468351],[-0.207304],[-1.959453],[9.313344],[2.311483],[9.847036],[-2.834747],[-3.755168],[7.345091],[-6.245783],[-4.723754],[-7.547702],[-2.830456],[-5.429491],[9.699415],[-7.350075],[5.091534],[-5.757249],[-4.899587],[-1.146694],[-8.877528],[0.971855],[-4.107107],[0.390299],[-7.859348],[4.888060],[1.427098],[-5.812791],[1.297786],[8.245740],[1.585629],[-3.660866],[2.850606],[-4.410094],[-1.612743],[6.649970],[5.667990],[-4.636597],[-5.956247],[2.382129],[8.857801],[1.922092],[-0.962732],[-1.659825],[-5.036320],[-9.352080],[6.467768],[-0.546761],[-7.959120],[-6.616275],[6.285413],[2.664099],[-6.161783],[1.411221],[9.739445],[-8.283094],[9.296739],[8.049830],[5.198803],[-8.650451],[-7.768261],[2.308362],[1.632209],[-6.280762],[-0.289721],[-4.291014],[-8.589129],[-1.965742],[5.228118],[4.504054],[2.407777],[5.435362],[7.710136],[-8.220445],[1.334491],[-3.246046],[-0.846962],[0.944969],[8.856946],[8.995422],[7.297058],[-0.219001],[2.954595],[-2.333109],[-8.346020],[-5.370049],[2.956366],[-0.868427],[-6.148741],[1.682758],[5.694548],[5.867505],[6.685313],[6.427029],[-6.984906],[7.633176],[0.773052],[5.569096],[-3.549936],[9.108447],[4.539743],[-8.049311],[-4.804961],[7.603230],[-6.370549],[-6.652156],[-7.803821],[7.846970],[-3.439252],[0.200940],[6.747729],[-9.904978],[-6.449294],[1.046167],[-0.062372],[1.240187],[-6.253203],[-2.351787],[-3.701850],[-7.638479],[9.830294],[5.291077],[-2.660595],[2.217267],[3.125266],[-2.563255],[2.997488],[1.680395],[-2.614480],[0.742031],[-7.925518],[3.759193],[-9.305914],[0.771639],[2.041973],[0.134688],[-4.782525],[1.300368],[5.845089],[4.034739],[8.567502],[0.744297],[9.210378],[-3.605276],[-0.453375],[-8.953314],[-3.410668],[2.792137],[7.120675],[7.462410],[-7.287294],[0.405848],[9.658820],[-2.150331],[-5.108442],[-6.088943],[2.426661],[-7.931853],[-1.203758],[-9.286017],[-0.776926],[2.369162],[-5.083612],[-8.410637],[0.955075],[5.844556],[-3.906469],[-9.131301],[7.506182],[4.638257],[8.611832],[2.972900],[5.425879],[0.771669],[-1.475275],[-8.975306],[-8.872816]], dtype = "float32")#candidate|34|(192, 1)|const|float32
call_33 = relay.TupleGetItem(func_20_call(relay.reshape(const_34.astype('float32'), [12, 16])), 0)
call_35 = relay.TupleGetItem(func_23_call(relay.reshape(const_34.astype('float32'), [12, 16])), 0)
var_36 = relay.var("var_36", dtype = "float32", shape = (8, 11))#candidate|36|(8, 11)|var|float32
bop_37 = relay.minimum(uop_31.astype('int64'), var_36.astype('int64')) # shape=(8, 11)
bop_40 = relay.logical_and(uop_26.astype('bool'), bop_37.astype('bool')) # shape=(8, 11)
bop_43 = relay.multiply(bop_28.astype('int8'), bop_37.astype('int8')) # shape=(8, 11)
uop_46 = relay.erf(bop_28.astype('float64')) # shape=(8, 1)
bop_48 = relay.logical_xor(bop_28.astype('int8'), bop_43.astype('int8')) # shape=(8, 11)
uop_51 = relay.atan(uop_26.astype('float32')) # shape=(8, 1)
bop_53 = relay.maximum(uop_26.astype('int16'), var_36.astype('int16')) # shape=(8, 11)
uop_56 = relay.cosh(uop_26.astype('float32')) # shape=(8, 1)
bop_58 = relay.bitwise_xor(uop_51.astype('int64'), relay.reshape(var_25.astype('int64'), relay.shape_of(uop_51))) # shape=(8, 1)
output = relay.Tuple([call_33,const_34,bop_40,uop_46,bop_48,bop_53,uop_56,bop_58,])
output2 = relay.Tuple([call_35,const_34,bop_40,uop_46,bop_48,bop_53,uop_56,bop_58,])
func_61 = relay.Function([var_25,var_36,], output)
mod['func_61'] = func_61
mod = relay.transform.InferType()(mod)
var_62 = relay.var("var_62", dtype = "float64", shape = (8, 1))#candidate|62|(8, 1)|var|float64
var_63 = relay.var("var_63", dtype = "float32", shape = (8, 11))#candidate|63|(8, 11)|var|float32
output = func_61(var_62,var_63,)
func_64 = relay.Function([var_62,var_63,], output)
mutated_mod['func_64'] = func_64
mutated_mod = relay.transform.InferType()(mutated_mod)
var_66 = relay.var("var_66", dtype = "float32", shape = (7, 2))#candidate|66|(7, 2)|var|float32
uop_67 = relay.log(var_66.astype('float32')) # shape=(7, 2)
uop_69 = relay.asinh(uop_67.astype('float32')) # shape=(7, 2)
var_71 = relay.var("var_71", dtype = "float32", shape = (7, 2))#candidate|71|(7, 2)|var|float32
bop_72 = relay.subtract(uop_69.astype('uint16'), relay.reshape(var_71.astype('uint16'), relay.shape_of(uop_69))) # shape=(7, 2)
var_75 = relay.var("var_75", dtype = "float32", shape = (7, 2))#candidate|75|(7, 2)|var|float32
bop_76 = relay.greater(uop_67.astype('bool'), relay.reshape(var_75.astype('bool'), relay.shape_of(uop_67))) # shape=(7, 2)
var_79 = relay.var("var_79", dtype = "float32", shape = (7, 2))#candidate|79|(7, 2)|var|float32
bop_80 = relay.not_equal(uop_67.astype('bool'), relay.reshape(var_79.astype('bool'), relay.shape_of(uop_67))) # shape=(7, 2)
bop_83 = relay.bitwise_xor(uop_69.astype('int32'), relay.reshape(bop_80.astype('int32'), relay.shape_of(uop_69))) # shape=(7, 2)
bop_86 = relay.minimum(bop_83.astype('int64'), relay.reshape(uop_69.astype('int64'), relay.shape_of(bop_83))) # shape=(7, 2)
uop_89 = relay.sinh(bop_76.astype('float64')) # shape=(7, 2)
uop_91 = relay.sin(bop_86.astype('float32')) # shape=(7, 2)
bop_93 = relay.mod(uop_89.astype('float32'), relay.reshape(var_66.astype('float32'), relay.shape_of(uop_89))) # shape=(7, 2)
var_96 = relay.var("var_96", dtype = "float32", shape = (7, 2))#candidate|96|(7, 2)|var|float32
bop_97 = relay.divide(uop_91.astype('float64'), relay.reshape(var_96.astype('float64'), relay.shape_of(uop_91))) # shape=(7, 2)
uop_100 = relay.acosh(uop_91.astype('float64')) # shape=(7, 2)
bop_102 = relay.logical_or(uop_100.astype('bool'), relay.reshape(var_71.astype('bool'), relay.shape_of(uop_100))) # shape=(7, 2)
uop_105 = relay.acos(bop_83.astype('float64')) # shape=(7, 2)
const_107 = relay.const([[3.737777,-5.122605],[-3.235552,0.349884],[9.607148,-1.102980],[-0.284509,6.172655],[6.327667,-8.502590],[-9.343029,4.093970],[9.195544,3.005963]], dtype = "float32")#candidate|107|(7, 2)|const|float32
bop_108 = relay.mod(bop_93.astype('float64'), relay.reshape(const_107.astype('float64'), relay.shape_of(bop_93))) # shape=(7, 2)
uop_111 = relay.atanh(uop_67.astype('float32')) # shape=(7, 2)
uop_113 = relay.log(bop_72.astype('float64')) # shape=(7, 2)
bop_115 = relay.maximum(uop_105.astype('uint16'), relay.reshape(bop_83.astype('uint16'), relay.shape_of(uop_105))) # shape=(7, 2)
bop_118 = relay.power(uop_113.astype('float32'), relay.reshape(var_79.astype('float32'), relay.shape_of(uop_113))) # shape=(7, 2)
bop_121 = relay.bitwise_and(bop_97.astype('uint64'), relay.reshape(const_107.astype('uint64'), relay.shape_of(bop_97))) # shape=(7, 2)
uop_124 = relay.cosh(bop_108.astype('float64')) # shape=(7, 2)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
var_127 = relay.var("var_127", dtype = "float64", shape = (1, 8))#candidate|127|(1, 8)|var|float64
const_128 = relay.const([[2.867834,-4.032910,-3.192177,-2.444962,5.842136,8.173769,5.136301,-6.384946,0.982952,-2.928439,3.154136,7.829065,4.404708,-0.130089,3.049013,4.731513,-3.874227,-3.267614,-5.018447,-5.747870,-7.502502,8.363552,1.657899,-6.644071,4.004539,9.479539,5.699840,-0.646288,9.320010,5.272548,-3.354849,1.920235,-5.097065,8.558127,2.209678,-7.319221,2.070541,5.084852,-0.375139,-4.322425,-4.064954,-0.948113,-0.053589,-3.004432],[-9.880109,-7.310840,-8.788462,3.626748,5.037332,4.219900,-5.290837,1.544073,-0.242592,2.665223,-4.573308,-4.232913,6.593809,-0.975997,4.027813,7.931303,-9.273686,-0.917778,-9.256431,-1.712405,-5.815004,-2.749154,4.308437,2.967497,-9.476134,-1.983036,-0.274002,8.548934,-3.446969,6.852470,-4.622542,4.991984,-0.554178,9.911934,6.776673,2.037905,-3.666466,-1.843216,9.154648,2.819780,-3.660673,-8.235895,-5.922425,-2.280396]], dtype = "float32")#candidate|128|(2, 44)|const|float32
call_126 = relay.TupleGetItem(func_61_call(relay.reshape(var_127.astype('float64'), [8, 1]), relay.reshape(const_128.astype('float32'), [8, 11]), ), 2)
call_129 = relay.TupleGetItem(func_64_call(relay.reshape(var_127.astype('float64'), [8, 1]), relay.reshape(const_128.astype('float32'), [8, 11]), ), 2)
func_20_call = mod.get_global_var('func_20')
func_23_call = mutated_mod.get_global_var('func_23')
const_131 = relay.const([-1.202666,-4.816876,-1.798223,3.019137,-0.994438,-0.352436,-3.297372,-4.986282,5.485273,-7.887179,3.368688,4.229245,9.170142,1.206582,-6.354780,3.816763,1.698431,-8.090451,-2.202881,-6.041512,-5.149650,-0.461698,-7.669494,8.106710,-3.138479,1.733723,-5.208634,-0.488777,6.029385,-2.315866,9.977947,-6.362344,8.149290,-9.821167,-8.660903,-0.391336,3.730818,9.157158,9.954831,6.729622,-1.352694,6.944762,4.242914,-8.375901,8.397239,7.499082,4.588362,5.302180,-4.563678,-5.400318,3.557134,-6.387721,-4.684598,-0.377787,-6.503701,2.840203,-3.314080,8.470565,-1.188401,9.904358,-5.145971,-0.398855,-4.481597,-8.281753,-4.283103,-0.326561,-8.607302,-1.194693,-3.558611,-6.308729,8.440964,-7.105263,5.397289,3.294955,3.780742,7.806699,7.425001,7.725075,-3.720581,2.914517,6.144570,-6.792009,-2.457513,-2.256784,7.181040,3.557318,-8.477975,-9.528155,-5.507382,6.708489,-6.514530,2.847186,-7.027128,-5.830376,5.986085,1.764498,8.243827,-3.084757,0.905246,-1.711308,3.387185,1.506631,8.582076,2.338203,9.261057,-2.291460,-3.684779,-8.818477,-7.272817,4.633156,-7.120199,-3.024732,-8.868611,2.705191,6.559419,-2.332269,9.976004,-5.327799,0.292267,-1.169820,-4.179923,5.249328,3.456933,-6.026390,-1.536567,9.569135,-3.744240,-1.965071,-9.513841,-9.607205,6.230238,-5.807135,-6.412347,-2.280162,1.055378,3.882694,3.409067,-7.555192,-4.930012,-2.980217,-0.948059,3.781413,-7.238809,3.442059,2.564126,-8.750982,-1.012689,9.811088,-2.995166,-4.627615,7.744210,6.906409,-1.814187,6.490774,-1.451379,7.886285,5.529043,-3.206795,-6.839126,-2.914728,7.274228,4.349095,9.165622,9.215664,-7.645308,3.220109,9.543122,-1.874647,-1.878216,-6.340456,7.846239,8.848523,-6.448388,-9.075625,2.173424,-3.656873,-2.014686,-9.788388,-4.675709,3.963321,-1.106464,-9.520267,4.235599,0.161700,-4.650139,2.455965,-2.493265,-5.945216,-3.478238,1.138076,1.257747,-2.275740], dtype = "float32")#candidate|131|(192,)|const|float32
call_130 = relay.TupleGetItem(func_20_call(relay.reshape(const_131.astype('float32'), [12, 16])), 0)
call_132 = relay.TupleGetItem(func_23_call(relay.reshape(const_131.astype('float32'), [12, 16])), 0)
bop_133 = relay.multiply(bop_102.astype('uint64'), relay.reshape(uop_105.astype('uint64'), relay.shape_of(bop_102))) # shape=(7, 2)
uop_136 = relay.acos(bop_102.astype('float32')) # shape=(7, 2)
bop_138 = relay.logical_and(uop_136.astype('bool'), relay.reshape(bop_115.astype('bool'), relay.shape_of(uop_136))) # shape=(7, 2)
bop_141 = relay.divide(uop_136.astype('float64'), relay.reshape(var_66.astype('float64'), relay.shape_of(uop_136))) # shape=(7, 2)
func_20_call = mod.get_global_var('func_20')
func_23_call = mutated_mod.get_global_var('func_23')
call_144 = relay.TupleGetItem(func_20_call(relay.reshape(const_131.astype('float32'), [12, 16])), 1)
call_145 = relay.TupleGetItem(func_23_call(relay.reshape(const_131.astype('float32'), [12, 16])), 1)
bop_146 = relay.less(bop_141.astype('bool'), relay.reshape(bop_72.astype('bool'), relay.shape_of(bop_141))) # shape=(7, 2)
bop_149 = relay.left_shift(bop_83.astype('uint32'), relay.reshape(uop_91.astype('uint32'), relay.shape_of(bop_83))) # shape=(7, 2)
bop_152 = relay.equal(bop_141.astype('bool'), relay.reshape(bop_80.astype('bool'), relay.shape_of(bop_141))) # shape=(7, 2)
uop_155 = relay.rsqrt(bop_141.astype('float64')) # shape=(7, 2)
uop_157 = relay.cosh(uop_155.astype('float32')) # shape=(7, 2)
output = relay.Tuple([uop_111,bop_118,bop_121,uop_124,call_126,var_127,const_128,call_130,const_131,bop_133,bop_138,call_144,bop_146,bop_149,bop_152,uop_157,])
output2 = relay.Tuple([uop_111,bop_118,bop_121,uop_124,call_129,var_127,const_128,call_132,const_131,bop_133,bop_138,call_145,bop_146,bop_149,bop_152,uop_157,])
func_159 = relay.Function([var_66,var_71,var_75,var_79,var_96,var_127,], output)
mod['func_159'] = func_159
mod = relay.transform.InferType()(mod)
var_160 = relay.var("var_160", dtype = "float32", shape = (7, 2))#candidate|160|(7, 2)|var|float32
var_161 = relay.var("var_161", dtype = "float32", shape = (7, 2))#candidate|161|(7, 2)|var|float32
var_162 = relay.var("var_162", dtype = "float32", shape = (7, 2))#candidate|162|(7, 2)|var|float32
var_163 = relay.var("var_163", dtype = "float32", shape = (7, 2))#candidate|163|(7, 2)|var|float32
var_164 = relay.var("var_164", dtype = "float32", shape = (7, 2))#candidate|164|(7, 2)|var|float32
var_165 = relay.var("var_165", dtype = "float64", shape = (1, 8))#candidate|165|(1, 8)|var|float64
output = func_159(var_160,var_161,var_162,var_163,var_164,var_165,)
func_166 = relay.Function([var_160,var_161,var_162,var_163,var_164,var_165,], output)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
const_168 = relay.const([[-9.029614,-2.946528,-8.929412,6.660157,1.012038,1.812311,2.461432,1.773830,4.505356],[9.051010,0.284228,8.056244,2.151556,8.192610,-9.577581,6.511110,1.737377,-5.744018],[-2.248063,-5.253335,3.463621,1.877269,-4.550616,-0.237572,-9.150655,-9.933611,-3.001571],[-3.983080,5.153246,-5.289299,-9.525460,-4.601653,9.539996,9.359582,8.056360,7.798463]], dtype = "float32")#candidate|168|(4, 9)|const|float32
uop_169 = relay.atan(const_168.astype('float32')) # shape=(4, 9)
bop_171 = relay.logical_xor(const_168.astype('int64'), relay.reshape(uop_169.astype('int64'), relay.shape_of(const_168))) # shape=(4, 9)
uop_174 = relay.acos(uop_169.astype('float32')) # shape=(4, 9)
uop_176 = relay.log2(uop_169.astype('float64')) # shape=(4, 9)
uop_178 = relay.sinh(uop_176.astype('float64')) # shape=(4, 9)
uop_180 = relay.atanh(uop_174.astype('float64')) # shape=(4, 9)
uop_182 = relay.sigmoid(bop_171.astype('float64')) # shape=(4, 9)
uop_184 = relay.exp(uop_180.astype('float64')) # shape=(4, 9)
uop_186 = relay.log10(uop_184.astype('float64')) # shape=(4, 9)
bop_188 = relay.power(uop_184.astype('float32'), relay.reshape(uop_180.astype('float32'), relay.shape_of(uop_184))) # shape=(4, 9)
uop_191 = relay.rsqrt(uop_184.astype('float64')) # shape=(4, 9)
bop_193 = relay.bitwise_and(uop_186.astype('int32'), relay.reshape(bop_188.astype('int32'), relay.shape_of(uop_186))) # shape=(4, 9)
bop_196 = relay.bitwise_xor(bop_193.astype('uint8'), relay.reshape(uop_191.astype('uint8'), relay.shape_of(bop_193))) # shape=(4, 9)
var_199 = relay.var("var_199", dtype = "int32", shape = (4, 9))#candidate|199|(4, 9)|var|int32
bop_200 = relay.floor_mod(bop_193.astype('float32'), relay.reshape(var_199.astype('float32'), relay.shape_of(bop_193))) # shape=(4, 9)
uop_203 = relay.log(uop_186.astype('float32')) # shape=(4, 9)
bop_205 = relay.greater_equal(uop_184.astype('bool'), relay.reshape(bop_196.astype('bool'), relay.shape_of(uop_184))) # shape=(4, 9)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
var_209 = relay.var("var_209", dtype = "float64", shape = (1, 8))#candidate|209|(1, 8)|var|float64
const_210 = relay.const([-2.739112,1.588628,-3.726292,6.013433,3.344090,-0.991403,-7.460028,6.836262,-2.968334,0.035811,6.714474,-1.615532,0.613243,-9.734296,-5.242379,-7.995925,-4.256071,-9.547257,1.709776,7.426425,9.776271,9.214840,8.717338,-9.903265,0.596659,-8.089041,5.015284,-9.682191,-9.531423,-8.591011,4.319099,3.608305,-3.711596,-4.414906,1.081676,-7.309987,4.184683,-9.561535,-0.930406,0.170487,-1.062557,-1.126679,-3.554290,-8.521935,-4.431867,9.091420,-7.053103,2.762437,-5.425620,-1.745921,1.726522,-4.366054,-2.645314,-6.502087,9.193563,-1.237400,1.498490,-8.845548,-3.758145,-6.866150,1.049355,-4.001618,-9.755660,-9.854026,4.700979,-0.859579,-8.284996,-5.217834,1.608457,3.571019,-0.559115,5.967775,2.659216,0.892204,-8.994073,-9.262851,9.611197,8.619088,-3.328766,-8.280596,4.980773,4.822731,-1.744008,-2.831447,-3.402572,-9.358060,-7.026703,-0.346732], dtype = "float32")#candidate|210|(88,)|const|float32
call_208 = relay.TupleGetItem(func_61_call(relay.reshape(var_209.astype('float64'), [8, 1]), relay.reshape(const_210.astype('float32'), [8, 11]), ), 6)
call_211 = relay.TupleGetItem(func_64_call(relay.reshape(var_209.astype('float64'), [8, 1]), relay.reshape(const_210.astype('float32'), [8, 11]), ), 6)
var_212 = relay.var("var_212", dtype = "int32", shape = (4, 9))#candidate|212|(4, 9)|var|int32
bop_213 = relay.logical_or(bop_193.astype('bool'), relay.reshape(var_212.astype('bool'), relay.shape_of(bop_193))) # shape=(4, 9)
bop_216 = relay.less(uop_203.astype('bool'), relay.reshape(var_199.astype('bool'), relay.shape_of(uop_203))) # shape=(4, 9)
bop_219 = relay.logical_xor(bop_216.astype('int16'), relay.reshape(uop_176.astype('int16'), relay.shape_of(bop_216))) # shape=(4, 9)
uop_222 = relay.asinh(uop_169.astype('float64')) # shape=(4, 9)
uop_224 = relay.log10(bop_193.astype('float64')) # shape=(4, 9)
uop_226 = relay.erf(uop_203.astype('float64')) # shape=(4, 9)
bop_228 = relay.greater(uop_226.astype('bool'), relay.reshape(uop_186.astype('bool'), relay.shape_of(uop_226))) # shape=(4, 9)
uop_231 = relay.atanh(bop_228.astype('float32')) # shape=(4, 9)
uop_233 = relay.asinh(bop_216.astype('float32')) # shape=(4, 9)
uop_235 = relay.asin(uop_231.astype('float32')) # shape=(4, 9)
uop_237 = relay.acos(uop_235.astype('float32')) # shape=(4, 9)
bop_239 = relay.less_equal(uop_237.astype('bool'), relay.reshape(uop_191.astype('bool'), relay.shape_of(uop_237))) # shape=(4, 9)
uop_242 = relay.asinh(uop_231.astype('float64')) # shape=(4, 9)
func_20_call = mod.get_global_var('func_20')
func_23_call = mutated_mod.get_global_var('func_23')
const_245 = relay.const([-3.729182,-8.118061,-0.113535,2.377584,-5.169957,9.019568,-3.650175,-7.564577,-6.890969,3.642024,4.617178,2.014554,1.596072,-8.800285,7.125400,6.780099,9.321816,-9.766269,0.924658,0.896303,9.211550,-5.455476,9.413735,9.203202,-2.064630,-5.179960,-2.427476,0.158851,1.985927,-4.910806,7.500535,-2.268119,2.860327,-3.314003,-5.406957,-8.918921,-8.658324,2.811457,1.928829,0.619142,4.699861,-6.398861,5.574917,8.042237,4.322364,0.746063,0.484831,-1.596639,-1.533172,4.155256,-3.436016,-6.969138,-9.408831,-9.252750,1.923609,7.948053,2.033982,-1.956790,3.758682,9.342878,8.832547,5.920810,-9.290847,2.017802,4.388330,6.460459,-4.479672,-1.231004,8.160611,5.976189,3.562194,2.033308,-0.442572,4.514980,2.810966,-2.672622,-8.748739,8.062360,0.976775,5.675843,2.122502,-8.264175,7.299845,-2.189052,8.779602,7.122494,-0.150296,-1.708985,-1.854535,6.732837,-6.354590,-0.815075,5.231593,-7.298688,-4.180965,2.590426,-6.668658,0.395987,5.755110,5.008360,5.207602,8.953139,7.880161,-9.439203,7.437969,-8.885415,-0.285967,-7.262690,-4.977398,-7.377142,0.473919,2.104993,-3.949522,9.753777,-0.767828,-2.779297,5.414441,-6.107820,0.470885,-2.600330,-5.710267,3.634285,2.203730,-4.985639,-9.032659,-1.812395,0.429919,1.839292,-8.770174,0.150072,0.673194,8.556375,8.659868,-2.884521,-6.610594,0.397393,9.426280,8.491078,8.789045,-8.783640,9.303640,4.285511,-2.521858,-0.106376,3.292461,-5.358315,6.948708,4.628340,9.250864,-0.451153,-2.572863,-4.468344,-5.197542,-9.242823,2.377605,9.486924,6.308520,6.577293,8.918280,-9.909433,8.235390,-1.789294,-9.344865,0.434304,1.524983,-9.700712,-3.166477,5.526553,-8.861197,-5.424708,-5.510191,-6.783025,-9.418657,-6.141121,5.434452,-5.352196,7.743761,-4.760734,-8.986929,1.901525,2.089038,3.260981,-4.327056,-2.686590,-1.409221,-6.450580,-7.617631,-8.565678,7.449983,-7.209710,9.616683,4.522551], dtype = "float32")#candidate|245|(192,)|const|float32
call_244 = relay.TupleGetItem(func_20_call(relay.reshape(const_245.astype('float32'), [12, 16])), 0)
call_246 = relay.TupleGetItem(func_23_call(relay.reshape(const_245.astype('float32'), [12, 16])), 0)
bop_247 = relay.mod(uop_237.astype('float64'), relay.reshape(uop_176.astype('float64'), relay.shape_of(uop_237))) # shape=(4, 9)
bop_250 = relay.mod(uop_231.astype('float64'), relay.reshape(uop_222.astype('float64'), relay.shape_of(uop_231))) # shape=(4, 9)
uop_253 = relay.atanh(bop_250.astype('float64')) # shape=(4, 9)
bop_255 = relay.divide(uop_237.astype('float64'), relay.reshape(uop_235.astype('float64'), relay.shape_of(uop_237))) # shape=(4, 9)
bop_258 = relay.right_shift(bop_255.astype('int32'), relay.reshape(bop_250.astype('int32'), relay.shape_of(bop_255))) # shape=(4, 9)
uop_261 = relay.acosh(uop_235.astype('float32')) # shape=(4, 9)
uop_263 = relay.exp(bop_258.astype('float64')) # shape=(4, 9)
bop_265 = relay.minimum(uop_263.astype('float32'), relay.reshape(uop_224.astype('float32'), relay.shape_of(uop_263))) # shape=(4, 9)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
call_268 = relay.TupleGetItem(func_61_call(relay.reshape(var_209.astype('float64'), [8, 1]), relay.reshape(const_210.astype('float32'), [8, 11]), ), 3)
call_269 = relay.TupleGetItem(func_64_call(relay.reshape(var_209.astype('float64'), [8, 1]), relay.reshape(const_210.astype('float32'), [8, 11]), ), 3)
output = relay.Tuple([uop_178,uop_182,bop_200,bop_205,call_208,var_209,const_210,bop_213,bop_219,uop_233,bop_239,uop_242,call_244,const_245,bop_247,uop_253,uop_261,bop_265,call_268,])
output2 = relay.Tuple([uop_178,uop_182,bop_200,bop_205,call_211,var_209,const_210,bop_213,bop_219,uop_233,bop_239,uop_242,call_246,const_245,bop_247,uop_253,uop_261,bop_265,call_269,])
func_270 = relay.Function([var_199,var_209,var_212,], output)
mod['func_270'] = func_270
mod = relay.transform.InferType()(mod)
var_271 = relay.var("var_271", dtype = "int32", shape = (4, 9))#candidate|271|(4, 9)|var|int32
var_272 = relay.var("var_272", dtype = "float64", shape = (1, 8))#candidate|272|(1, 8)|var|float64
var_273 = relay.var("var_273", dtype = "int32", shape = (4, 9))#candidate|273|(4, 9)|var|int32
output = func_270(var_271,var_272,var_273,)
func_274 = relay.Function([var_271,var_272,var_273,], output)
mutated_mod['func_274'] = func_274
mutated_mod = relay.transform.InferType()(mutated_mod)
var_276 = relay.var("var_276", dtype = "int16", shape = (15, 3))#candidate|276|(15, 3)|var|int16
var_277 = relay.var("var_277", dtype = "int16", shape = (15, 3))#candidate|277|(15, 3)|var|int16
bop_278 = relay.subtract(var_276.astype('int16'), relay.reshape(var_277.astype('int16'), relay.shape_of(var_276))) # shape=(15, 3)
bop_281 = relay.logical_or(var_277.astype('bool'), relay.reshape(var_276.astype('bool'), relay.shape_of(var_277))) # shape=(15, 3)
var_284 = relay.var("var_284", dtype = "int16", shape = (15, 3))#candidate|284|(15, 3)|var|int16
bop_285 = relay.logical_xor(bop_278.astype('int8'), relay.reshape(var_284.astype('int8'), relay.shape_of(bop_278))) # shape=(15, 3)
func_20_call = mod.get_global_var('func_20')
func_23_call = mutated_mod.get_global_var('func_23')
const_289 = relay.const([7.557319,9.796698,-1.047413,-2.797559,8.398097,-4.343415,-2.239256,0.844030,0.675989,7.762248,2.461798,-6.450346,-0.666228,9.402124,-7.909490,2.079994,-5.947457,2.550523,8.238620,4.797878,4.435785,-5.219774,9.284145,-1.489840,8.158808,-0.683456,5.956537,-8.493257,6.951501,-4.644692,1.124073,2.944632,-4.945990,9.953385,-7.062245,-5.113748,-6.714657,0.559927,5.708206,-5.406616,1.572365,1.500254,4.265042,0.255632,-8.929968,1.410405,5.892438,1.695758,6.363246,6.548458,8.519184,4.330880,-5.506640,4.828219,6.990209,5.867578,0.125198,6.567450,-5.104546,5.192652,-5.337564,-8.633107,9.050213,-1.457710,-0.539499,-0.861009,9.117220,-5.262012,-9.787659,3.018091,4.011385,5.943458,-2.427535,-3.336877,2.975674,4.008652,-5.370278,8.274109,1.507778,-7.061861,0.988923,8.043313,-8.562352,9.154784,6.125025,-0.338154,9.979459,6.415116,9.086736,-2.513296,1.247451,-6.740790,5.423030,5.807185,1.756422,8.699352,-4.793236,-8.382002,-1.686344,-5.811400,-0.470829,-2.374588,-8.658836,9.010239,7.905691,-6.397524,9.488076,-0.746726,-2.016979,5.478040,0.304427,-7.542077,2.689080,2.811677,-1.589502,-2.599899,-5.548935,-0.944103,-2.938817,-5.379635,6.584813,3.832387,-8.619475,-1.532851,4.837331,-2.419858,-3.266315,5.628962,4.373049,5.875142,-8.339983,6.877906,-8.267253,7.694452,8.387935,0.391147,-1.054153,-1.214049,-3.949337,4.384059,-8.695613,4.933354,-1.377656,3.334658,5.580064,-9.693955,-7.740593,-7.057720,7.954604,9.658458,-4.713557,-5.493591,7.983374,4.569150,7.949399,-3.207055,-4.397728,-1.851410,-5.634311,3.905905,-0.048949,6.768654,5.189108,2.380646,9.119019,2.664932,0.720797,-6.319561,-6.750473,8.240729,-4.707094,-6.948721,1.123284,1.238637,-5.511363,1.301782,-9.256856,8.796134,-0.952045,2.656737,9.875024,8.849321,-2.512469,-3.146771,6.761785,-2.650913,9.309063,8.860257,0.102228,-9.023821,7.147442,-5.781743], dtype = "float32")#candidate|289|(192,)|const|float32
call_288 = relay.TupleGetItem(func_20_call(relay.reshape(const_289.astype('float32'), [12, 16])), 0)
call_290 = relay.TupleGetItem(func_23_call(relay.reshape(const_289.astype('float32'), [12, 16])), 0)
uop_291 = relay.erf(bop_281.astype('float64')) # shape=(15, 3)
output = relay.Tuple([bop_285,call_288,const_289,uop_291,])
output2 = relay.Tuple([bop_285,call_290,const_289,uop_291,])
func_293 = relay.Function([var_276,var_277,var_284,], output)
mod['func_293'] = func_293
mod = relay.transform.InferType()(mod)
mutated_mod['func_293'] = func_293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_293_call = mutated_mod.get_global_var('func_293')
var_295 = relay.var("var_295", dtype = "int16", shape = (15, 3))#candidate|295|(15, 3)|var|int16
var_296 = relay.var("var_296", dtype = "int16", shape = (15, 3))#candidate|296|(15, 3)|var|int16
var_297 = relay.var("var_297", dtype = "int16", shape = (15, 3))#candidate|297|(15, 3)|var|int16
call_294 = func_293_call(var_295,var_296,var_297,)
output = call_294
func_298 = relay.Function([var_295,var_296,var_297,], output)
mutated_mod['func_298'] = func_298
mutated_mod = relay.transform.InferType()(mutated_mod)
const_300 = relay.const([-7.701179,9.519364,9.674638,-9.503365,9.118507,-3.700528,-9.399114,1.731896,1.689334,8.580374,-8.361591,0.806036,-3.861538,-7.668789,4.969838,-5.541296], dtype = "float64")#candidate|300|(16,)|const|float64
uop_301 = relay.tan(const_300.astype('float64')) # shape=(16,)
output = uop_301
output2 = uop_301
func_303 = relay.Function([], output)
mod['func_303'] = func_303
mod = relay.transform.InferType()(mod)
output = func_303()
func_304 = relay.Function([], output)
mutated_mod['func_304'] = func_304
mutated_mod = relay.transform.InferType()(mutated_mod)
var_305 = relay.var("var_305", dtype = "float32", shape = ())#candidate|305|()|var|float32
uop_306 = relay.sinh(var_305.astype('float32')) # shape=()
var_308 = relay.var("var_308", dtype = "float32", shape = (10, 6))#candidate|308|(10, 6)|var|float32
bop_309 = relay.add(uop_306.astype('int8'), var_308.astype('int8')) # shape=(10, 6)
uop_312 = relay.acos(bop_309.astype('float64')) # shape=(10, 6)
bop_314 = relay.multiply(uop_312.astype('uint64'), var_305.astype('uint64')) # shape=(10, 6)
bop_317 = relay.less(uop_312.astype('bool'), relay.reshape(bop_309.astype('bool'), relay.shape_of(uop_312))) # shape=(10, 6)
var_320 = relay.var("var_320", dtype = "float64", shape = (10, 6))#candidate|320|(10, 6)|var|float64
bop_321 = relay.greater(uop_312.astype('bool'), relay.reshape(var_320.astype('bool'), relay.shape_of(uop_312))) # shape=(10, 6)
uop_324 = relay.atan(bop_321.astype('float32')) # shape=(10, 6)
uop_326 = relay.sigmoid(bop_321.astype('float32')) # shape=(10, 6)
bop_328 = relay.add(uop_312.astype('float64'), relay.reshape(bop_321.astype('float64'), relay.shape_of(uop_312))) # shape=(10, 6)
uop_331 = relay.asin(uop_324.astype('float32')) # shape=(10, 6)
output = relay.Tuple([bop_314,bop_317,uop_326,bop_328,uop_331,])
output2 = relay.Tuple([bop_314,bop_317,uop_326,bop_328,uop_331,])
F = relay.Function([var_305,var_308,var_320,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_305,var_308,var_320,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_305= np.array(-2.239786, dtype='float32')
module1.set_input('var_305', input_305)
input_308= np.array([[4.879093,-7.171369,-7.024499,8.925035,-2.038411,-3.777867],[-7.412118,0.605119,-1.874329,-5.844874,-6.058084,7.210633],[4.013658,0.131426,8.731388,-3.124686,-2.498719,0.067000],[-9.595384,-3.981988,6.334288,8.845161,5.501693,3.737864],[-5.169746,-2.778399,2.016810,-2.782517,7.384224,-0.506945],[7.804689,-6.364316,2.144769,-2.427344,-2.356658,7.998264],[-2.413257,5.603583,4.796280,4.788921,-4.337101,9.988831],[0.821808,-7.512139,1.456784,9.479527,9.291285,7.340583],[6.200195,-3.944686,-5.510557,-0.466883,-9.197237,-3.030095],[-5.878866,4.939464,-4.405390,0.994945,-4.437917,-7.117801]], dtype='float32')
module1.set_input('var_308', input_308)
input_320= np.array([[-7.793289,-5.346495,8.713188,-0.652375,-1.457648,7.729873],[-3.503136,5.905496,9.262418,8.543832,0.154074,4.478656],[9.466189,5.232044,-5.712537,2.846235,9.814257,9.240539],[9.207072,-5.228070,-4.350452,-0.373512,4.922680,-3.668664],[-2.978067,-3.346531,-7.561498,3.371373,-3.006548,-2.424027],[-1.323493,2.847913,5.124851,2.077080,3.244392,-3.683820],[2.095163,-0.297771,-8.511223,5.282017,-9.728444,-4.128079],[4.076912,-3.716332,-8.900592,8.897717,1.511460,4.565082],[6.277626,8.019719,-3.496486,-3.948473,0.168375,-7.661799],[5.808276,-9.266655,2.015851,7.339893,-5.049076,3.409308]], dtype='float64')
module1.set_input('var_320', input_320)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_305, input_308, input_320, )
res3 = intrp3.evaluate()(input_305, input_308, input_320, )
res4 = intrp4.evaluate()(input_305, input_308, input_320, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
module5.set_input('var_305', input_305)
module5.set_input('var_308', input_308)
module5.set_input('var_320', input_320)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_305, input_308, input_320, )
res7 = intrp7.evaluate()(input_305, input_308, input_320, )
res8 = intrp8.evaluate()(input_305, input_308, input_320, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
module9.set_input('var_305', input_305)
module9.set_input('var_308', input_308)
module9.set_input('var_320', input_320)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_305, input_308, input_320, )
res11 = intrp11.evaluate()(input_305, input_308, input_320, )
res12 = intrp12.evaluate()(input_305, input_308, input_320, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
module13.set_input('var_305', input_305)
module13.set_input('var_308', input_308)
module13.set_input('var_320', input_320)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_305, input_308, input_320, )
res15 = intrp15.evaluate()(input_305, input_308, input_320, )
res16 = intrp16.evaluate()(input_305, input_308, input_320, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
module17.set_input('var_305', input_305)
module17.set_input('var_308', input_308)
module17.set_input('var_320', input_320)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_305, input_308, input_320, )
res19 = intrp19.evaluate()(input_305, input_308, input_320, )
res20 = intrp20.evaluate()(input_305, input_308, input_320, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
module21.set_input('var_305', input_305)
module21.set_input('var_308', input_308)
module21.set_input('var_320', input_320)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_305, input_308, input_320, )
res23 = intrp23.evaluate()(input_305, input_308, input_320, )
res24 = intrp24.evaluate()(input_305, input_308, input_320, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()

'''22: TVMFuncCall
21: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
16: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
15: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
14: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const [clone .isra.405]
13: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const::{lambda(tvm::relay::LetList*)#1}::operator()(tvm::relay::LetList) const [clone .constprop.436]
12: _ZNSt17_Function_handlerIFSt10sha
11: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::FunctionNode const*)::{lambda(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&)#1}::operator()(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&) const
10: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
9: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
8: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::TupleNode const*)
7: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
5: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
3: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
2: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::OpNode const*)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''