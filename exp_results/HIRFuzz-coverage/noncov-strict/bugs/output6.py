import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (14, 12))#candidate|0|(14, 12)|var|float64
uop_1 = relay.asin(var_0.astype('float64')) # shape=(14, 12)
var_3 = relay.var("var_3", dtype = "float64", shape = (14, 12))#candidate|3|(14, 12)|var|float64
bop_4 = relay.mod(uop_1.astype('float64'), relay.reshape(var_3.astype('float64'), relay.shape_of(uop_1))) # shape=(14, 12)
uop_7 = relay.acosh(bop_4.astype('float64')) # shape=(14, 12)
bop_9 = relay.equal(uop_1.astype('bool'), relay.reshape(var_3.astype('bool'), relay.shape_of(uop_1))) # shape=(14, 12)
uop_12 = relay.erf(uop_7.astype('float32')) # shape=(14, 12)
output = relay.Tuple([bop_9,uop_12,])
output2 = relay.Tuple([bop_9,uop_12,])
func_14 = relay.Function([var_0,var_3,], output)
mod['func_14'] = func_14
mod = relay.transform.InferType()(mod)
var_15 = relay.var("var_15", dtype = "float64", shape = (14, 12))#candidate|15|(14, 12)|var|float64
var_16 = relay.var("var_16", dtype = "float64", shape = (14, 12))#candidate|16|(14, 12)|var|float64
output = func_14(var_15,var_16,)
func_17 = relay.Function([var_15,var_16,], output)
mutated_mod['func_17'] = func_17
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19 = relay.var("var_19", dtype = "uint16", shape = (11, 1))#candidate|19|(11, 1)|var|uint16
var_20 = relay.var("var_20", dtype = "uint16", shape = (11, 6))#candidate|20|(11, 6)|var|uint16
bop_21 = relay.greater(var_19.astype('bool'), var_20.astype('bool')) # shape=(11, 6)
bop_24 = relay.greater_equal(bop_21.astype('bool'), relay.reshape(var_20.astype('bool'), relay.shape_of(bop_21))) # shape=(11, 6)
const_27 = relay.const([[-10,-7,-3,-5,-8,-1,-2,-1],[7,-6,7,-3,-4,3,-9,-1],[4,-4,-7,-4,-3,-5,-3,1],[10,-10,-1,1,-5,-5,7,-3],[-4,-8,7,7,6,-5,10,-1],[-5,-7,-4,-4,-1,3,-2,9],[-5,-6,-8,4,-7,-2,-7,5],[-4,10,1,6,10,-1,6,-8],[-6,5,9,5,6,-3,2,5],[-10,-5,9,-6,3,-3,7,9],[-8,-5,-2,5,2,3,5,2]], dtype = "uint16")#candidate|27|(11, 8)|const|uint16
bop_28 = relay.mod(var_19.astype('float32'), const_27.astype('float32')) # shape=(11, 8)
bop_31 = relay.multiply(bop_28.astype('uint8'), relay.reshape(const_27.astype('uint8'), relay.shape_of(bop_28))) # shape=(11, 8)
uop_34 = relay.sqrt(var_19.astype('float32')) # shape=(11, 1)
bop_36 = relay.bitwise_and(uop_34.astype('uint64'), const_27.astype('uint64')) # shape=(11, 8)
uop_39 = relay.tan(uop_34.astype('float64')) # shape=(11, 1)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
var_42 = relay.var("var_42", dtype = "float64", shape = (168,))#candidate|42|(168,)|var|float64
call_41 = relay.TupleGetItem(func_14_call(relay.reshape(var_42.astype('float64'), [14, 12]), relay.reshape(var_42.astype('float64'), [14, 12]), ), 0)
call_43 = relay.TupleGetItem(func_17_call(relay.reshape(var_42.astype('float64'), [14, 12]), relay.reshape(var_42.astype('float64'), [14, 12]), ), 0)
uop_44 = relay.sigmoid(bop_28.astype('float32')) # shape=(11, 8)
bop_46 = relay.logical_xor(uop_39.astype('uint64'), bop_28.astype('uint64')) # shape=(11, 8)
uop_49 = relay.sigmoid(bop_46.astype('float32')) # shape=(11, 8)
uop_51 = relay.sin(uop_49.astype('float32')) # shape=(11, 8)
uop_53 = relay.log10(uop_51.astype('float64')) # shape=(11, 8)
const_55 = relay.const([[-7.176146,5.432828,1.567530,-7.843851,-2.042766,5.570354,-5.360144,-9.041961],[-3.432948,3.018297,5.780743,-6.740320,-7.216570,-6.323650,6.114228,-1.402797],[1.329052,-0.867871,-2.141753,5.840457,2.413927,-9.000898,4.094448,-6.458848],[-5.100847,-7.940571,-2.666855,1.659263,-5.228818,-2.093768,3.260657,1.074237],[-9.701488,2.092381,-5.648659,2.987492,7.469482,-4.395351,-7.731305,-1.717384],[-2.417343,-7.449296,-6.496526,1.066207,-6.533928,-8.400958,-7.617525,-7.634215],[-3.188205,-8.316670,8.051904,-5.908525,0.645223,6.740661,-8.955814,-6.720851],[-1.174678,0.578105,-1.667258,2.487824,-8.546304,-3.232067,9.937229,3.377446],[1.820990,6.666269,6.887933,9.880561,-4.235486,-6.502693,4.608367,3.560518],[2.677711,-4.806083,6.297068,-3.399478,6.174258,9.757698,-5.354790,-1.550250],[-0.159642,-2.777022,-8.663330,-1.733914,-5.225114,6.747030,-3.007838,-1.580553]], dtype = "float32")#candidate|55|(11, 8)|const|float32
bop_56 = relay.logical_and(uop_51.astype('bool'), relay.reshape(const_55.astype('bool'), relay.shape_of(uop_51))) # shape=(11, 8)
const_59 = relay.const([[3.481344,-6.195455,9.014582,-5.595855,4.366579,8.368189,-9.101955,6.322030,-9.815288,-1.078780],[2.025827,0.421619,-6.053698,-2.418945,-7.790236,4.031438,3.769837,4.024819,1.730637,-8.963490],[4.738297,-6.988171,0.610526,5.479710,-2.569503,9.158892,-9.932538,-0.576449,4.444742,6.090286],[-1.025966,3.098840,-3.165688,5.322241,-6.414836,-2.426175,5.714106,6.853464,4.279787,0.005180],[-4.481984,2.048580,7.106613,-7.733823,-3.364959,-1.697852,-7.469628,-3.616893,0.489442,-0.188672],[5.592464,5.940132,7.426786,-4.166742,-4.558258,1.340791,-8.796369,8.913393,-7.656926,-4.928676],[-3.622048,-9.277062,-2.799265,7.414097,-1.325467,8.023183,8.542446,-2.727765,9.743834,2.659513],[-3.715245,-0.421799,5.423189,-3.532868,1.318856,-5.526435,-4.100036,0.276061,6.438754,-4.107428],[-2.670499,1.314673,-7.395615,7.937207,-2.666871,8.547606,2.012375,9.389948,-7.572110,-4.563293],[-1.557707,6.372262,0.187203,7.427204,8.231910,-2.281187,1.015727,2.766130,-7.778942,9.753615],[0.271337,5.343874,5.483025,6.898811,7.268467,5.081077,-9.227555,-2.989949,2.644961,-4.776001]], dtype = "float64")#candidate|59|(11, 10)|const|float64
bop_60 = relay.logical_xor(uop_39.astype('uint32'), const_59.astype('uint32')) # shape=(11, 10)
output = relay.Tuple([bop_24,bop_31,bop_36,call_41,var_42,uop_44,uop_53,bop_56,bop_60,])
output2 = relay.Tuple([bop_24,bop_31,bop_36,call_43,var_42,uop_44,uop_53,bop_56,bop_60,])
func_63 = relay.Function([var_19,var_20,var_42,], output)
mod['func_63'] = func_63
mod = relay.transform.InferType()(mod)
mutated_mod['func_63'] = func_63
mutated_mod = relay.transform.InferType()(mutated_mod)
func_63_call = mutated_mod.get_global_var('func_63')
var_65 = relay.var("var_65", dtype = "uint16", shape = (11, 1))#candidate|65|(11, 1)|var|uint16
var_66 = relay.var("var_66", dtype = "uint16", shape = (11, 6))#candidate|66|(11, 6)|var|uint16
var_67 = relay.var("var_67", dtype = "float64", shape = (168,))#candidate|67|(168,)|var|float64
call_64 = func_63_call(var_65,var_66,var_67,)
output = call_64
func_68 = relay.Function([var_65,var_66,var_67,], output)
mutated_mod['func_68'] = func_68
mutated_mod = relay.transform.InferType()(mutated_mod)
var_70 = relay.var("var_70", dtype = "float64", shape = (11, 3, 7))#candidate|70|(11, 3, 7)|var|float64
uop_71 = relay.rsqrt(var_70.astype('float64')) # shape=(11, 3, 7)
var_73 = relay.var("var_73", dtype = "float64", shape = (11, 3, 7))#candidate|73|(11, 3, 7)|var|float64
bop_74 = relay.logical_and(var_70.astype('bool'), relay.reshape(var_73.astype('bool'), relay.shape_of(var_70))) # shape=(11, 3, 7)
bop_77 = relay.mod(uop_71.astype('float64'), relay.reshape(bop_74.astype('float64'), relay.shape_of(uop_71))) # shape=(11, 3, 7)
func_63_call = mod.get_global_var('func_63')
func_68_call = mutated_mod.get_global_var('func_68')
const_81 = relay.const([9,9,10,-2,-1,-7,-6,-2,-2,-8,2], dtype = "uint16")#candidate|81|(11,)|const|uint16
var_82 = relay.var("var_82", dtype = "uint16", shape = (66,))#candidate|82|(66,)|var|uint16
var_83 = relay.var("var_83", dtype = "float64", shape = (168,))#candidate|83|(168,)|var|float64
call_80 = relay.TupleGetItem(func_63_call(relay.reshape(const_81.astype('uint16'), [11, 1]), relay.reshape(var_82.astype('uint16'), [11, 6]), relay.reshape(var_83.astype('float64'), [168,]), ), 2)
call_84 = relay.TupleGetItem(func_68_call(relay.reshape(const_81.astype('uint16'), [11, 1]), relay.reshape(var_82.astype('uint16'), [11, 6]), relay.reshape(var_83.astype('float64'), [168,]), ), 2)
uop_85 = relay.atanh(var_70.astype('float32')) # shape=(11, 3, 7)
uop_87 = relay.sin(bop_77.astype('float32')) # shape=(11, 3, 7)
uop_89 = relay.asinh(uop_87.astype('float64')) # shape=(11, 3, 7)
uop_91 = relay.rsqrt(uop_87.astype('float64')) # shape=(11, 3, 7)
var_93 = relay.var("var_93", dtype = "float64", shape = (11, 3, 7))#candidate|93|(11, 3, 7)|var|float64
bop_94 = relay.greater_equal(bop_77.astype('bool'), relay.reshape(var_93.astype('bool'), relay.shape_of(bop_77))) # shape=(11, 3, 7)
output = relay.Tuple([call_80,const_81,var_82,var_83,uop_85,uop_89,uop_91,bop_94,])
output2 = relay.Tuple([call_84,const_81,var_82,var_83,uop_85,uop_89,uop_91,bop_94,])
func_97 = relay.Function([var_70,var_73,var_82,var_83,var_93,], output)
mod['func_97'] = func_97
mod = relay.transform.InferType()(mod)
var_98 = relay.var("var_98", dtype = "float64", shape = (11, 3, 7))#candidate|98|(11, 3, 7)|var|float64
var_99 = relay.var("var_99", dtype = "float64", shape = (11, 3, 7))#candidate|99|(11, 3, 7)|var|float64
var_100 = relay.var("var_100", dtype = "uint16", shape = (66,))#candidate|100|(66,)|var|uint16
var_101 = relay.var("var_101", dtype = "float64", shape = (168,))#candidate|101|(168,)|var|float64
var_102 = relay.var("var_102", dtype = "float64", shape = (11, 3, 7))#candidate|102|(11, 3, 7)|var|float64
output = func_97(var_98,var_99,var_100,var_101,var_102,)
func_103 = relay.Function([var_98,var_99,var_100,var_101,var_102,], output)
mutated_mod['func_103'] = func_103
mutated_mod = relay.transform.InferType()(mutated_mod)
const_105 = relay.const([[10,10,10,8,2,7,-8,-9,2,3,9,7],[4,6,7,5,-6,1,3,-5,5,-10,-2,9],[4,10,-6,5,-8,1,9,-3,3,4,5,-10],[1,5,-10,-7,-8,8,-4,6,-4,-7,3,9],[-4,-1,-4,9,-10,7,9,-2,3,-1,-3,-8],[3,9,5,-3,4,-10,-4,2,-5,4,6,-3],[8,-3,2,-7,9,5,5,-5,-2,7,-5,-2]], dtype = "uint32")#candidate|105|(7, 12)|const|uint32
var_106 = relay.var("var_106", dtype = "uint32", shape = (7, 12))#candidate|106|(7, 12)|var|uint32
bop_107 = relay.not_equal(const_105.astype('bool'), relay.reshape(var_106.astype('bool'), relay.shape_of(const_105))) # shape=(7, 12)
var_110 = relay.var("var_110", dtype = "uint32", shape = (7, 12))#candidate|110|(7, 12)|var|uint32
bop_111 = relay.floor_divide(var_106.astype('float64'), relay.reshape(var_110.astype('float64'), relay.shape_of(var_106))) # shape=(7, 12)
var_114 = relay.var("var_114", dtype = "uint32", shape = (7, 12))#candidate|114|(7, 12)|var|uint32
bop_115 = relay.divide(const_105.astype('float64'), relay.reshape(var_114.astype('float64'), relay.shape_of(const_105))) # shape=(7, 12)
output = relay.Tuple([bop_107,bop_111,bop_115,])
output2 = relay.Tuple([bop_107,bop_111,bop_115,])
func_118 = relay.Function([var_106,var_110,var_114,], output)
mod['func_118'] = func_118
mod = relay.transform.InferType()(mod)
mutated_mod['func_118'] = func_118
mutated_mod = relay.transform.InferType()(mutated_mod)
func_118_call = mutated_mod.get_global_var('func_118')
var_120 = relay.var("var_120", dtype = "uint32", shape = (7, 12))#candidate|120|(7, 12)|var|uint32
var_121 = relay.var("var_121", dtype = "uint32", shape = (7, 12))#candidate|121|(7, 12)|var|uint32
var_122 = relay.var("var_122", dtype = "uint32", shape = (7, 12))#candidate|122|(7, 12)|var|uint32
call_119 = func_118_call(var_120,var_121,var_122,)
output = call_119
func_123 = relay.Function([var_120,var_121,var_122,], output)
mutated_mod['func_123'] = func_123
mutated_mod = relay.transform.InferType()(mutated_mod)
var_125 = relay.var("var_125", dtype = "int64", shape = ())#candidate|125|()|var|int64
const_126 = relay.const([[5,-5,10,2,-1,7,-6,-1,9,7,1,9],[4,-10,5,8,-7,-6,9,5,2,5,2,-7],[9,2,-7,-2,9,3,1,-3,-8,-7,6,9],[3,8,-10,-6,-10,-7,-3,8,-10,-5,4,-1],[-6,9,10,2,10,7,-8,8,-5,-4,3,-10],[5,-4,-3,3,-1,3,-10,5,8,3,6,3],[6,10,1,10,5,-7,9,10,-4,-3,2,6],[9,6,-1,-7,-6,4,-6,5,10,-2,4,1]], dtype = "int64")#candidate|126|(8, 12)|const|int64
bop_127 = relay.maximum(var_125.astype('int64'), const_126.astype('int64')) # shape=(8, 12)
var_130 = relay.var("var_130", dtype = "int64", shape = (8, 12))#candidate|130|(8, 12)|var|int64
bop_131 = relay.bitwise_or(bop_127.astype('uint64'), relay.reshape(var_130.astype('uint64'), relay.shape_of(bop_127))) # shape=(8, 12)
bop_134 = relay.right_shift(bop_131.astype('int8'), relay.reshape(const_126.astype('int8'), relay.shape_of(bop_131))) # shape=(8, 12)
bop_137 = relay.floor_mod(bop_134.astype('float64'), relay.reshape(bop_127.astype('float64'), relay.shape_of(bop_134))) # shape=(8, 12)
uop_140 = relay.asin(var_130.astype('float64')) # shape=(8, 12)
uop_142 = relay.asin(uop_140.astype('float32')) # shape=(8, 12)
uop_144 = relay.tan(uop_142.astype('float32')) # shape=(8, 12)
uop_146 = relay.atanh(uop_140.astype('float32')) # shape=(8, 12)
const_148 = relay.const([[2.786394,-5.709966,1.399073,-3.135872,-9.737061,3.970557,5.043288,-1.576977,-5.687775,5.029924,8.763537,2.203175],[6.336584,-1.920126,-1.379362,2.902866,9.307569,5.751072,9.528319,9.154954,3.558225,-3.850132,-4.002752,1.548744],[-0.572505,-3.762207,-5.988940,-0.452108,9.755473,4.584313,6.044822,4.056634,-7.788149,9.711899,8.894784,1.114641],[-8.638844,3.434089,-3.807614,1.072915,1.431347,-9.020802,-2.069964,8.178163,-7.171748,8.235802,8.946237,-6.775324],[7.917119,7.684340,3.536282,1.576205,-2.831635,-0.465074,6.837706,-1.105623,-7.472831,-3.785476,0.985935,-7.394404],[-1.617582,6.820273,-7.245404,-7.861739,-0.220017,-1.351353,-0.969298,4.703996,-3.997935,-5.152267,4.856708,-5.574960],[9.444115,-9.110258,-9.241302,-8.860388,-5.142096,2.815928,-5.830486,-1.926245,7.783649,-2.532146,-6.828258,4.392963],[4.168199,-8.882825,-1.950012,-6.194952,-3.736051,-4.378798,4.509010,9.343298,4.130180,2.051579,-8.625510,-5.258381]], dtype = "float32")#candidate|148|(8, 12)|const|float32
bop_149 = relay.left_shift(uop_144.astype('uint16'), relay.reshape(const_148.astype('uint16'), relay.shape_of(uop_144))) # shape=(8, 12)
bop_152 = relay.mod(uop_140.astype('float32'), relay.reshape(const_148.astype('float32'), relay.shape_of(uop_140))) # shape=(8, 12)
func_97_call = mod.get_global_var('func_97')
func_103_call = mutated_mod.get_global_var('func_103')
const_156 = relay.const([-7.942466,9.618133,0.067073,8.982150,-3.106156,1.786036,0.651860,-3.002222,-1.254948,1.395097,1.850498,-8.996525,1.794900,1.347224,-6.776162,7.942318,5.330977,3.710104,9.956933,-3.652694,-5.941617,-3.367951,-2.571398,3.666710,-9.685175,-9.109889,-4.395413,-5.993727,-8.931000,5.730052,-3.723875,9.521006,8.248025,6.921539,8.363841,-9.084308,8.035486,-1.933828,4.283266,4.434694,-6.289469,9.451865,-8.243382,-4.831998,-9.459901,6.944171,5.774156,-1.810961,4.637007,6.121572,3.621143,-7.389683,-2.163944,-9.574860,-0.675533,3.313690,6.374503,-7.529578,2.229615,9.367082,-1.593319,-4.044257,3.099117,-7.997786,-1.346954,-7.183287,2.766029,3.559301,4.025281,-4.197029,1.053670,-2.857459,-5.863736,-3.726614,9.117268,7.369505,-3.136668,3.684925,-5.520748,-2.839838,3.957280,-4.816521,1.529755,-7.372855,2.756159,-6.743966,8.460750,-6.271013,5.880375,4.189225,-4.236154,-9.037744,-5.674386,-4.399462,9.592023,-3.155396,5.108874,-8.288779,-0.413369,5.860347,4.610382,-6.011318,-5.979278,-8.363231,2.120235,5.431950,0.927184,-5.921091,6.647062,-0.616030,6.051751,-4.228742,-7.233686,7.748537,8.010890,-8.706608,-5.905797,8.225440,6.645464,6.398876,5.679123,-8.325807,-4.499906,9.305679,-9.613612,9.418525,-5.947981,-3.091280,-8.448317,6.780911,8.771398,-9.915173,-9.550631,-7.055190,3.742565,-4.565543,-6.691504,4.812680,1.151249,1.812717,8.682407,6.353059,-7.680637,-3.038064,4.096015,-6.530028,6.958169,-3.851232,1.606493,-0.774181,-5.256307,7.336409,4.964592,-6.526214,9.864283,-6.535546,-9.168562,-2.106157,-2.429662,9.776958,-2.159701,-7.712480,-0.359068,8.094495,3.538168,-7.523412,-4.955869,5.483124,4.882091,-1.668107,0.251005,9.515769,-1.022779,-6.481301,-5.446252,-2.951333,8.918320,-2.658370,-8.651109,0.236947,1.240300,7.285114,-5.225133,-9.948231,-8.925019,-6.298816,5.189618,6.227629,-8.137925,-3.852349,3.176760,8.484969,3.775600,-5.566379,-5.942328,-4.469034,-3.070886,8.603078,-3.813408,-0.854055,7.402522,-6.760991,-1.299174,-3.991545,6.645919,4.509298,-1.517430,3.746655,-3.692104,2.687775,-3.195160,1.071094,6.639876,0.034096,-9.481671,1.116536,-3.690972,-4.822287,2.624678,5.746209,-4.651018,-6.322662,-5.976017,-9.693910,3.418518,1.940643,2.795947,-4.567103,2.590073,-2.074354,6.145537], dtype = "float64")#candidate|156|(231,)|const|float64
const_157 = relay.const([5,-8,-10,2,-2,5,-4,4,5,-10,-9,10,-8,-5,5,2,6,2,4,5,10,-7,2,-6,5,1,-6,8,-8,-3,-10,4,6,-5,1,-6,1,5,-7,10,6,-8,2,4,-8,2,3,6,-3,8,1,3,9,5,1,-10,7,-7,3,-1,-8,8,1,1,-7,8], dtype = "uint16")#candidate|157|(66,)|const|uint16
var_158 = relay.var("var_158", dtype = "float64", shape = (168,))#candidate|158|(168,)|var|float64
call_155 = relay.TupleGetItem(func_97_call(relay.reshape(const_156.astype('float64'), [11, 3, 7]), relay.reshape(const_156.astype('float64'), [11, 3, 7]), relay.reshape(const_157.astype('uint16'), [66,]), relay.reshape(var_158.astype('float64'), [168,]), relay.reshape(const_156.astype('float64'), [11, 3, 7]), ), 0)
call_159 = relay.TupleGetItem(func_103_call(relay.reshape(const_156.astype('float64'), [11, 3, 7]), relay.reshape(const_156.astype('float64'), [11, 3, 7]), relay.reshape(const_157.astype('uint16'), [66,]), relay.reshape(var_158.astype('float64'), [168,]), relay.reshape(const_156.astype('float64'), [11, 3, 7]), ), 0)
bop_160 = relay.left_shift(var_158.astype('uint32'), var_125.astype('uint32')) # shape=(168,)
bop_163 = relay.right_shift(uop_146.astype('uint32'), relay.reshape(const_126.astype('uint32'), relay.shape_of(uop_146))) # shape=(8, 12)
bop_166 = relay.mod(uop_144.astype('float64'), relay.reshape(const_148.astype('float64'), relay.shape_of(uop_144))) # shape=(8, 12)
uop_169 = relay.log10(bop_149.astype('float32')) # shape=(8, 12)
uop_171 = relay.sqrt(uop_144.astype('float64')) # shape=(8, 12)
var_173 = relay.var("var_173", dtype = "float64", shape = (8, 12))#candidate|173|(8, 12)|var|float64
bop_174 = relay.bitwise_and(bop_166.astype('int16'), relay.reshape(var_173.astype('int16'), relay.shape_of(bop_166))) # shape=(8, 12)
uop_177 = relay.rsqrt(bop_163.astype('float64')) # shape=(8, 12)
bop_179 = relay.logical_or(bop_166.astype('bool'), relay.reshape(var_173.astype('bool'), relay.shape_of(bop_166))) # shape=(8, 12)
var_182 = relay.var("var_182", dtype = "bool", shape = (8, 12))#candidate|182|(8, 12)|var|bool
bop_183 = relay.floor_mod(bop_179.astype('float32'), relay.reshape(var_182.astype('float32'), relay.shape_of(bop_179))) # shape=(8, 12)
bop_186 = relay.minimum(uop_169.astype('int32'), relay.reshape(bop_137.astype('int32'), relay.shape_of(uop_169))) # shape=(8, 12)
bop_189 = relay.multiply(bop_174.astype('int32'), relay.reshape(uop_144.astype('int32'), relay.shape_of(bop_174))) # shape=(8, 12)
output = relay.Tuple([bop_152,call_155,const_156,const_157,bop_160,uop_171,uop_177,bop_183,bop_186,bop_189,])
output2 = relay.Tuple([bop_152,call_159,const_156,const_157,bop_160,uop_171,uop_177,bop_183,bop_186,bop_189,])
func_192 = relay.Function([var_125,var_130,var_158,var_173,var_182,], output)
mod['func_192'] = func_192
mod = relay.transform.InferType()(mod)
var_193 = relay.var("var_193", dtype = "int64", shape = ())#candidate|193|()|var|int64
var_194 = relay.var("var_194", dtype = "int64", shape = (8, 12))#candidate|194|(8, 12)|var|int64
var_195 = relay.var("var_195", dtype = "float64", shape = (168,))#candidate|195|(168,)|var|float64
var_196 = relay.var("var_196", dtype = "float64", shape = (8, 12))#candidate|196|(8, 12)|var|float64
var_197 = relay.var("var_197", dtype = "bool", shape = (8, 12))#candidate|197|(8, 12)|var|bool
output = func_192(var_193,var_194,var_195,var_196,var_197,)
func_198 = relay.Function([var_193,var_194,var_195,var_196,var_197,], output)
mutated_mod['func_198'] = func_198
mutated_mod = relay.transform.InferType()(mutated_mod)
var_200 = relay.var("var_200", dtype = "float64", shape = (9, 12, 14))#candidate|200|(9, 12, 14)|var|float64
uop_201 = relay.cosh(var_200.astype('float64')) # shape=(9, 12, 14)
bop_203 = relay.greater(uop_201.astype('bool'), relay.reshape(var_200.astype('bool'), relay.shape_of(uop_201))) # shape=(9, 12, 14)
bop_206 = relay.logical_or(var_200.astype('bool'), relay.reshape(uop_201.astype('bool'), relay.shape_of(var_200))) # shape=(9, 12, 14)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
const_210 = relay.const([9.014044,0.443819,9.355114,2.452091,-2.720701,-9.496763,9.396014,5.181191,-1.308796,6.521791,2.621730,3.687079,4.029089,-5.055955,4.532361,3.144953,4.350880,2.289599,0.601231,1.936789,4.262456,-1.830120,9.697576,0.338904,-6.306877,0.313124,7.027981,3.728547,-3.821097,1.598045,4.688998,-4.903461,0.667681,-8.451490,-9.113036,3.440758,7.031176,-7.429334,8.975267,0.210688,-8.501571,1.432396,1.452619,4.265687,-3.323784,-8.794050,0.676711,6.295823,-2.890883,-0.891770,6.521652,-6.477859,3.577747,-9.650995,1.391881,-0.095512,-4.631568,1.138030,-7.243384,1.048851,1.138226,7.744603,-1.116872,-6.120275,-8.806552,1.014821,-0.963404,-0.866979,-6.150672,-8.612317,-8.522461,-4.681148,4.223319,2.708866,-9.510078,-9.774615,-7.586703,-8.452737,-3.369704,4.589830,3.072636,2.305888,-1.029686,5.175480,-2.474109,-6.759987,-3.081067,5.525774,-2.688168,-6.709392,5.576210,9.789451,-1.147533,-3.291767,-1.587171,4.175970,-0.007379,9.886678,-8.401360,4.176586,-3.196617,-9.497327,-4.526286,-5.306638,-0.379226,6.422540,-5.744060,7.159840,7.106944,4.795278,5.963048,0.596523,3.077672,-9.953509,-4.005498,-6.206067,-1.084588,9.252958,-5.480806,1.893642,-5.574310,-0.802827,1.242975,7.478125,2.951745,-2.949848,3.960513,-3.150027,-0.329044,8.875509,7.286695,-3.826420,-8.977241,-4.825265,1.529336,9.397901,3.242095,-3.380585,5.888184,8.731106,6.375432,5.596422,9.406200,4.168909,-9.322547,-8.728637,1.588173,3.306018,6.709055,-7.146147,-5.389794,-0.882102,-9.351264,-6.182726,3.672547,-4.631664,-2.335514,2.100332,-9.078220,8.022104,9.928011,-9.854136,-6.392391,-0.183937,0.202368,9.918651,-7.410697,5.718653], dtype = "float64")#candidate|210|(168,)|const|float64
call_209 = relay.TupleGetItem(func_14_call(relay.reshape(const_210.astype('float64'), [14, 12]), relay.reshape(const_210.astype('float64'), [14, 12]), ), 1)
call_211 = relay.TupleGetItem(func_17_call(relay.reshape(const_210.astype('float64'), [14, 12]), relay.reshape(const_210.astype('float64'), [14, 12]), ), 1)
uop_212 = relay.asin(var_200.astype('float64')) # shape=(9, 12, 14)
bop_214 = relay.logical_xor(bop_206.astype('uint32'), relay.reshape(bop_203.astype('uint32'), relay.shape_of(bop_206))) # shape=(9, 12, 14)
bop_217 = relay.greater(bop_203.astype('bool'), relay.reshape(bop_206.astype('bool'), relay.shape_of(bop_203))) # shape=(9, 12, 14)
bop_220 = relay.divide(bop_217.astype('float32'), relay.reshape(uop_212.astype('float32'), relay.shape_of(bop_217))) # shape=(9, 12, 14)
func_63_call = mod.get_global_var('func_63')
func_68_call = mutated_mod.get_global_var('func_68')
var_224 = relay.var("var_224", dtype = "uint16", shape = (11,))#candidate|224|(11,)|var|uint16
var_225 = relay.var("var_225", dtype = "uint16", shape = (66,))#candidate|225|(66,)|var|uint16
call_223 = relay.TupleGetItem(func_63_call(relay.reshape(var_224.astype('uint16'), [11, 1]), relay.reshape(var_225.astype('uint16'), [11, 6]), relay.reshape(const_210.astype('float64'), [168,]), ), 2)
call_226 = relay.TupleGetItem(func_68_call(relay.reshape(var_224.astype('uint16'), [11, 1]), relay.reshape(var_225.astype('uint16'), [11, 6]), relay.reshape(const_210.astype('float64'), [168,]), ), 2)
bop_227 = relay.greater(bop_203.astype('bool'), relay.reshape(bop_217.astype('bool'), relay.shape_of(bop_203))) # shape=(9, 12, 14)
uop_230 = relay.log2(call_209.astype('float64')) # shape=(14, 12)
uop_232 = relay.log2(call_211.astype('float64')) # shape=(14, 12)
uop_233 = relay.acosh(bop_206.astype('float32')) # shape=(9, 12, 14)
bop_235 = relay.bitwise_and(uop_233.astype('uint8'), relay.reshape(bop_217.astype('uint8'), relay.shape_of(uop_233))) # shape=(9, 12, 14)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
call_238 = relay.TupleGetItem(func_14_call(relay.reshape(const_210.astype('float64'), [14, 12]), relay.reshape(uop_230.astype('float64'), [14, 12]), ), 1)
call_239 = relay.TupleGetItem(func_17_call(relay.reshape(const_210.astype('float64'), [14, 12]), relay.reshape(uop_230.astype('float64'), [14, 12]), ), 1)
bop_240 = relay.less(bop_235.astype('bool'), relay.reshape(uop_233.astype('bool'), relay.shape_of(bop_235))) # shape=(9, 12, 14)
uop_243 = relay.sigmoid(bop_235.astype('float64')) # shape=(9, 12, 14)
uop_245 = relay.erf(call_238.astype('float64')) # shape=(14, 12)
uop_247 = relay.erf(call_239.astype('float64')) # shape=(14, 12)
var_248 = relay.var("var_248", dtype = "float64", shape = (9, 12, 14))#candidate|248|(9, 12, 14)|var|float64
bop_249 = relay.logical_and(uop_243.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(uop_243))) # shape=(9, 12, 14)
uop_252 = relay.atan(bop_214.astype('float64')) # shape=(9, 12, 14)
uop_254 = relay.log10(bop_249.astype('float32')) # shape=(9, 12, 14)
const_256 = relay.const([[[9.905406,-0.351186,1.318920,2.364627,7.163984,3.810331,2.500591,-4.316643,-1.366304,7.832627,-8.935526,-6.595812,0.645484,1.481793],[-9.206421,-8.630418,0.413299,6.703138,-7.030877,-5.889490,-5.963440,8.989322,-0.470412,3.134147,-6.352862,3.495893,-4.247816,0.987675],[5.275009,-4.429782,5.050004,2.565147,4.480725,1.996943,5.602367,9.815070,6.785148,8.689376,-6.322132,-9.401175,-5.593180,-6.760432],[-8.682502,-7.426969,-3.472444,9.535428,4.853723,5.873435,-7.731498,1.447515,-7.724882,2.724677,7.297019,-7.495458,-5.236840,-4.171537],[-7.196432,1.751314,9.622189,-4.037628,-7.810937,2.868487,-8.378657,-6.428746,-9.012226,6.860503,8.930242,-1.291397,5.519959,-1.202321],[-4.733929,-0.688400,5.966232,3.048937,-8.410855,1.307074,2.471439,-9.568901,0.041076,-1.909454,-0.633348,-1.211334,1.890747,9.550408],[2.603103,-5.678759,-9.040801,2.605058,-7.567782,-4.449713,-2.315329,8.750639,0.192706,-2.154988,-3.871495,-6.087782,-6.253900,-7.958076],[3.344368,-3.246566,-8.441198,-7.762276,-6.062594,-0.115572,-9.290568,4.191305,-0.512061,3.322504,-5.879034,-2.284227,-8.550071,-6.838848],[-0.821795,-7.254462,-1.615737,-0.402935,2.973717,1.798765,-7.845100,-0.761449,0.568378,-0.216964,-8.836210,0.006616,8.346517,-6.039096],[-9.456315,-0.889622,0.582936,-7.360756,1.934737,-5.325513,-9.093819,-3.899272,-7.674485,3.068513,-4.970537,2.350309,4.504529,-6.914773],[2.540362,2.739145,9.339810,-7.618983,-7.705004,-9.094887,6.346703,6.098969,-1.139490,4.451054,-8.854169,-8.736341,-7.239990,-5.266567],[-4.188691,-1.412228,2.928725,0.724210,3.255437,4.067423,0.296873,1.822597,8.738250,-3.142910,5.807148,-5.427561,-2.308454,-9.297779]],[[-0.650048,3.674292,4.053587,-5.989496,7.722873,2.519794,3.377906,-7.493355,-8.287319,-7.079872,-4.090647,-8.836671,-4.886833,-1.588326],[1.256052,9.366510,4.541624,6.632755,-0.282724,9.914311,2.556012,-3.046533,8.875581,7.956558,-4.939886,1.502945,-4.859416,-4.080825],[-6.212588,-3.194963,-1.541643,-7.999051,-2.367985,-4.927096,3.591343,-9.785643,5.406413,-9.324302,1.372934,-1.834369,3.103907,3.591117],[9.887149,-0.425691,-6.411580,-6.100862,-6.551255,-0.893909,-4.682388,9.167344,-1.307807,-1.854850,-3.508382,-8.355170,2.367880,1.170757],[2.510631,-1.619302,3.709155,-7.452327,9.646974,-0.673510,8.569861,-1.356188,3.912345,-1.217317,8.949131,8.557573,8.751060,-1.542902],[4.446308,7.876486,-8.832181,2.126896,-8.992748,2.837439,-4.709491,2.585264,-5.315690,3.392298,8.568876,6.262721,4.269039,-2.547206],[-9.595742,1.076417,-0.101635,-5.451591,-7.163852,-9.764399,-0.576149,5.658234,9.820071,-0.407508,-0.315532,-7.053436,3.656096,1.653053],[-5.425919,7.360921,-2.305447,-6.787851,4.164149,9.766726,0.087003,-7.426818,3.448977,-8.438522,-1.477133,-7.193207,7.781673,-1.125049],[-3.083813,6.967531,6.260073,7.923726,0.157987,8.175370,7.421180,-4.968703,-2.421448,-0.019963,-3.905672,4.440172,8.194471,-8.534815],[-4.264459,-1.978802,-2.031614,3.144880,-5.116321,7.877964,7.439287,4.117197,2.178312,4.716932,-4.222721,4.985436,-2.263844,-3.509240],[-2.366350,-8.390307,7.607436,0.049845,-0.859787,-2.386483,4.143875,-2.346400,-7.338066,1.477824,-7.491914,8.941833,-6.956809,6.736296],[9.865194,8.035396,-3.522844,-2.521815,-1.457073,0.984082,7.803754,5.011973,8.079658,6.207357,7.571568,1.753912,8.778453,9.386763]],[[1.413793,-4.784810,-3.741582,-9.189794,-0.478314,-5.548340,-2.386356,9.956644,9.027812,3.475579,3.062577,-9.292545,5.051215,-3.821165],[5.890987,8.491982,-7.120626,7.239705,6.234312,-0.852631,0.197986,-5.336414,-2.583441,0.813384,-1.613786,4.635975,4.204738,1.441316],[3.216536,5.844436,8.235357,-9.763571,-7.849401,-9.622177,5.152695,6.100516,4.264267,6.099773,-1.442966,-9.896035,2.934759,-1.997091],[7.247895,4.495703,9.841676,3.628934,0.808518,-1.243298,-6.723002,8.404351,2.695006,-1.462478,-5.716563,4.347000,-3.929192,-9.842115],[0.442716,-9.037834,-8.331503,2.625808,-4.366992,-9.496709,-7.719174,7.386083,2.409249,3.966314,-7.300033,1.039035,6.329529,6.944505],[-4.600978,7.842656,-2.234849,2.936721,8.241161,-2.650241,6.076660,-8.350920,7.333138,-3.265145,-8.810182,-9.486478,1.502907,-9.280091],[-5.767726,-5.291672,0.023292,-5.636709,5.945951,-7.488041,-1.828163,-8.595136,9.966485,-4.065556,4.499493,8.554717,-2.582109,-8.981598],[7.848205,-7.206137,-1.673493,6.561827,-8.691252,2.658523,6.378879,-3.844626,-2.547199,5.012297,9.039138,-8.496423,7.166734,4.801522],[2.243179,2.866884,-2.977705,-5.492315,3.161263,-9.862546,1.786810,4.177283,0.269503,1.507703,9.441349,3.831813,-2.320266,9.720725],[5.068636,5.198437,-4.504806,8.573589,-8.625159,9.223086,1.237295,2.673194,0.825828,7.947201,-2.139650,-5.874532,-5.159611,9.656952],[3.162077,-3.765101,8.765942,-2.242818,-0.450598,-4.329668,9.897829,-3.714275,4.028621,-6.026442,8.045806,8.524541,-2.440261,2.348421],[2.597839,0.049736,2.306319,2.343619,2.639250,-8.123383,6.282177,-4.931181,-6.911358,-0.374092,-9.581022,-6.121285,-7.943380,1.185866]],[[6.175761,7.169179,5.033478,5.925944,-1.456501,5.171061,-5.210917,-0.644769,-4.933745,7.656535,7.657306,-0.680580,-2.212491,4.064727],[-5.049347,6.685118,4.806670,-3.471307,6.764660,2.901406,-2.731205,0.533089,-8.226261,4.291186,-2.306481,1.294081,-7.645629,8.243349],[-4.683287,5.630687,2.506796,-8.261868,-0.383013,-1.797489,5.309722,8.919064,-5.149581,-8.914996,-2.117562,-4.336568,-5.617981,4.568836],[3.510417,5.175460,7.524113,5.135090,5.493309,-3.423236,-3.945791,2.774044,-4.379895,-0.473563,4.291465,-4.663913,-7.881855,-6.443409],[-7.587498,2.059253,-6.901852,-6.694269,0.293012,6.309632,2.759468,-9.993206,-7.985322,1.055066,2.404504,8.512773,5.158306,-8.883567],[-3.106771,-3.974835,-0.648123,1.595136,6.646690,4.754702,5.203809,1.304392,-2.321344,-7.914877,-8.341057,2.265030,1.703127,-4.908544],[-1.680505,-6.037979,-4.158885,-4.309590,-1.402147,2.053829,5.718762,0.813661,0.406096,7.782124,-2.665171,-0.456814,-6.971539,-6.589148],[8.999114,-9.169332,-5.711517,-9.120900,6.246086,8.901114,-2.149768,7.338650,0.051078,-5.242711,-5.178782,-0.607159,-5.310885,4.738499],[4.696885,-0.132839,-2.466273,-1.428130,-8.958997,3.089636,5.738178,2.857377,-6.816992,8.053094,7.006928,-1.810152,-0.338998,8.312665],[-8.996632,2.026627,-1.161275,-8.074471,-1.822905,0.091901,2.528011,-2.823858,-7.242780,9.981951,1.145223,-2.402137,-9.066871,-1.743969],[-9.972127,9.012526,-5.370909,-1.442519,6.068132,7.758143,2.075326,-0.744055,-8.300897,-1.732282,-9.987876,7.618136,-2.053649,5.595470],[-0.892936,0.405171,9.995560,5.523803,7.043300,-1.008237,-3.780514,-5.058648,6.291342,4.824887,-5.739187,-5.541280,3.055869,-9.415783]],[[3.213994,-5.673114,5.067141,-3.472741,1.501207,-2.948239,4.534172,6.846964,-0.773642,-0.484439,-0.878642,9.134054,1.645693,3.288829],[6.340067,-5.804117,2.627652,3.578480,3.347888,3.109285,7.124797,6.056988,7.702466,7.882829,1.633856,3.104016,2.040175,-6.520961],[-6.856153,2.018111,4.092763,-3.298579,-8.313155,3.996763,-8.469181,-6.257041,-5.632686,-8.624107,-6.237342,9.860282,3.074462,4.798494],[-0.765507,1.122992,-9.227879,-3.424370,6.766584,-7.561703,-6.933924,2.384845,0.365278,5.647033,0.898929,4.147743,6.286165,6.404044],[3.628350,8.634513,-0.819604,-2.952636,3.471530,-6.219555,4.450101,-8.371166,-3.420940,-3.767968,-4.891457,2.116970,-3.762194,8.257235],[-1.679129,-1.788211,-6.913880,2.409325,0.016437,6.381369,-2.744461,8.379768,-2.356185,-0.970485,8.129089,-5.128343,-1.453031,5.593985],[-7.609509,-6.072081,-2.020552,-5.535688,-8.423045,4.764172,4.563445,-4.276693,6.776089,-7.156027,3.987479,-4.050512,3.424942,-6.671345],[4.147678,-5.571381,8.802138,-5.579889,-4.024588,-5.756348,-2.356102,-4.059829,-7.900025,2.330849,-8.582288,2.184500,-4.771496,-8.963073],[2.431881,2.445680,-4.236705,-5.756042,-2.817414,6.362948,-5.992998,5.472199,-7.556734,-8.959179,-1.597859,-7.516741,8.286595,9.652871],[3.750182,-3.199092,-1.618458,4.241880,8.677658,-3.080294,-3.824225,-1.416646,8.467193,0.758747,0.718768,-8.753420,-2.650050,-9.949340],[4.896337,5.662210,9.652419,8.805248,-8.177005,1.341910,-0.843361,2.404831,8.782154,5.407462,-2.080869,-9.207412,8.928229,0.584505],[0.202474,8.361992,8.307135,-8.688420,-6.211779,4.145117,-8.821653,6.230880,-0.749282,-3.049341,-5.921129,5.429469,-7.230819,5.557013]],[[-3.867299,3.918042,-8.967484,-5.572705,-4.986762,1.302955,-8.976122,8.620570,3.244279,-2.410690,7.235590,3.312000,-5.978931,-1.161303],[7.366323,-8.137510,7.815037,7.339741,7.542343,8.365710,-7.043779,-2.414392,8.589265,-5.019701,-4.553387,2.983498,8.335602,-4.678825],[7.010940,-8.455738,-3.475828,-0.139426,8.103267,3.546013,-0.488634,-6.742591,3.429870,0.414072,-1.801123,7.256370,-8.699732,-4.287938],[-7.055938,-2.773577,-8.645188,-3.571904,3.181299,-2.749953,-9.260567,5.296503,-2.688104,-8.266091,0.626553,7.046863,1.740261,-4.885847],[8.225054,1.253564,1.239055,4.060430,-6.979399,-7.371866,-0.004944,-0.095412,7.181427,2.963416,5.636693,0.831687,-5.166098,-6.381594],[-4.883264,2.724446,-2.372739,3.471053,-1.021071,7.086185,-7.816403,0.771196,-8.391105,7.282256,9.014878,7.256375,-8.549558,0.133590],[6.401425,-4.524821,6.217520,8.987825,-5.651579,3.713882,4.728457,-1.083209,4.185689,6.108987,4.626421,3.264031,3.404586,-1.059457],[3.590559,-8.779510,7.046217,-7.055422,5.761216,-9.641333,-7.827272,-7.479884,-7.930271,7.910592,-2.534934,8.667627,-5.989010,1.713371],[-4.489610,0.692166,9.203531,-7.552678,4.818727,9.519908,5.420177,-7.851424,-6.268165,8.751291,1.468766,-8.589726,0.411946,-5.316794],[-5.239029,-5.242542,4.753431,-3.329768,7.174919,0.825507,-5.382210,7.699721,2.710018,9.238969,2.084494,-3.859983,-1.925978,-3.518353],[2.810888,5.768588,-0.572745,-6.866558,0.596525,5.361923,1.236746,1.442493,1.449253,0.350830,8.422388,-1.749778,-0.057108,9.040576],[6.928540,-1.465957,-8.041858,-6.142156,7.790074,-3.377424,-5.654035,-9.579283,5.466997,6.469883,-1.888900,9.638584,4.760075,-1.554780]],[[-8.444780,-8.225031,-9.806170,-9.533281,-2.431765,2.583015,6.432299,6.739338,5.902378,-4.364243,9.494243,-0.380923,-3.743197,4.597446],[7.179274,0.793121,-3.361238,-7.202000,6.233573,3.006379,8.644724,9.298931,7.058364,-0.984303,-2.719569,2.617725,-7.657618,-1.521495],[0.314159,6.446736,4.158850,-8.338173,-1.759246,-4.531747,-5.509812,-9.184687,9.801118,-6.175866,-6.662535,7.614945,7.646159,-7.445912],[-2.132303,0.568294,1.661319,1.579247,4.596894,-6.352040,-0.831514,3.104574,-1.271651,-3.850503,-1.125995,-4.714930,-1.609550,4.420733],[-3.364316,0.299076,-4.930506,-6.987360,4.836495,3.309350,-3.257234,4.941093,-1.334272,7.410451,-8.610446,-1.596640,-1.779168,2.367749],[0.724977,3.818937,-8.856672,-1.641787,7.211064,-0.600563,-0.131288,0.102686,7.780550,4.496821,-0.389834,1.457460,4.556371,4.051729],[-7.928397,-8.577454,5.275319,-1.126121,-2.693467,8.112339,3.091398,4.896436,5.526522,-0.348843,1.437105,-7.386183,-5.894290,-9.702520],[-6.695140,-2.267291,-4.410319,-1.293113,-2.801687,5.558310,4.587677,-5.597548,9.972647,1.570792,-2.822231,5.838481,0.860100,7.914423],[0.206174,6.860226,6.274690,4.472854,-3.234377,-6.143044,-1.070554,-5.473736,-0.332794,-8.881916,-6.815281,-3.099499,-1.600235,-3.491824],[8.445587,8.731371,0.100675,-5.197615,-8.023200,-4.853444,3.619811,9.018319,-9.281754,-7.505682,-3.579690,-0.450447,-8.120518,-9.049472],[5.244900,-8.960366,-3.802577,2.044090,9.545353,9.939717,6.237751,-0.032223,-9.178344,-1.803650,8.656125,2.036686,-6.158409,-1.350765],[-8.562211,8.955444,3.844897,-7.269023,2.590155,7.992721,-5.615751,6.686338,-5.340392,-6.584590,7.952156,-3.824961,4.210500,5.775325]],[[6.893831,-5.468102,-7.415198,2.291012,-4.836926,1.182165,-2.987682,-0.287608,2.026600,-1.522204,3.964296,-1.721344,-8.923076,-3.111357],[-0.417483,9.894974,9.698907,1.066188,5.588140,-1.565554,1.887591,7.489748,-9.478183,-9.673443,0.044095,-2.344700,1.956760,-5.816633],[2.572149,-8.857161,-6.395635,2.626871,2.454488,9.723787,-7.419543,-2.318203,1.616553,0.025460,6.464842,-6.131557,-2.602935,-0.086438],[9.802590,0.018548,2.437930,8.106293,6.604010,1.057865,8.035085,3.189465,-0.951053,5.874860,-6.807317,-0.258458,-7.273614,-5.774543],[7.544585,3.615869,5.935268,3.979766,-0.770590,-2.179896,3.777881,-8.172989,-7.082097,-3.763763,-8.692304,4.695264,-5.578915,-8.787420],[-9.566356,-6.764957,1.875905,-8.138490,-6.574642,7.678126,-3.004025,6.258242,-8.540724,2.156740,1.090356,1.392061,4.310079,-6.138989],[-7.714768,2.701243,-8.069883,-7.061739,4.496657,-2.451703,-1.579801,-2.611237,-0.127688,6.780247,9.036143,6.590118,-5.059438,-7.859171],[1.366615,-5.507991,-1.016473,-0.344180,6.708902,-2.776648,-7.140063,-5.708304,8.970468,7.894867,-3.906082,-7.599070,8.071030,6.282503],[-8.408414,-4.313158,-6.220170,-4.031490,-3.625957,5.890778,0.209146,-4.445345,2.242309,6.799015,1.621596,-5.535857,8.524918,4.137349],[-3.283803,-2.595101,3.309589,1.442081,3.724756,-2.321571,-0.250418,9.120939,1.794787,7.850010,3.931539,3.510533,-0.645620,-1.502672],[-1.863750,-6.929451,-7.152642,-9.763827,3.715105,-8.873540,6.579761,-5.884376,-7.531159,0.507876,4.581630,-6.253831,0.323309,2.064306],[0.814966,9.429709,-2.467384,3.832551,5.772201,-1.993993,3.521562,3.573953,9.934040,-1.604344,-5.608013,0.696150,7.570010,-6.423092]],[[-0.249578,-8.819665,4.494297,3.236762,9.417336,8.279548,-1.932129,-9.514536,-7.331225,-4.650946,3.840924,3.718268,6.086953,-0.108515],[7.963430,1.478713,-1.722653,1.349420,-7.190892,1.260225,1.383944,-6.473570,-3.158009,5.804557,-8.653849,-6.100437,1.573355,0.633595],[4.654857,6.858188,-2.258282,-1.938015,-7.256381,2.164260,-5.052470,-1.066951,7.787853,-4.936576,9.704401,-9.002840,1.092493,-5.357096],[-8.548052,2.440592,1.698566,-4.323272,-5.819308,-9.182560,8.338191,8.188395,5.869572,4.293090,-6.911321,-8.853430,-2.767865,7.299519],[-1.812650,-7.702741,-6.970997,-6.338739,-7.223170,0.281140,1.440039,7.139043,6.411270,-4.106771,-9.188792,9.255660,2.286098,5.152493],[-5.370562,-8.434213,-0.615303,-1.601679,-7.490066,-7.944605,3.670332,0.934671,4.690119,6.718022,3.566129,7.669964,-1.596883,-1.803736],[5.733458,7.960734,1.866267,-7.992243,-8.232602,-4.754019,2.802553,4.393341,-9.478215,1.331596,9.241849,2.654266,-6.127431,-5.291081],[3.472819,9.923490,-6.160745,8.001412,-0.882092,2.042020,-0.716098,5.408271,-1.021449,-6.787208,-1.205887,4.292314,4.383066,-0.670305],[2.483546,-3.554416,-4.140003,1.839795,-2.785163,-1.426827,-1.097150,6.917502,7.711123,-4.610480,4.714014,-5.795375,-4.893936,8.046390],[-0.979608,-3.780124,-0.400845,7.915193,-5.109464,-5.709133,0.123093,5.479342,-2.538434,-6.525977,4.324300,-1.670800,5.951738,-0.599223],[-6.921802,3.693830,-5.621465,-6.494517,-8.412817,9.967110,9.341944,8.582598,-8.754514,-7.189788,7.364592,-7.416116,-3.243649,9.187882],[4.042920,2.863179,7.635928,7.151654,-5.559303,0.243530,3.502917,9.607145,-0.160579,1.414698,6.981066,6.413779,-3.329540,-0.111146]]], dtype = "float32")#candidate|256|(9, 12, 14)|const|float32
bop_257 = relay.maximum(uop_254.astype('int16'), relay.reshape(const_256.astype('int16'), relay.shape_of(uop_254))) # shape=(9, 12, 14)
output = relay.Tuple([const_210,bop_220,call_223,var_224,var_225,bop_227,uop_230,bop_240,uop_245,uop_252,bop_257,])
output2 = relay.Tuple([const_210,bop_220,call_226,var_224,var_225,bop_227,uop_232,bop_240,uop_247,uop_252,bop_257,])
func_260 = relay.Function([var_200,var_224,var_225,var_248,], output)
mod['func_260'] = func_260
mod = relay.transform.InferType()(mod)
mutated_mod['func_260'] = func_260
mutated_mod = relay.transform.InferType()(mutated_mod)
func_260_call = mutated_mod.get_global_var('func_260')
var_262 = relay.var("var_262", dtype = "float64", shape = (9, 12, 14))#candidate|262|(9, 12, 14)|var|float64
var_263 = relay.var("var_263", dtype = "uint16", shape = (11,))#candidate|263|(11,)|var|uint16
var_264 = relay.var("var_264", dtype = "uint16", shape = (66,))#candidate|264|(66,)|var|uint16
var_265 = relay.var("var_265", dtype = "float64", shape = (9, 12, 14))#candidate|265|(9, 12, 14)|var|float64
call_261 = func_260_call(var_262,var_263,var_264,var_265,)
output = call_261
func_266 = relay.Function([var_262,var_263,var_264,var_265,], output)
mutated_mod['func_266'] = func_266
mutated_mod = relay.transform.InferType()(mutated_mod)
const_268 = relay.const([[[9.512540,3.695686,-4.561174,0.353953,-4.000155,9.194586,-1.393970,0.610978,-3.163488,-2.119888],[3.903730,8.574469,-5.739052,5.777092,-1.633375,8.543333,0.379988,-1.153969,-9.730120,-3.859864],[3.221432,3.648876,4.358043,-8.727276,-4.415898,7.032207,2.840385,-5.259084,9.337557,8.924785],[-3.839958,2.619663,8.242451,5.801158,7.086842,7.417418,-9.781438,-6.073150,8.436371,0.361951],[-6.251848,2.775571,5.422406,9.120576,9.204116,-6.320257,-1.676374,1.713603,-1.081159,6.351987],[-2.868895,-4.952859,3.044797,-7.186580,9.920216,-6.024685,4.197986,-4.305095,6.891931,8.053821]],[[-5.108907,-8.510429,9.063319,-6.650250,1.265975,0.374053,-3.374987,-9.817621,7.168294,-5.751581],[-5.133885,-2.036092,-6.942393,-2.587038,-7.983669,-1.818353,-8.571749,3.678613,-1.344001,1.859425],[9.722289,9.900815,-4.387299,-4.797877,5.998108,3.034046,0.021138,0.973653,-0.277386,-0.042737],[0.228254,1.954368,1.635949,5.952213,-3.134194,5.168303,8.078444,-0.670429,-9.335520,3.252883],[9.354510,5.589044,-0.376973,9.371299,4.562818,-9.131579,-3.300708,-3.567874,-1.421583,-0.212602],[-0.968022,5.190054,-1.472840,9.906793,-6.802037,-7.199343,7.528510,-5.638466,-6.442344,-6.836547]],[[1.733770,-9.441125,-3.254446,-0.348382,-7.524063,-7.277773,-6.007623,3.667171,1.885318,-9.995698],[0.617205,4.131126,-9.005223,9.074256,1.096387,-0.807328,-7.079302,1.265170,0.188472,1.500738],[-9.439351,-0.976973,3.530335,0.503992,2.206072,-4.856805,2.866639,5.597750,-5.457850,-6.496002],[6.228914,-0.932998,-9.293005,-6.035806,5.960595,9.130130,0.680194,2.769147,2.860697,4.911475],[-4.081125,-2.961771,-1.190464,8.047587,-4.883856,-2.141244,6.856740,1.196083,-8.885444,0.069464],[5.484555,0.100385,2.203945,-7.425880,-5.183916,3.539226,1.266137,-5.497777,2.150873,-3.471546]]], dtype = "float64")#candidate|268|(3, 6, 10)|const|float64
uop_269 = relay.asin(const_268.astype('float64')) # shape=(3, 6, 10)
bop_271 = relay.equal(uop_269.astype('bool'), relay.reshape(const_268.astype('bool'), relay.shape_of(uop_269))) # shape=(3, 6, 10)
bop_274 = relay.multiply(uop_269.astype('int64'), relay.reshape(const_268.astype('int64'), relay.shape_of(uop_269))) # shape=(3, 6, 10)
bop_277 = relay.left_shift(const_268.astype('uint32'), relay.reshape(uop_269.astype('uint32'), relay.shape_of(const_268))) # shape=(3, 6, 10)
bop_280 = relay.power(bop_274.astype('float32'), relay.reshape(bop_271.astype('float32'), relay.shape_of(bop_274))) # shape=(3, 6, 10)
uop_283 = relay.acosh(bop_271.astype('float64')) # shape=(3, 6, 10)
uop_285 = relay.asin(uop_283.astype('float64')) # shape=(3, 6, 10)
uop_287 = relay.atan(uop_285.astype('float64')) # shape=(3, 6, 10)
uop_289 = relay.cosh(uop_287.astype('float32')) # shape=(3, 6, 10)
uop_291 = relay.erf(uop_287.astype('float64')) # shape=(3, 6, 10)
bop_293 = relay.not_equal(uop_291.astype('bool'), relay.reshape(uop_287.astype('bool'), relay.shape_of(uop_291))) # shape=(3, 6, 10)
output = relay.Tuple([bop_277,bop_280,uop_289,bop_293,])
output2 = relay.Tuple([bop_277,bop_280,uop_289,bop_293,])
func_296 = relay.Function([], output)
mod['func_296'] = func_296
mod = relay.transform.InferType()(mod)
mutated_mod['func_296'] = func_296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_296_call = mutated_mod.get_global_var('func_296')
call_297 = func_296_call()
output = call_297
func_298 = relay.Function([], output)
mutated_mod['func_298'] = func_298
mutated_mod = relay.transform.InferType()(mutated_mod)
var_299 = relay.var("var_299", dtype = "uint32", shape = (13,))#candidate|299|(13,)|var|uint32
var_300 = relay.var("var_300", dtype = "uint32", shape = (13,))#candidate|300|(13,)|var|uint32
bop_301 = relay.logical_xor(var_299.astype('uint32'), relay.reshape(var_300.astype('uint32'), relay.shape_of(var_299))) # shape=(13,)
output = relay.Tuple([bop_301,])
output2 = relay.Tuple([bop_301,])
func_304 = relay.Function([var_299,var_300,], output)
mod['func_304'] = func_304
mod = relay.transform.InferType()(mod)
var_305 = relay.var("var_305", dtype = "uint32", shape = (13,))#candidate|305|(13,)|var|uint32
var_306 = relay.var("var_306", dtype = "uint32", shape = (13,))#candidate|306|(13,)|var|uint32
output = func_304(var_305,var_306,)
func_307 = relay.Function([var_305,var_306,], output)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
const_309 = relay.const([6.185566,3.319277], dtype = "float64")#candidate|309|(2,)|const|float64
var_310 = relay.var("var_310", dtype = "float64", shape = (2,))#candidate|310|(2,)|var|float64
bop_311 = relay.maximum(const_309.astype('float64'), relay.reshape(var_310.astype('float64'), relay.shape_of(const_309))) # shape=(2,)
bop_314 = relay.mod(var_310.astype('float64'), relay.reshape(bop_311.astype('float64'), relay.shape_of(var_310))) # shape=(2,)
uop_317 = relay.tan(bop_311.astype('float32')) # shape=(2,)
uop_319 = relay.acosh(uop_317.astype('float32')) # shape=(2,)
bop_321 = relay.logical_or(bop_311.astype('bool'), relay.reshape(uop_317.astype('bool'), relay.shape_of(bop_311))) # shape=(2,)
var_324 = relay.var("var_324", dtype = "float32", shape = (2,))#candidate|324|(2,)|var|float32
bop_325 = relay.floor_mod(uop_319.astype('float64'), relay.reshape(var_324.astype('float64'), relay.shape_of(uop_319))) # shape=(2,)
uop_328 = relay.log(uop_317.astype('float32')) # shape=(2,)
bop_330 = relay.power(uop_328.astype('float64'), relay.reshape(uop_319.astype('float64'), relay.shape_of(uop_328))) # shape=(2,)
bop_333 = relay.logical_or(uop_319.astype('bool'), relay.reshape(const_309.astype('bool'), relay.shape_of(uop_319))) # shape=(2,)
uop_336 = relay.atan(uop_319.astype('float32')) # shape=(2,)
bop_338 = relay.bitwise_and(bop_333.astype('int8'), relay.reshape(bop_330.astype('int8'), relay.shape_of(bop_333))) # shape=(2,)
bop_341 = relay.less_equal(uop_336.astype('bool'), relay.reshape(uop_317.astype('bool'), relay.shape_of(uop_336))) # shape=(2,)
uop_344 = relay.acosh(bop_341.astype('float64')) # shape=(2,)
func_97_call = mod.get_global_var('func_97')
func_103_call = mutated_mod.get_global_var('func_103')
const_347 = relay.const([[-7.336373,5.173033,0.533972,-2.637090,-0.681557,1.125711,-0.102798,-8.797396,-5.098302,-5.464080,-9.398861,5.627996,-3.839156,-7.965243,-1.584449,8.771642,-4.793015,9.431627,5.554098,-8.714574,0.588940],[7.707866,8.044131,-3.012826,-8.199172,-6.523720,-8.714470,2.215667,-0.995301,7.846752,-5.795974,9.987957,6.400526,-1.838112,-0.264516,-7.829549,4.321107,3.757732,-9.629163,-7.956232,5.441203,1.573347],[-7.063434,-2.950397,-0.962733,-8.867561,-1.084450,-9.462722,-5.472168,8.799101,9.262348,-3.700436,0.428034,-2.888706,9.731919,8.296204,1.895608,1.976259,8.957118,8.133410,5.103828,9.407275,7.900995],[-4.735144,-8.951347,2.683945,4.858300,-0.665027,9.078045,-9.233991,5.970793,9.696558,3.084296,9.453639,2.894491,-5.043529,-8.226487,-1.825307,9.500729,3.184533,-4.023554,-2.009799,-9.858076,7.084100],[9.089998,-0.351504,3.056719,9.715802,-6.069154,8.106245,1.598382,1.321671,4.445484,-5.212319,-4.527250,2.119689,-8.837729,-7.982934,-6.380646,-7.238762,-9.139362,7.033720,2.462158,-8.148465,0.576619],[7.722597,4.206280,-0.483345,-7.022465,-1.016136,-2.659526,-8.937272,5.341277,0.304956,-2.964731,1.430882,-7.267354,-6.684072,0.891571,-0.118731,-0.548051,-8.296488,-4.266486,6.720460,2.113393,5.354771],[5.193250,-1.546108,-1.776486,-7.262550,3.516613,1.706573,-9.302869,5.587202,-0.669857,-2.419689,4.504582,5.853936,8.734163,0.754029,-3.303336,-6.870303,-9.658976,-0.439631,-3.254768,4.825527,-8.316864],[-9.018695,-0.722605,-1.850410,7.656089,3.906931,9.884511,-2.441042,9.594476,3.206521,-2.561480,4.474411,-5.980163,6.080873,4.167534,0.797812,-9.541733,-6.337588,3.792338,4.694483,-1.925447,-5.014621],[7.235415,-6.833353,-7.266666,-0.926283,-7.042082,5.082430,3.108551,9.279371,4.505956,-5.663847,-7.507749,-2.697694,-0.755455,-8.292345,-5.581108,-7.440302,1.000912,2.544282,2.192283,-9.614565,7.623693],[-1.894711,5.688994,8.256261,-0.351872,-1.670973,4.726305,6.341837,-0.585774,-8.203874,-6.873624,5.713591,4.624346,6.126674,-2.991486,-3.521057,8.144578,9.701587,2.385937,7.467847,-6.664474,-1.936316],[-7.146971,3.270917,-1.313599,8.167523,6.091175,-3.854115,6.332980,8.451101,-7.889010,-3.984760,-0.708135,-1.498854,-3.531943,-5.576883,4.703434,-3.343059,-8.820207,-5.135229,6.668028,2.524680,-7.844353]], dtype = "float64")#candidate|347|(11, 21)|const|float64
const_348 = relay.const([1,4,9,-9,-2,-6,1,-8,2,3,8,7,7,-3,2,7,-1,1,9,-10,-2,3,-6,4,2,-1,7,2,8,3,9,-7,-1,10,-10,-8,-9,-10,3,-2,-3,-7,9,-4,-7,10,7,6,-4,7,-9,8,7,10,2,-6,4,-7,5,1,8,-7,7,-4,-4,-6], dtype = "uint16")#candidate|348|(66,)|const|uint16
const_349 = relay.const([[8.636474,-2.437911,3.850579,8.445528,4.086060,0.282044,1.843540,0.109756,-0.182515,1.958313,1.859807,-0.609819,5.646278,7.691740,-1.029297,0.431498,8.514862,-2.076286,8.933413,-7.918881,-6.450164,7.773391,-7.150336,5.626084,-3.018441,1.178180,6.379432,8.649288,-4.440599,-6.512426,-7.099830,-9.293298,3.091761,-8.865280,0.956243,-9.866854,-5.925855,2.684013,-8.753784,-2.382869,2.557564,-2.510345,3.184703,0.279041,3.621565,-5.090944,9.283561,1.859628,-6.255715,5.094019,-3.426007,7.324650,-4.994521,3.339989,-8.725351,4.013346],[-3.700790,-3.223847,-4.385636,9.490400,1.506071,9.838701,-3.798922,5.249015,8.579841,-7.934677,-6.508510,-5.796324,-5.700152,4.296137,8.770368,-5.187384,1.887756,2.496054,-8.252343,6.912956,3.961345,-5.028922,7.572292,-1.389945,8.111688,-7.086079,-9.696643,-6.849035,8.546000,8.474400,-7.150420,-6.933357,-7.616578,2.258648,-3.072696,-4.810429,-6.302811,5.926362,7.945972,-6.614221,9.744453,-5.139659,4.629531,-4.450387,8.856897,-3.693340,-7.443724,8.617933,-4.752346,0.476242,8.572424,-7.263045,1.252651,6.962312,7.994226,7.916533],[-7.564951,2.217484,-0.650669,-4.614640,1.312859,0.959077,5.160161,8.129010,-8.260275,-7.281735,-0.424351,0.115147,7.553744,-6.697208,-8.190620,1.597638,-5.623759,-6.851307,-0.544699,-4.731381,6.325295,9.098525,-3.462303,2.621063,-6.840873,-1.239394,-5.564916,-2.756607,-0.190162,2.833622,-1.313105,3.421103,6.104930,7.692081,7.420951,0.468385,8.276512,6.430872,2.419772,-5.642958,2.722222,9.155532,-0.310605,2.797125,-6.812011,0.367458,8.948531,9.846055,1.293198,-2.270513,-0.361311,6.532351,1.368413,2.197765,4.727444,-0.517002]], dtype = "float64")#candidate|349|(3, 56)|const|float64
call_346 = relay.TupleGetItem(func_97_call(relay.reshape(const_347.astype('float64'), [11, 3, 7]), relay.reshape(const_347.astype('float64'), [11, 3, 7]), relay.reshape(const_348.astype('uint16'), [66,]), relay.reshape(const_349.astype('float64'), [168,]), relay.reshape(const_347.astype('float64'), [11, 3, 7]), ), 5)
call_350 = relay.TupleGetItem(func_103_call(relay.reshape(const_347.astype('float64'), [11, 3, 7]), relay.reshape(const_347.astype('float64'), [11, 3, 7]), relay.reshape(const_348.astype('uint16'), [66,]), relay.reshape(const_349.astype('float64'), [168,]), relay.reshape(const_347.astype('float64'), [11, 3, 7]), ), 5)
bop_351 = relay.bitwise_or(uop_344.astype('int8'), relay.reshape(const_309.astype('int8'), relay.shape_of(uop_344))) # shape=(2,)
uop_354 = relay.sinh(bop_351.astype('float32')) # shape=(2,)
uop_356 = relay.log10(uop_354.astype('float32')) # shape=(2,)
var_358 = relay.var("var_358", dtype = "float32", shape = (2,))#candidate|358|(2,)|var|float32
bop_359 = relay.multiply(uop_356.astype('int8'), relay.reshape(var_358.astype('int8'), relay.shape_of(uop_356))) # shape=(2,)
uop_362 = relay.asinh(uop_354.astype('float32')) # shape=(2,)
output = relay.Tuple([bop_314,bop_321,bop_325,bop_338,call_346,const_347,const_348,const_349,bop_359,uop_362,])
output2 = relay.Tuple([bop_314,bop_321,bop_325,bop_338,call_350,const_347,const_348,const_349,bop_359,uop_362,])
func_364 = relay.Function([var_310,var_324,var_358,], output)
mod['func_364'] = func_364
mod = relay.transform.InferType()(mod)
mutated_mod['func_364'] = func_364
mutated_mod = relay.transform.InferType()(mutated_mod)
func_364_call = mutated_mod.get_global_var('func_364')
var_366 = relay.var("var_366", dtype = "float64", shape = (2,))#candidate|366|(2,)|var|float64
var_367 = relay.var("var_367", dtype = "float32", shape = (2,))#candidate|367|(2,)|var|float32
var_368 = relay.var("var_368", dtype = "float32", shape = (2,))#candidate|368|(2,)|var|float32
call_365 = func_364_call(var_366,var_367,var_368,)
output = call_365
func_369 = relay.Function([var_366,var_367,var_368,], output)
mutated_mod['func_369'] = func_369
mutated_mod = relay.transform.InferType()(mutated_mod)
const_371 = relay.const([[[-1,-1,-3,5,-5,-4,-9,-3,7,-1,10],[6,-9,8,-1,9,-3,6,3,-5,6,-3],[6,-3,1,5,-8,-5,-5,3,5,9,-4],[5,-6,4,-10,8,-4,-10,-7,-8,-9,3],[7,9,8,9,-2,-7,-5,-2,-1,-2,3],[8,10,-2,1,2,-1,-10,-10,1,3,2],[-1,4,5,5,-1,-6,2,-9,-5,-1,-1],[-5,9,-5,-4,-4,-9,6,-6,2,7,8]],[[7,-2,-8,1,1,-2,-10,7,-2,-10,9],[5,-1,3,-4,-7,8,-5,10,8,2,6],[-5,-7,-1,-7,4,-8,-10,3,3,7,7],[8,10,1,-5,3,9,6,8,2,9,7],[2,3,7,-7,-6,4,-2,-5,3,7,-9],[-3,10,8,-7,7,4,5,4,6,6,3],[6,-6,-7,8,-8,4,6,7,7,-3,6],[2,9,-7,9,-4,9,3,-3,-3,-4,10]],[[8,-5,1,-6,7,6,-10,-10,4,-6,-6],[-8,-10,1,-5,5,-8,8,10,6,-6,3],[7,4,9,-2,-9,-3,1,-4,-5,-2,1],[4,-8,9,3,9,-3,-1,3,7,-4,-2],[4,-5,-6,4,1,-9,8,-2,-7,-3,3],[5,7,-9,-2,-10,-8,-9,-4,-4,-1,-1],[-10,-4,-3,9,10,4,-8,10,4,8,7],[-8,10,-5,4,2,10,-3,2,8,8,1]],[[5,-5,3,4,-3,-10,-4,-4,10,6,-1],[-2,-1,-4,4,-4,-7,1,6,-10,8,2],[5,-2,-1,5,-7,4,9,8,3,4,5],[-2,1,-10,3,10,-5,5,1,7,-8,8],[8,3,-10,-3,-2,-5,-6,9,4,-9,4],[-4,-7,4,5,5,8,7,4,-2,-3,-9],[-10,10,10,3,-3,-8,2,-6,-4,10,-10],[1,-7,10,1,-10,-10,7,8,-1,-8,3]],[[-10,9,-9,-7,8,-3,-2,4,4,6,-4],[1,2,-5,10,-2,-7,4,2,5,9,4],[2,-7,-1,10,6,7,3,10,-10,-4,5],[-2,-9,-8,6,-4,-9,-7,-5,-6,-8,1],[-7,-9,-5,-3,-2,9,2,2,7,-10,-8],[-9,-4,4,-9,5,5,-4,-8,-1,2,2],[7,-5,1,-3,10,1,-8,-8,-1,-5,-9],[-7,8,7,-9,-5,4,-3,3,5,-9,-9]],[[-5,-3,10,-3,1,-5,-9,8,-1,6,-4],[10,6,-3,4,-1,-9,-5,6,-7,9,5],[-4,8,7,1,-5,-9,8,8,-5,3,5],[2,-8,-6,3,-7,-6,2,-10,-5,4,6],[7,6,-2,4,8,9,-7,5,8,-8,-8],[6,-3,-3,-6,-1,-2,2,9,-1,6,-5],[5,-4,3,-7,-2,8,-5,-2,-1,-1,3],[7,3,-9,8,-3,-1,5,-9,-6,5,-6]],[[-7,1,-5,-1,8,-10,-7,-2,-10,-7,-4],[-6,5,3,6,-2,10,-10,-6,1,10,8],[10,-10,7,-3,2,-3,1,-10,-7,-1,6],[10,-4,-9,-4,-10,9,7,9,-6,-9,-9],[6,9,-2,8,4,1,3,-10,6,-3,2],[-2,8,-4,-8,-9,-2,10,3,-1,8,-2],[-3,9,-4,6,-10,7,-8,-7,3,3,-8],[-9,-2,5,4,2,2,9,-2,10,-3,10]],[[-9,10,-4,-9,-7,-1,-1,-1,-4,4,-4],[1,-10,-8,9,4,6,10,-8,-10,7,4],[-8,7,-7,9,6,5,-1,8,-2,8,8],[-8,8,1,-7,-5,9,-8,-3,-6,-7,4],[6,9,-4,-8,6,-9,1,-10,-5,5,5],[10,10,-8,9,-6,1,6,2,-8,-9,-3],[-8,-3,5,9,-1,9,-7,10,-8,4,10],[5,-6,-10,-1,-7,3,-4,-8,-2,1,2]],[[-10,-5,-9,-8,-9,-10,-7,9,-3,-8,6],[9,-4,3,-2,-3,-9,9,-5,6,-9,8],[1,5,-4,2,-5,-4,-2,4,3,-6,-6],[-2,-1,7,-7,7,2,3,7,6,8,2],[-8,-4,4,5,7,10,-6,-10,-2,2,-1],[2,10,-1,-9,-8,7,-9,-2,-10,-10,6],[7,-10,5,5,-6,-3,8,-7,-6,5,7],[-4,-6,7,-5,3,-1,1,6,-1,6,3]],[[9,-10,-2,-8,-8,-9,9,10,1,5,10],[-9,5,-1,5,4,3,-10,-10,-6,-3,1],[-1,3,6,-3,6,-3,1,10,1,1,-10],[10,9,6,-1,3,2,3,6,4,-7,2],[4,-7,8,8,-8,9,4,-3,-4,6,-4],[4,4,-3,9,-10,-7,-8,4,-4,6,-4],[-9,-7,3,1,-2,-7,-2,-9,6,-4,8],[-10,9,9,-9,8,-9,-3,10,-2,-8,1]],[[9,-3,-1,10,8,-2,-5,-4,3,2,-1],[-8,8,5,9,8,-8,-3,-7,-8,4,-3],[2,-3,3,1,-2,-7,7,8,10,3,6],[-8,-10,7,-8,-3,8,-5,1,7,3,6],[5,-5,10,6,-8,9,1,-2,-4,7,-10],[5,10,-5,-5,4,-6,7,-9,-2,-5,4],[6,-5,10,-6,-8,-4,-2,-1,1,-7,4],[-3,-6,1,9,-9,3,5,8,6,2,-2]],[[10,-3,9,-7,5,8,-8,-3,6,2,-8],[3,-8,-9,10,9,7,10,-2,-10,9,-8],[-9,-4,5,-4,-4,-6,-7,-5,10,-6,5],[-2,-5,6,10,-2,7,4,1,4,5,8],[-8,-9,-8,-5,3,2,10,1,-3,9,-9],[3,-10,-7,-8,-7,9,-7,4,-2,9,-4],[-3,9,6,-6,-10,6,6,5,8,2,-9],[-6,1,10,3,9,9,-2,3,-1,-6,2]],[[-10,-8,10,-8,9,4,2,-9,9,1,-3],[2,-10,2,-2,8,1,2,7,2,4,7],[-9,-10,-4,6,-3,-7,3,-9,-4,-9,-4],[-6,-1,-9,4,10,4,-2,3,8,-8,1],[4,8,-8,5,-6,-6,-1,3,-3,-9,-4],[-5,-8,-7,10,10,9,-4,-3,-2,1,-7],[3,6,-2,2,5,-7,2,3,-3,8,9],[8,2,-10,-7,3,-8,5,5,9,5,-7]]], dtype = "int16")#candidate|371|(13, 8, 11)|const|int16
const_372 = relay.const([[[9,3,6,-9,4,-1,-2,3,7,-8,-8],[-3,8,10,1,-7,-3,-10,-6,-9,10,7],[5,1,-10,10,-7,-4,9,8,9,-8,8],[3,-8,6,4,-7,1,-2,-6,-10,7,6],[7,-6,1,-9,4,3,-6,-8,-10,1,3],[-4,-8,-2,10,1,-3,-4,-2,3,4,-6],[7,-3,10,-10,-9,-4,9,-2,-3,6,1],[-2,2,-9,-3,9,8,7,-7,-3,-1,3]],[[-2,-9,-9,10,-7,-3,8,-5,6,1,5],[-3,4,7,2,5,5,8,-1,4,-9,-6],[8,7,3,-9,5,1,8,3,9,6,4],[-8,10,-2,8,7,-7,-1,4,1,1,-7],[1,1,-9,-2,8,-7,-1,-9,-9,4,-3],[-8,-4,-4,-2,-4,-4,1,-9,-6,4,-7],[-2,-3,-5,7,-3,-4,-6,1,-1,1,9],[9,-6,7,6,-4,-2,-1,7,4,-7,-6]],[[-7,10,-6,-5,2,5,7,-7,-7,5,-9],[6,-6,-5,-9,5,2,5,-6,-2,-2,-6],[10,6,-4,9,-9,1,-5,8,9,-9,-1],[-6,-5,-5,7,8,5,-7,4,6,10,9],[-6,-9,-2,-6,5,2,-2,6,10,-7,7],[6,7,-3,9,-2,8,-10,2,-5,-9,6],[8,3,6,-3,-3,2,-2,8,-8,-8,4],[9,5,-2,5,-8,-9,-8,-8,-8,3,2]],[[7,-9,-10,1,7,9,-8,-6,10,3,-2],[4,6,-2,2,-6,-4,3,-6,-10,-8,4],[-2,8,-2,-1,6,8,-7,-4,-4,9,-7],[-6,1,-5,6,5,-10,10,-8,8,-8,7],[-7,-4,1,-3,-8,-1,-4,7,6,8,9],[-9,10,-8,-4,-4,5,-3,5,-5,4,1],[-4,8,4,-7,-7,-7,-4,5,-1,-10,-1],[3,9,-7,5,3,-10,-3,-8,-7,-7,-1]],[[-3,-10,7,3,4,-4,-5,8,-10,-1,-3],[-7,5,7,10,6,6,10,-7,-3,-8,-4],[7,4,2,-2,-10,-5,4,-10,9,10,1],[1,2,6,1,4,1,-7,-5,-9,7,1],[-5,-6,6,-2,-5,-4,-6,-8,2,7,1],[-8,5,1,-1,-3,-7,3,-6,-10,-7,-7],[-5,-2,-6,2,-4,-4,-8,-1,1,-7,3],[-10,4,-10,-4,-6,10,8,8,3,-10,9]],[[4,-9,3,1,-6,5,-3,-5,-1,-6,10],[9,3,9,1,-1,7,-9,-8,8,-3,5],[9,-3,-2,1,4,-9,-6,-10,6,3,3],[-8,4,4,9,3,1,8,6,5,-1,-7],[-3,-3,10,4,10,4,-8,-1,-2,-4,-2],[-6,4,-6,-6,-2,-10,7,3,-3,5,-6],[8,9,4,2,-10,2,-10,8,3,-4,-9],[3,6,6,5,-4,1,-2,-1,-1,-5,-4]],[[3,-2,4,-9,8,-4,8,-6,1,-8,5],[9,6,-6,5,5,-2,6,2,-8,7,-7],[-1,10,4,4,7,7,3,4,5,-8,6],[-4,7,-3,3,1,-2,4,8,5,-3,-1],[-8,-4,6,-2,6,-3,8,-9,-5,-3,-9],[2,6,5,2,6,10,-4,4,1,4,4],[9,10,-2,-10,1,2,-1,-9,-2,-6,-6],[1,8,1,5,3,7,-9,-8,3,10,9]],[[10,-4,-2,7,3,-10,-1,3,4,-1,1],[1,-6,1,10,7,9,-4,-4,-8,2,-7],[9,-8,-8,-4,-8,8,-1,-2,-8,-3,-2],[7,10,4,5,5,-3,-5,-2,8,7,-6],[5,-9,8,-10,-1,-8,-2,2,-6,-1,10],[10,6,1,-5,2,-4,-1,-5,3,-7,6],[5,-9,5,-2,6,6,-1,7,-6,4,-4],[-4,-7,6,10,-5,1,8,4,2,1,3]],[[-5,-7,-3,-10,-7,5,-1,-8,-4,8,7],[-3,5,10,-1,9,5,-8,-9,5,-3,10],[1,7,-2,-3,10,-7,-9,-2,-2,-8,-8],[-5,-5,5,-1,3,4,1,6,3,8,-10],[9,-9,4,-9,-4,-9,5,8,-8,1,-3],[-8,-4,5,-2,-1,9,-1,-9,-5,-7,1],[-10,-1,2,-10,4,-5,8,-2,-7,1,-7],[10,5,9,4,5,3,-2,-5,9,2,-8]],[[4,-1,7,10,6,-9,7,-4,-2,-5,-4],[7,9,9,-9,-2,-10,-5,-6,-10,5,5],[9,-3,8,-5,4,4,-7,-7,-3,-1,-3],[-10,3,1,-3,-4,-8,3,-6,10,10,5],[6,-6,-2,-2,7,-6,-5,-10,5,-1,2],[9,-2,-8,-3,-2,7,-10,6,6,7,6],[8,10,-2,6,-5,-10,6,-1,-10,-9,-2],[-8,2,-4,7,-1,-7,-10,-2,-3,-1,-7]],[[-10,5,-5,1,-3,8,4,-4,-5,9,6],[1,6,-8,-8,6,-5,-1,5,-8,10,6],[1,8,7,-7,7,-2,3,-9,-6,10,8],[-4,1,3,-1,9,1,5,5,10,10,-2],[-5,-6,8,4,5,-8,3,2,-2,-5,8],[-10,2,2,3,8,9,-9,-10,-4,5,3],[-5,2,-6,10,-7,-5,-2,4,5,3,6],[10,9,10,5,-1,-8,8,10,-8,-8,-5]],[[-1,6,-10,9,-5,9,4,7,3,-10,1],[-5,-5,5,5,4,10,4,-10,-4,-4,8],[-4,-7,-3,8,-6,2,-5,7,-8,5,-2],[7,-2,7,-6,3,-10,-7,-1,6,7,1],[4,9,10,1,5,-3,9,-4,-7,-6,-9],[-1,-9,10,-4,7,10,1,2,-1,7,5],[-6,-4,-5,-1,5,-9,-6,10,1,-9,3],[-8,-9,3,2,6,6,2,-10,10,-4,10]],[[7,1,5,-6,9,5,-4,6,6,-6,9],[6,3,-5,-2,-7,2,6,8,-8,-9,-5],[-3,10,2,-2,8,-2,-1,-5,9,3,-2],[1,-4,-6,-3,-7,-3,-6,5,-10,5,3],[9,10,-2,1,3,-3,-2,1,4,-2,4],[-4,7,3,5,7,-4,2,-1,9,5,-2],[-2,2,10,3,-3,3,10,-1,2,7,-4],[-1,1,2,1,-1,-8,7,9,2,-8,2]]], dtype = "int16")#candidate|372|(13, 8, 11)|const|int16
bop_373 = relay.greater_equal(const_371.astype('bool'), relay.reshape(const_372.astype('bool'), relay.shape_of(const_371))) # shape=(13, 8, 11)
output = relay.Tuple([bop_373,])
output2 = relay.Tuple([bop_373,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''