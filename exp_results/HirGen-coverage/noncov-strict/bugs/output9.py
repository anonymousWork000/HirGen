import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (6,))#candidate|0|(6,)|var|float64
uop_1 = relay.sqrt(var_0.astype('float64')) # shape=(6,)
bop_3 = relay.maximum(uop_1.astype('float64'), relay.reshape(var_0.astype('float64'), relay.shape_of(uop_1))) # shape=(6,)
uop_6 = relay.acosh(uop_1.astype('float32')) # shape=(6,)
var_8 = relay.var("var_8", dtype = "float64", shape = (6,))#candidate|8|(6,)|var|float64
bop_9 = relay.mod(bop_3.astype('float64'), relay.reshape(var_8.astype('float64'), relay.shape_of(bop_3))) # shape=(6,)
bop_12 = relay.greater(var_8.astype('bool'), relay.reshape(bop_3.astype('bool'), relay.shape_of(var_8))) # shape=(6,)
const_15 = relay.const([-4.320335,-8.203345,8.583212,9.780558,-8.130262,-8.255507], dtype = "float32")#candidate|15|(6,)|const|float32
bop_16 = relay.bitwise_or(uop_6.astype('uint16'), relay.reshape(const_15.astype('uint16'), relay.shape_of(uop_6))) # shape=(6,)
uop_19 = relay.sqrt(uop_6.astype('float64')) # shape=(6,)
bop_21 = relay.right_shift(uop_6.astype('int64'), relay.reshape(var_8.astype('int64'), relay.shape_of(uop_6))) # shape=(6,)
bop_24 = relay.greater_equal(uop_19.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_19))) # shape=(6,)
uop_27 = relay.acos(bop_24.astype('float32')) # shape=(6,)
uop_29 = relay.erf(uop_27.astype('float64')) # shape=(6,)
bop_31 = relay.divide(uop_29.astype('float32'), relay.reshape(bop_9.astype('float32'), relay.shape_of(uop_29))) # shape=(6,)
bop_34 = relay.logical_or(uop_29.astype('bool'), relay.reshape(uop_1.astype('bool'), relay.shape_of(uop_29))) # shape=(6,)
uop_37 = relay.sinh(uop_27.astype('float32')) # shape=(6,)
bop_39 = relay.divide(uop_37.astype('float32'), relay.reshape(const_15.astype('float32'), relay.shape_of(uop_37))) # shape=(6,)
uop_42 = relay.erf(bop_24.astype('float64')) # shape=(6,)
output = relay.Tuple([bop_12,bop_16,bop_21,bop_31,bop_34,bop_39,uop_42,])
output2 = relay.Tuple([bop_12,bop_16,bop_21,bop_31,bop_34,bop_39,uop_42,])
func_44 = relay.Function([var_0,var_8,], output)
mod['func_44'] = func_44
mod = relay.transform.InferType()(mod)
mutated_mod['func_44'] = func_44
mutated_mod = relay.transform.InferType()(mutated_mod)
func_44_call = mutated_mod.get_global_var('func_44')
var_46 = relay.var("var_46", dtype = "float64", shape = (6,))#candidate|46|(6,)|var|float64
var_47 = relay.var("var_47", dtype = "float64", shape = (6,))#candidate|47|(6,)|var|float64
call_45 = func_44_call(var_46,var_47,)
output = call_45
func_48 = relay.Function([var_46,var_47,], output)
mutated_mod['func_48'] = func_48
mutated_mod = relay.transform.InferType()(mutated_mod)
var_50 = relay.var("var_50", dtype = "uint64", shape = (2, 13, 15))#candidate|50|(2, 13, 15)|var|uint64
var_51 = relay.var("var_51", dtype = "uint64", shape = (2, 13, 15))#candidate|51|(2, 13, 15)|var|uint64
bop_52 = relay.multiply(var_50.astype('uint64'), relay.reshape(var_51.astype('uint64'), relay.shape_of(var_50))) # shape=(2, 13, 15)
uop_55 = relay.sin(var_50.astype('float64')) # shape=(2, 13, 15)
bop_57 = relay.maximum(uop_55.astype('int16'), relay.reshape(var_51.astype('int16'), relay.shape_of(uop_55))) # shape=(2, 13, 15)
bop_60 = relay.divide(bop_57.astype('float64'), relay.reshape(bop_52.astype('float64'), relay.shape_of(bop_57))) # shape=(2, 13, 15)
bop_63 = relay.logical_and(uop_55.astype('bool'), relay.reshape(bop_60.astype('bool'), relay.shape_of(uop_55))) # shape=(2, 13, 15)
uop_66 = relay.rsqrt(uop_55.astype('float64')) # shape=(2, 13, 15)
uop_68 = relay.rsqrt(uop_66.astype('float64')) # shape=(2, 13, 15)
uop_70 = relay.sqrt(uop_66.astype('float32')) # shape=(2, 13, 15)
const_72 = relay.const([[[1.432600,4.637761,3.381014,5.135367,5.609947,-9.652980,-7.938824,3.783736,1.412290,-4.914665,1.499282,-6.723208,-5.489855,3.876415,-6.171264],[-0.183197,6.249531,-3.880245,-1.651911,-3.218637,8.029444,-3.206711,6.715502,4.589273,5.425576,-6.508763,8.319118,1.828534,-4.110680,-6.903014],[6.388202,-6.434387,1.666472,3.814982,-6.746569,3.756908,-2.476455,-7.496000,-6.986416,4.105398,8.658884,-4.030981,-1.652606,9.503550,-2.340862],[6.466517,-4.479636,-2.264528,-2.358831,3.300878,7.594343,-8.886749,-1.492296,-9.889732,3.448024,-0.546272,0.898717,7.036091,-1.245376,-6.351351],[-8.225854,-8.622441,2.257418,-3.643362,-3.911586,1.265479,2.084342,-3.094827,-9.716739,-4.678070,-2.700720,-2.714012,7.295173,9.736626,-8.380580],[-3.554899,3.929371,2.725148,4.093586,-1.583136,7.843022,-8.787845,1.081026,-3.544991,4.741501,2.841129,7.745054,6.980748,5.488282,-3.965327],[0.070755,4.969026,0.717660,1.717174,-4.563022,2.888073,8.701413,-7.520327,-2.079022,-0.589524,7.067983,2.332982,-9.110802,2.908121,0.459798],[6.838469,-7.904784,3.154250,-8.868195,4.705867,-7.317314,-4.603014,-3.373531,-6.345127,-3.592630,-0.791130,3.052306,-6.791938,-1.119296,9.141018],[-1.356871,-5.482448,6.884178,-4.443002,7.837683,4.131206,-2.139058,8.734040,-8.676208,5.819795,1.326564,9.354168,5.104254,-2.256683,8.959368],[0.871461,-0.314321,0.529101,9.239758,5.055536,6.477559,-7.798708,5.877685,-4.159621,-4.964272,-1.493774,6.997291,-1.161239,3.408836,-1.404106],[-3.289147,-9.011903,-2.299146,3.656093,-7.199625,-9.024227,6.710911,2.140974,-8.721061,-1.457947,-1.049106,-6.557885,-1.034697,-3.615961,9.677848],[3.430458,4.981718,6.384584,1.549111,0.057340,1.262318,4.870197,7.697858,8.410322,-6.947489,-4.235071,-6.289726,-1.478496,3.427109,0.815818],[9.626382,-5.742326,-6.400853,-3.454540,-5.209076,4.113037,1.819597,-1.441575,-6.085398,6.570170,-4.008185,9.849983,-3.480113,9.993397,-4.627582]],[[9.180134,1.464328,-7.065245,7.271156,5.536519,8.190261,2.409734,0.231741,5.128342,-0.793781,-7.545675,-3.244601,3.689220,6.810822,-4.861509],[6.743960,-2.687228,7.566638,4.809324,4.856323,9.068741,0.323823,-6.245737,-1.150252,-5.897156,-9.655009,1.521231,-2.799080,2.749216,-9.189866],[-4.247332,0.006362,-9.895558,5.598548,4.408036,8.063068,9.130393,-2.614511,7.264558,3.329239,3.019917,7.001260,-2.964104,1.226393,5.264051],[0.370370,-1.380808,-9.746763,-9.594065,-6.551828,7.074111,-7.287322,-7.464407,-2.074512,9.792332,-1.577562,6.616876,-2.632632,2.771685,7.660329],[8.597581,-0.697908,-8.855287,-4.150241,7.237320,-1.313128,-2.032597,1.610576,1.086615,0.042477,-0.983150,9.047693,0.914495,5.795077,-3.061692],[6.695002,-2.961849,2.604410,5.404669,2.462528,-4.372863,0.094385,-4.923301,9.368447,-3.276128,-7.435115,-0.628438,-6.310721,9.327649,5.762548],[-7.145982,7.940872,-9.653048,6.319505,2.451954,-2.348259,7.101487,-0.666370,8.789451,4.696038,-1.682370,-8.133151,-8.933946,-4.146604,-0.027041],[9.236126,4.580263,1.776970,2.474325,4.375803,1.917227,-0.664540,0.098033,-2.636516,-9.747114,-1.002443,-4.786613,-1.814017,3.350192,-9.820843],[-6.240216,-0.285169,5.977221,0.579224,5.421867,8.612938,8.123466,1.809066,-9.499029,4.348791,5.915525,-6.334932,-4.019897,-9.534400,5.176601],[5.039621,-7.783633,3.769887,-3.350101,-7.186782,5.085023,-9.216195,8.448505,6.973850,-6.079488,3.156882,-8.217333,4.702336,-3.693225,-9.046202],[-2.245738,3.568073,-9.359343,-5.360961,8.180794,-9.758889,-4.596696,7.694104,-8.473262,-4.280459,8.180679,-1.535127,5.391845,-1.098595,-9.127052],[6.848637,7.995994,6.115355,-2.096589,-3.448996,1.284758,-5.507937,6.214560,5.134887,8.097886,-2.113321,8.277453,-9.977440,-4.629053,-0.683156],[-8.801369,-2.425943,-4.332871,8.769369,5.590275,5.227897,-5.607814,1.476084,7.439416,8.831608,-7.521573,-5.041965,-3.525335,-1.497109,2.562384]]], dtype = "float32")#candidate|72|(2, 13, 15)|const|float32
bop_73 = relay.logical_and(uop_70.astype('bool'), relay.reshape(const_72.astype('bool'), relay.shape_of(uop_70))) # shape=(2, 13, 15)
uop_76 = relay.sqrt(uop_70.astype('float64')) # shape=(2, 13, 15)
bop_78 = relay.subtract(uop_76.astype('float64'), relay.reshape(bop_73.astype('float64'), relay.shape_of(uop_76))) # shape=(2, 13, 15)
bop_81 = relay.logical_xor(uop_76.astype('uint8'), relay.reshape(uop_70.astype('uint8'), relay.shape_of(uop_76))) # shape=(2, 13, 15)
uop_84 = relay.acos(uop_70.astype('float32')) # shape=(2, 13, 15)
uop_86 = relay.sigmoid(uop_66.astype('float64')) # shape=(2, 13, 15)
func_44_call = mod.get_global_var('func_44')
func_48_call = mutated_mod.get_global_var('func_48')
const_89 = relay.const([-5.633406,-4.367739,1.126656,-4.960077,-3.507678,4.993482], dtype = "float64")#candidate|89|(6,)|const|float64
call_88 = relay.TupleGetItem(func_44_call(relay.reshape(const_89.astype('float64'), [6,]), relay.reshape(const_89.astype('float64'), [6,]), ), 6)
call_90 = relay.TupleGetItem(func_48_call(relay.reshape(const_89.astype('float64'), [6,]), relay.reshape(const_89.astype('float64'), [6,]), ), 6)
uop_91 = relay.erf(bop_73.astype('float64')) # shape=(2, 13, 15)
uop_93 = relay.log10(uop_76.astype('float32')) # shape=(2, 13, 15)
bop_95 = relay.floor_mod(uop_93.astype('float64'), relay.reshape(bop_57.astype('float64'), relay.shape_of(uop_93))) # shape=(2, 13, 15)
uop_98 = relay.sigmoid(uop_76.astype('float64')) # shape=(2, 13, 15)
uop_100 = relay.acos(uop_66.astype('float64')) # shape=(2, 13, 15)
uop_102 = relay.sqrt(uop_93.astype('float64')) # shape=(2, 13, 15)
uop_104 = relay.atanh(bop_95.astype('float32')) # shape=(2, 13, 15)
func_44_call = mod.get_global_var('func_44')
func_48_call = mutated_mod.get_global_var('func_48')
call_106 = relay.TupleGetItem(func_44_call(relay.reshape(const_89.astype('float64'), [6,]), relay.reshape(call_88.astype('float64'), [6,]), ), 5)
call_107 = relay.TupleGetItem(func_48_call(relay.reshape(const_89.astype('float64'), [6,]), relay.reshape(call_88.astype('float64'), [6,]), ), 5)
var_108 = relay.var("var_108", dtype = "float64", shape = (2, 13, 15))#candidate|108|(2, 13, 15)|var|float64
bop_109 = relay.maximum(uop_76.astype('int16'), relay.reshape(var_108.astype('int16'), relay.shape_of(uop_76))) # shape=(2, 13, 15)
bop_112 = relay.left_shift(uop_102.astype('int16'), relay.reshape(uop_66.astype('int16'), relay.shape_of(uop_102))) # shape=(2, 13, 15)
uop_115 = relay.cos(bop_112.astype('float32')) # shape=(2, 13, 15)
bop_117 = relay.greater_equal(uop_102.astype('bool'), relay.reshape(uop_98.astype('bool'), relay.shape_of(uop_102))) # shape=(2, 13, 15)
bop_120 = relay.divide(uop_115.astype('float32'), relay.reshape(uop_102.astype('float32'), relay.shape_of(uop_115))) # shape=(2, 13, 15)
bop_123 = relay.greater_equal(bop_120.astype('bool'), relay.reshape(uop_93.astype('bool'), relay.shape_of(bop_120))) # shape=(2, 13, 15)
bop_126 = relay.add(bop_123.astype('uint16'), relay.reshape(uop_76.astype('uint16'), relay.shape_of(bop_123))) # shape=(2, 13, 15)
bop_129 = relay.bitwise_and(bop_123.astype('int32'), relay.reshape(bop_57.astype('int32'), relay.shape_of(bop_123))) # shape=(2, 13, 15)
bop_132 = relay.floor_divide(uop_115.astype('float64'), relay.reshape(uop_68.astype('float64'), relay.shape_of(uop_115))) # shape=(2, 13, 15)
var_135 = relay.var("var_135", dtype = "int16", shape = (2, 13, 15))#candidate|135|(2, 13, 15)|var|int16
bop_136 = relay.logical_and(bop_112.astype('bool'), relay.reshape(var_135.astype('bool'), relay.shape_of(bop_112))) # shape=(2, 13, 15)
uop_139 = relay.tan(bop_120.astype('float64')) # shape=(2, 13, 15)
bop_141 = relay.less(uop_139.astype('bool'), relay.reshape(var_108.astype('bool'), relay.shape_of(uop_139))) # shape=(2, 13, 15)
bop_144 = relay.logical_xor(bop_132.astype('int8'), relay.reshape(bop_63.astype('int8'), relay.shape_of(bop_132))) # shape=(2, 13, 15)
uop_147 = relay.atan(bop_141.astype('float32')) # shape=(2, 13, 15)
uop_149 = relay.rsqrt(bop_126.astype('float64')) # shape=(2, 13, 15)
bop_151 = relay.equal(uop_147.astype('bool'), relay.reshape(bop_109.astype('bool'), relay.shape_of(uop_147))) # shape=(2, 13, 15)
uop_154 = relay.sigmoid(bop_151.astype('float32')) # shape=(2, 13, 15)
var_156 = relay.var("var_156", dtype = "float32", shape = (2, 13, 15))#candidate|156|(2, 13, 15)|var|float32
bop_157 = relay.equal(uop_154.astype('bool'), relay.reshape(var_156.astype('bool'), relay.shape_of(uop_154))) # shape=(2, 13, 15)
const_160 = relay.const([[[-4.185445,-2.059916,9.438412,6.749007,0.210456,-1.057265,5.756451,1.271251,-7.563100,8.309664,7.824562,-0.081114,-2.352205,4.085831,8.237740],[1.875339,9.108466,-6.898453,3.799551,-4.730875,9.701713,-7.028272,-6.481548,-7.555886,4.070293,6.773135,3.728239,-2.219250,9.597621,7.936379],[-3.788655,-7.371705,-5.775225,-8.900095,-6.576782,2.657276,8.546014,9.359239,0.429655,8.059665,9.591215,3.370968,-5.332711,-2.722434,-8.481571],[-8.081467,-2.463225,-5.440903,6.069643,6.632049,8.413657,2.619231,-6.430873,-2.669125,-8.050667,-2.720436,-8.231819,-0.663245,3.872077,-2.418481],[9.028578,-1.172346,-6.756543,-4.416064,0.899223,1.627410,-3.745574,-6.746133,3.270386,1.232693,-5.917198,9.799767,4.419992,5.253873,-2.592812],[-7.921344,-3.561781,-2.838275,2.218458,-1.785341,-2.126219,8.657930,-2.954785,6.471020,-0.151078,7.930205,-8.400163,7.853078,-0.888493,8.211245],[7.660909,-1.425978,-4.129296,-0.017942,-9.607580,4.624661,-4.341180,5.138425,-9.085105,4.329082,1.280656,8.719133,3.890099,-6.269790,6.037491],[9.147233,9.274329,-4.940162,-4.894561,-1.627805,3.485414,2.847000,-6.487432,-3.272527,1.562309,-4.296733,-9.668222,-6.928646,-1.029610,7.103444],[-3.738912,-3.038617,7.422625,-2.248757,8.483820,-9.186094,-5.746271,0.870634,-6.154887,0.530568,9.233807,0.184677,4.529791,1.279214,-6.358218],[9.947825,1.729659,-1.855773,-9.326200,-4.629477,7.212751,-4.392605,-0.673178,8.043550,8.883709,-0.277572,-6.825119,-9.174004,-8.595017,3.044564],[-4.259560,4.054436,4.831418,-3.327781,-1.122813,4.648940,4.613964,8.343326,9.167994,8.585085,2.466924,1.279603,1.187418,1.123353,-7.371383],[-4.591867,3.818370,-6.178250,1.105484,-9.715173,-5.305216,-7.847292,2.579076,9.759165,-4.863655,9.444426,2.064525,9.681871,-1.833399,-7.129830],[4.961778,-6.416937,-3.102616,5.349557,0.647615,-5.686201,-9.215194,-8.752677,-6.635285,-2.909690,-4.976017,4.996794,7.690549,-2.310339,1.609335]],[[-7.595069,0.364270,-7.366608,5.640776,0.417176,2.328816,-6.300716,-4.193472,-8.546328,3.727540,0.104482,-1.988816,4.995102,6.232480,-7.911672],[-1.886969,-7.732666,4.116885,0.498863,-5.552782,5.757268,-7.613025,3.066471,-2.825059,-5.324932,4.824247,9.030506,-7.831233,4.223510,-5.823190],[-6.293472,-6.052599,-2.131986,2.602650,-1.296629,5.351001,-2.748648,-3.674327,-4.022756,3.769839,-7.532922,1.518981,-4.410684,-3.897192,8.539712],[6.613688,9.043780,-1.916018,4.838137,0.442101,-1.864277,-3.698555,2.094795,-7.017357,2.151795,-9.970787,-0.864248,-5.614278,7.786334,-8.877035],[2.517337,-4.729832,5.726245,4.657856,6.344146,3.829023,6.493500,-9.630283,-5.149515,-5.480835,-3.337157,3.208547,-9.941360,0.410029,-2.027976],[7.787988,-7.314169,-3.682642,-6.375609,-4.404086,-4.184190,0.424335,5.321029,-9.317798,5.832645,-3.712711,5.382619,-9.717269,0.868734,1.023223],[-9.565921,6.113934,7.479151,-2.927270,2.998295,6.081382,-3.947770,9.167298,-4.995155,7.080523,1.581073,9.646146,2.881345,-5.520363,6.922404],[-5.300888,-9.006450,-2.897340,9.717636,-6.275874,-5.705866,6.549482,-9.780307,-1.891996,-0.280747,-0.342113,8.330950,9.504351,-0.288792,5.491702],[3.257425,1.064852,-3.490463,1.045913,-7.757717,-9.308198,7.468359,-7.249969,3.621250,-0.730209,-9.977367,9.163983,-6.006774,6.575002,-9.626501],[7.968884,-9.546173,-5.699097,-3.016816,4.094453,4.734656,1.867345,8.848159,-8.394926,7.442493,-7.932530,-0.889347,5.956343,-9.280265,0.778016],[-8.589697,5.753964,2.973025,2.429070,8.528351,-9.555923,-6.816271,-7.370375,6.464390,-7.820788,7.075324,0.065702,-2.850670,1.982676,6.555257],[-6.035556,8.383936,-7.513918,3.533782,-7.911094,-1.557121,0.417138,1.031356,-9.922677,-0.860257,4.633771,-8.657518,6.029484,0.261715,6.111971],[1.752329,-8.525220,0.092736,8.377987,-4.307659,-4.395937,0.807294,-2.169417,7.043674,8.808672,7.264641,3.774254,3.151792,0.366664,7.995475]]], dtype = "float32")#candidate|160|(2, 13, 15)|const|float32
bop_161 = relay.mod(uop_154.astype('float32'), relay.reshape(const_160.astype('float32'), relay.shape_of(uop_154))) # shape=(2, 13, 15)
bop_164 = relay.right_shift(uop_154.astype('int16'), relay.reshape(bop_132.astype('int16'), relay.shape_of(uop_154))) # shape=(2, 13, 15)
uop_167 = relay.erf(bop_161.astype('float64')) # shape=(2, 13, 15)
output = relay.Tuple([bop_78,bop_81,uop_84,uop_86,call_88,const_89,uop_91,uop_100,uop_104,call_106,bop_117,bop_129,bop_136,bop_144,uop_149,bop_157,bop_164,uop_167,])
output2 = relay.Tuple([bop_78,bop_81,uop_84,uop_86,call_90,const_89,uop_91,uop_100,uop_104,call_107,bop_117,bop_129,bop_136,bop_144,uop_149,bop_157,bop_164,uop_167,])
func_169 = relay.Function([var_50,var_51,var_108,var_135,var_156,], output)
mod['func_169'] = func_169
mod = relay.transform.InferType()(mod)
mutated_mod['func_169'] = func_169
mutated_mod = relay.transform.InferType()(mutated_mod)
func_169_call = mutated_mod.get_global_var('func_169')
var_171 = relay.var("var_171", dtype = "uint64", shape = (2, 13, 15))#candidate|171|(2, 13, 15)|var|uint64
var_172 = relay.var("var_172", dtype = "uint64", shape = (2, 13, 15))#candidate|172|(2, 13, 15)|var|uint64
var_173 = relay.var("var_173", dtype = "float64", shape = (2, 13, 15))#candidate|173|(2, 13, 15)|var|float64
var_174 = relay.var("var_174", dtype = "int16", shape = (2, 13, 15))#candidate|174|(2, 13, 15)|var|int16
var_175 = relay.var("var_175", dtype = "float32", shape = (2, 13, 15))#candidate|175|(2, 13, 15)|var|float32
call_170 = func_169_call(var_171,var_172,var_173,var_174,var_175,)
output = call_170
func_176 = relay.Function([var_171,var_172,var_173,var_174,var_175,], output)
mutated_mod['func_176'] = func_176
mutated_mod = relay.transform.InferType()(mutated_mod)
var_178 = relay.var("var_178", dtype = "bool", shape = (10, 9))#candidate|178|(10, 9)|var|bool
const_179 = relay.const([[False,False,False,False,True,False,True,True,True],[True,False,True,True,True,True,True,False,True],[False,False,True,False,True,False,False,True,False],[True,True,True,True,True,False,True,True,True],[False,False,False,True,False,False,False,True,True],[False,False,True,True,False,True,True,False,True],[True,True,False,True,False,True,False,False,False],[False,True,True,True,True,False,True,False,False],[True,True,True,False,True,False,True,False,False],[True,True,True,False,False,False,False,True,False]], dtype = "bool")#candidate|179|(10, 9)|const|bool
bop_180 = relay.logical_and(var_178.astype('bool'), relay.reshape(const_179.astype('bool'), relay.shape_of(var_178))) # shape=(10, 9)
uop_183 = relay.atan(bop_180.astype('float64')) # shape=(10, 9)
uop_185 = relay.log(uop_183.astype('float64')) # shape=(10, 9)
bop_187 = relay.logical_or(uop_185.astype('bool'), relay.reshape(bop_180.astype('bool'), relay.shape_of(uop_185))) # shape=(10, 9)
const_190 = relay.const([[False,True,False,False,True,False,False,False,True],[False,False,False,False,False,False,False,False,True],[False,False,True,True,True,True,False,True,True],[True,True,False,True,True,True,True,False,True],[True,False,True,False,False,True,False,False,False],[True,True,False,False,True,False,True,False,True],[True,False,False,False,False,True,False,True,True],[False,True,True,True,False,True,False,True,True],[True,True,True,True,False,False,True,False,True],[True,False,True,False,True,False,False,True,False]], dtype = "bool")#candidate|190|(10, 9)|const|bool
bop_191 = relay.bitwise_and(bop_180.astype('int8'), relay.reshape(const_190.astype('int8'), relay.shape_of(bop_180))) # shape=(10, 9)
bop_194 = relay.maximum(uop_185.astype('uint64'), relay.reshape(bop_191.astype('uint64'), relay.shape_of(uop_185))) # shape=(10, 9)
uop_197 = relay.exp(var_178.astype('float32')) # shape=(10, 9)
output = relay.Tuple([bop_187,bop_194,uop_197,])
output2 = relay.Tuple([bop_187,bop_194,uop_197,])
func_199 = relay.Function([var_178,], output)
mod['func_199'] = func_199
mod = relay.transform.InferType()(mod)
var_200 = relay.var("var_200", dtype = "bool", shape = (10, 9))#candidate|200|(10, 9)|var|bool
output = func_199(var_200)
func_201 = relay.Function([var_200], output)
mutated_mod['func_201'] = func_201
mutated_mod = relay.transform.InferType()(mutated_mod)
var_203 = relay.var("var_203", dtype = "float64", shape = (16, 3))#candidate|203|(16, 3)|var|float64
uop_204 = relay.asin(var_203.astype('float64')) # shape=(16, 3)
const_206 = relay.const([[-9.226253,-6.220064,2.207636],[-9.860591,7.007052,-0.929051],[-1.121056,-7.997590,-9.191040],[6.921477,5.509622,1.695835],[-4.376487,1.528937,2.046705],[-5.276245,-2.869894,-0.127095],[-2.451824,-3.306385,-1.538918],[-5.766933,5.091716,-0.132399],[5.182680,2.715860,3.524269],[-5.703666,6.082367,-9.028954],[-0.736461,-1.180724,5.139239],[-0.208231,6.521994,0.743834],[5.957946,-7.524056,-1.117740],[-7.767858,-1.519601,-2.725793],[-1.403276,9.792644,-7.527786],[-6.761093,-3.397481,-5.544170]], dtype = "float64")#candidate|206|(16, 3)|const|float64
bop_207 = relay.power(uop_204.astype('float32'), relay.reshape(const_206.astype('float32'), relay.shape_of(uop_204))) # shape=(16, 3)
bop_210 = relay.less(uop_204.astype('bool'), relay.reshape(bop_207.astype('bool'), relay.shape_of(uop_204))) # shape=(16, 3)
bop_213 = relay.multiply(bop_207.astype('uint64'), relay.reshape(uop_204.astype('uint64'), relay.shape_of(bop_207))) # shape=(16, 3)
bop_216 = relay.maximum(bop_207.astype('int64'), relay.reshape(const_206.astype('int64'), relay.shape_of(bop_207))) # shape=(16, 3)
uop_219 = relay.sin(bop_210.astype('float64')) # shape=(16, 3)
bop_221 = relay.not_equal(var_203.astype('bool'), relay.reshape(const_206.astype('bool'), relay.shape_of(var_203))) # shape=(16, 3)
output = relay.Tuple([bop_213,bop_216,uop_219,bop_221,])
output2 = relay.Tuple([bop_213,bop_216,uop_219,bop_221,])
func_224 = relay.Function([var_203,], output)
mod['func_224'] = func_224
mod = relay.transform.InferType()(mod)
var_225 = relay.var("var_225", dtype = "float64", shape = (16, 3))#candidate|225|(16, 3)|var|float64
output = func_224(var_225)
func_226 = relay.Function([var_225], output)
mutated_mod['func_226'] = func_226
mutated_mod = relay.transform.InferType()(mutated_mod)
var_228 = relay.var("var_228", dtype = "int8", shape = (1, 15))#candidate|228|(1, 15)|var|int8
var_229 = relay.var("var_229", dtype = "int8", shape = (13, 15))#candidate|229|(13, 15)|var|int8
bop_230 = relay.less(var_228.astype('bool'), var_229.astype('bool')) # shape=(13, 15)
uop_233 = relay.rsqrt(bop_230.astype('float32')) # shape=(13, 15)
uop_235 = relay.cosh(uop_233.astype('float64')) # shape=(13, 15)
uop_237 = relay.erf(uop_235.astype('float64')) # shape=(13, 15)
var_239 = relay.var("var_239", dtype = "bool", shape = (13, 15))#candidate|239|(13, 15)|var|bool
bop_240 = relay.add(bop_230.astype('float32'), relay.reshape(var_239.astype('float32'), relay.shape_of(bop_230))) # shape=(13, 15)
bop_243 = relay.less_equal(uop_237.astype('bool'), relay.reshape(bop_230.astype('bool'), relay.shape_of(uop_237))) # shape=(13, 15)
uop_246 = relay.asinh(uop_237.astype('float64')) # shape=(13, 15)
bop_248 = relay.logical_xor(uop_246.astype('int8'), relay.reshape(bop_230.astype('int8'), relay.shape_of(uop_246))) # shape=(13, 15)
uop_251 = relay.asin(bop_248.astype('float32')) # shape=(13, 15)
output = relay.Tuple([bop_240,bop_243,uop_251,])
output2 = relay.Tuple([bop_240,bop_243,uop_251,])
func_253 = relay.Function([var_228,var_229,var_239,], output)
mod['func_253'] = func_253
mod = relay.transform.InferType()(mod)
var_254 = relay.var("var_254", dtype = "int8", shape = (1, 15))#candidate|254|(1, 15)|var|int8
var_255 = relay.var("var_255", dtype = "int8", shape = (13, 15))#candidate|255|(13, 15)|var|int8
var_256 = relay.var("var_256", dtype = "bool", shape = (13, 15))#candidate|256|(13, 15)|var|bool
output = func_253(var_254,var_255,var_256,)
func_257 = relay.Function([var_254,var_255,var_256,], output)
mutated_mod['func_257'] = func_257
mutated_mod = relay.transform.InferType()(mutated_mod)
var_259 = relay.var("var_259", dtype = "float32", shape = (5, 5))#candidate|259|(5, 5)|var|float32
var_260 = relay.var("var_260", dtype = "float32", shape = (5, 5))#candidate|260|(5, 5)|var|float32
bop_261 = relay.less_equal(var_259.astype('bool'), relay.reshape(var_260.astype('bool'), relay.shape_of(var_259))) # shape=(5, 5)
uop_264 = relay.asin(bop_261.astype('float64')) # shape=(5, 5)
bop_266 = relay.logical_or(bop_261.astype('bool'), relay.reshape(var_260.astype('bool'), relay.shape_of(bop_261))) # shape=(5, 5)
bop_269 = relay.bitwise_or(uop_264.astype('int32'), relay.reshape(bop_261.astype('int32'), relay.shape_of(uop_264))) # shape=(5, 5)
uop_272 = relay.sin(bop_269.astype('float64')) # shape=(5, 5)
uop_274 = relay.sigmoid(bop_269.astype('float32')) # shape=(5, 5)
bop_276 = relay.less(var_260.astype('bool'), relay.reshape(bop_261.astype('bool'), relay.shape_of(var_260))) # shape=(5, 5)
bop_279 = relay.less(uop_274.astype('bool'), relay.reshape(var_259.astype('bool'), relay.shape_of(uop_274))) # shape=(5, 5)
uop_282 = relay.tan(bop_269.astype('float32')) # shape=(5, 5)
bop_284 = relay.multiply(bop_279.astype('int8'), relay.reshape(uop_264.astype('int8'), relay.shape_of(bop_279))) # shape=(5, 5)
bop_287 = relay.equal(uop_282.astype('bool'), relay.reshape(bop_284.astype('bool'), relay.shape_of(uop_282))) # shape=(5, 5)
func_44_call = mod.get_global_var('func_44')
func_48_call = mutated_mod.get_global_var('func_48')
const_291 = relay.const([-6.502148,-1.701576,-4.425686,-9.980582,9.610918,6.330068], dtype = "float64")#candidate|291|(6,)|const|float64
call_290 = relay.TupleGetItem(func_44_call(relay.reshape(const_291.astype('float64'), [6,]), relay.reshape(const_291.astype('float64'), [6,]), ), 1)
call_292 = relay.TupleGetItem(func_48_call(relay.reshape(const_291.astype('float64'), [6,]), relay.reshape(const_291.astype('float64'), [6,]), ), 1)
bop_293 = relay.power(bop_287.astype('float32'), relay.reshape(bop_266.astype('float32'), relay.shape_of(bop_287))) # shape=(5, 5)
output = relay.Tuple([uop_272,bop_276,call_290,const_291,bop_293,])
output2 = relay.Tuple([uop_272,bop_276,call_292,const_291,bop_293,])
func_296 = relay.Function([var_259,var_260,], output)
mod['func_296'] = func_296
mod = relay.transform.InferType()(mod)
var_297 = relay.var("var_297", dtype = "float32", shape = (5, 5))#candidate|297|(5, 5)|var|float32
var_298 = relay.var("var_298", dtype = "float32", shape = (5, 5))#candidate|298|(5, 5)|var|float32
output = func_296(var_297,var_298,)
func_299 = relay.Function([var_297,var_298,], output)
mutated_mod['func_299'] = func_299
mutated_mod = relay.transform.InferType()(mutated_mod)
var_301 = relay.var("var_301", dtype = "float64", shape = (16,))#candidate|301|(16,)|var|float64
var_302 = relay.var("var_302", dtype = "float64", shape = (16,))#candidate|302|(16,)|var|float64
bop_303 = relay.floor_divide(var_301.astype('float64'), relay.reshape(var_302.astype('float64'), relay.shape_of(var_301))) # shape=(16,)
uop_306 = relay.acosh(var_302.astype('float64')) # shape=(16,)
var_308 = relay.var("var_308", dtype = "float64", shape = (16,))#candidate|308|(16,)|var|float64
bop_309 = relay.floor_mod(var_301.astype('float32'), relay.reshape(var_308.astype('float32'), relay.shape_of(var_301))) # shape=(16,)
uop_312 = relay.atan(bop_309.astype('float32')) # shape=(16,)
func_296_call = mod.get_global_var('func_296')
func_299_call = mutated_mod.get_global_var('func_299')
const_315 = relay.const([[2.881101],[9.264421],[4.306530],[4.718223],[4.505525],[8.810473],[3.269021],[4.225982],[6.090798],[8.128137],[3.487650],[-8.568257],[4.826558],[5.596170],[8.768651],[-2.810477],[5.490172],[9.745808],[2.607307],[-7.422367],[9.241525],[-8.135553],[3.325728],[-3.473334],[-8.978591]], dtype = "float32")#candidate|315|(25, 1)|const|float32
call_314 = relay.TupleGetItem(func_296_call(relay.reshape(const_315.astype('float32'), [5, 5]), relay.reshape(const_315.astype('float32'), [5, 5]), ), 0)
call_316 = relay.TupleGetItem(func_299_call(relay.reshape(const_315.astype('float32'), [5, 5]), relay.reshape(const_315.astype('float32'), [5, 5]), ), 0)
bop_317 = relay.logical_or(var_302.astype('bool'), relay.reshape(var_308.astype('bool'), relay.shape_of(var_302))) # shape=(16,)
bop_320 = relay.less(uop_306.astype('bool'), relay.reshape(uop_312.astype('bool'), relay.shape_of(uop_306))) # shape=(16,)
var_323 = relay.var("var_323", dtype = "bool", shape = (16,))#candidate|323|(16,)|var|bool
bop_324 = relay.mod(bop_317.astype('float64'), relay.reshape(var_323.astype('float64'), relay.shape_of(bop_317))) # shape=(16,)
output = relay.Tuple([bop_303,call_314,const_315,bop_320,bop_324,])
output2 = relay.Tuple([bop_303,call_316,const_315,bop_320,bop_324,])
F = relay.Function([var_301,var_302,var_308,var_323,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_301,var_302,var_308,var_323,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_301= np.array([3.799118,-7.937698,-0.574119,-5.786153,1.912947,5.432000,6.917337,-4.719492,5.052671,-0.551450,-5.174119,6.660355,5.982534,-0.139707,-8.805281,-7.864260], dtype='float64')
module1.set_input('var_301', input_301)
input_302= np.array([-5.096135,8.628533,9.312174,-0.429511,3.172794,7.278537,0.114730,-8.737243,-6.924178,7.685482,3.515812,-8.416698,-4.116437,3.891478,0.989223,-0.307228], dtype='float64')
module1.set_input('var_302', input_302)
input_308= np.array([-4.582223,-5.837016,-3.858133,-5.592422,-2.726931,-8.414923,2.558095,-0.258818,9.077355,6.924866,-3.295237,1.392994,-9.787539,0.261522,-3.322622,5.542441], dtype='float64')
module1.set_input('var_308', input_308)
input_323= np.array([True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False], dtype='bool')
module1.set_input('var_323', input_323)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_301, input_302, input_308, input_323, )
res3 = intrp3.evaluate()(input_301, input_302, input_308, input_323, )
res4 = intrp4.evaluate()(input_301, input_302, input_308, input_323, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
module5.set_input('var_301', input_301)
module5.set_input('var_302', input_302)
module5.set_input('var_308', input_308)
module5.set_input('var_323', input_323)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_301, input_302, input_308, input_323, )
res7 = intrp7.evaluate()(input_301, input_302, input_308, input_323, )
res8 = intrp8.evaluate()(input_301, input_302, input_308, input_323, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
module9.set_input('var_301', input_301)
module9.set_input('var_302', input_302)
module9.set_input('var_308', input_308)
module9.set_input('var_323', input_323)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_301, input_302, input_308, input_323, )
res11 = intrp11.evaluate()(input_301, input_302, input_308, input_323, )
res12 = intrp12.evaluate()(input_301, input_302, input_308, input_323, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
module13.set_input('var_301', input_301)
module13.set_input('var_302', input_302)
module13.set_input('var_308', input_308)
module13.set_input('var_323', input_323)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_301, input_302, input_308, input_323, )
res15 = intrp15.evaluate()(input_301, input_302, input_308, input_323, )
res16 = intrp16.evaluate()(input_301, input_302, input_308, input_323, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
module17.set_input('var_301', input_301)
module17.set_input('var_302', input_302)
module17.set_input('var_308', input_308)
module17.set_input('var_323', input_323)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_301, input_302, input_308, input_323, )
res19 = intrp19.evaluate()(input_301, input_302, input_308, input_323, )
res20 = intrp20.evaluate()(input_301, input_302, input_308, input_323, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
module21.set_input('var_301', input_301)
module21.set_input('var_302', input_302)
module21.set_input('var_308', input_308)
module21.set_input('var_323', input_323)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_301, input_302, input_308, input_323, )
res23 = intrp23.evaluate()(input_301, input_302, input_308, input_323, )
res24 = intrp24.evaluate()(input_301, input_302, input_308, input_323, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''