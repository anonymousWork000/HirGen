import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
var_1 = relay.var("var_1", dtype = "float32", shape = (13,))#candidate|1|(13,)|var|float32
bop_2 = relay.less_equal(var_0.astype('bool'), var_1.astype('bool')) # shape=(13,)
output = relay.Tuple([bop_2,])
output2 = relay.Tuple([bop_2,])
func_5 = relay.Function([var_0,var_1,], output)
mod['func_5'] = func_5
mod = relay.transform.InferType()(mod)
mutated_mod['func_5'] = func_5
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5_call = mutated_mod.get_global_var('func_5')
var_7 = relay.var("var_7", dtype = "float32", shape = ())#candidate|7|()|var|float32
var_8 = relay.var("var_8", dtype = "float32", shape = (13,))#candidate|8|(13,)|var|float32
call_6 = func_5_call(var_7,var_8,)
output = call_6
func_9 = relay.Function([var_7,var_8,], output)
mutated_mod['func_9'] = func_9
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11 = relay.var("var_11", dtype = "float32", shape = (4,))#candidate|11|(4,)|var|float32
uop_12 = relay.sigmoid(var_11.astype('float32')) # shape=(4,)
uop_14 = relay.atan(var_11.astype('float64')) # shape=(4,)
bop_16 = relay.left_shift(var_11.astype('int32'), relay.reshape(uop_14.astype('int32'), relay.shape_of(var_11))) # shape=(4,)
bop_19 = relay.bitwise_and(uop_12.astype('uint64'), relay.reshape(bop_16.astype('uint64'), relay.shape_of(uop_12))) # shape=(4,)
var_22 = relay.var("var_22", dtype = "float64", shape = (4,))#candidate|22|(4,)|var|float64
bop_23 = relay.left_shift(uop_14.astype('int64'), relay.reshape(var_22.astype('int64'), relay.shape_of(uop_14))) # shape=(4,)
uop_26 = relay.log10(uop_14.astype('float64')) # shape=(4,)
var_28 = relay.var("var_28", dtype = "float64", shape = (4,))#candidate|28|(4,)|var|float64
bop_29 = relay.logical_and(uop_26.astype('bool'), relay.reshape(var_28.astype('bool'), relay.shape_of(uop_26))) # shape=(4,)
var_32 = relay.var("var_32", dtype = "bool", shape = (4,))#candidate|32|(4,)|var|bool
bop_33 = relay.equal(bop_29.astype('bool'), relay.reshape(var_32.astype('bool'), relay.shape_of(bop_29))) # shape=(4,)
uop_36 = relay.tan(var_11.astype('float64')) # shape=(4,)
uop_38 = relay.cosh(uop_12.astype('float64')) # shape=(4,)
uop_40 = relay.log(var_28.astype('float64')) # shape=(4,)
uop_42 = relay.atanh(uop_38.astype('float64')) # shape=(4,)
func_5_call = mod.get_global_var('func_5')
func_9_call = mutated_mod.get_global_var('func_9')
var_45 = relay.var("var_45", dtype = "float32", shape = ())#candidate|45|()|var|float32
const_46 = relay.const([8.335766,1.897839,-3.738938,5.085560,-7.676431,-1.550367,-9.899446,0.334952,-0.598102,0.217672,8.320767,-3.280915,0.381478], dtype = "float32")#candidate|46|(13,)|const|float32
call_44 = relay.TupleGetItem(func_5_call(relay.reshape(var_45.astype('float32'), []), relay.reshape(const_46.astype('float32'), [13,]), ), 0)
call_47 = relay.TupleGetItem(func_9_call(relay.reshape(var_45.astype('float32'), []), relay.reshape(const_46.astype('float32'), [13,]), ), 0)
output = relay.Tuple([bop_19,bop_23,bop_33,uop_36,uop_40,uop_42,call_44,var_45,const_46,])
output2 = relay.Tuple([bop_19,bop_23,bop_33,uop_36,uop_40,uop_42,call_47,var_45,const_46,])
func_48 = relay.Function([var_11,var_22,var_28,var_32,var_45,], output)
mod['func_48'] = func_48
mod = relay.transform.InferType()(mod)
var_49 = relay.var("var_49", dtype = "float32", shape = (4,))#candidate|49|(4,)|var|float32
var_50 = relay.var("var_50", dtype = "float64", shape = (4,))#candidate|50|(4,)|var|float64
var_51 = relay.var("var_51", dtype = "float64", shape = (4,))#candidate|51|(4,)|var|float64
var_52 = relay.var("var_52", dtype = "bool", shape = (4,))#candidate|52|(4,)|var|bool
var_53 = relay.var("var_53", dtype = "float32", shape = ())#candidate|53|()|var|float32
output = func_48(var_49,var_50,var_51,var_52,var_53,)
func_54 = relay.Function([var_49,var_50,var_51,var_52,var_53,], output)
mutated_mod['func_54'] = func_54
mutated_mod = relay.transform.InferType()(mutated_mod)
var_56 = relay.var("var_56", dtype = "uint32", shape = (16,))#candidate|56|(16,)|var|uint32
var_57 = relay.var("var_57", dtype = "uint32", shape = (16,))#candidate|57|(16,)|var|uint32
bop_58 = relay.bitwise_xor(var_56.astype('uint32'), relay.reshape(var_57.astype('uint32'), relay.shape_of(var_56))) # shape=(16,)
const_61 = relay.const([-4,-10,6,-9,-2,-2,-6,9,-7,-2,3,4,3,-6,1,-1], dtype = "uint32")#candidate|61|(16,)|const|uint32
bop_62 = relay.equal(var_57.astype('bool'), relay.reshape(const_61.astype('bool'), relay.shape_of(var_57))) # shape=(16,)
uop_65 = relay.asinh(var_57.astype('float64')) # shape=(16,)
var_67 = relay.var("var_67", dtype = "uint32", shape = (16,))#candidate|67|(16,)|var|uint32
bop_68 = relay.bitwise_or(const_61.astype('uint8'), relay.reshape(var_67.astype('uint8'), relay.shape_of(const_61))) # shape=(16,)
const_71 = relay.const([-5.630006,3.950954,-9.098038,-8.418970,3.427608,-9.680490,2.659181,3.417633,-8.083744,3.824999,6.049293,2.802644,8.162942,-7.147270,-6.829399,-4.210115], dtype = "float64")#candidate|71|(16,)|const|float64
bop_72 = relay.greater_equal(uop_65.astype('bool'), relay.reshape(const_71.astype('bool'), relay.shape_of(uop_65))) # shape=(16,)
func_48_call = mod.get_global_var('func_48')
func_54_call = mutated_mod.get_global_var('func_54')
var_76 = relay.var("var_76", dtype = "float32", shape = (4,))#candidate|76|(4,)|var|float32
const_77 = relay.const(-3.257313, dtype = "float32")#candidate|77|()|const|float32
call_75 = relay.TupleGetItem(func_48_call(relay.reshape(var_76.astype('float32'), [4,]), relay.reshape(var_76.astype('float64'), [4,]), relay.reshape(var_76.astype('float64'), [4,]), relay.reshape(var_76.astype('bool'), [4,]), relay.reshape(const_77.astype('float32'), []), ), 1)
call_78 = relay.TupleGetItem(func_54_call(relay.reshape(var_76.astype('float32'), [4,]), relay.reshape(var_76.astype('float64'), [4,]), relay.reshape(var_76.astype('float64'), [4,]), relay.reshape(var_76.astype('bool'), [4,]), relay.reshape(const_77.astype('float32'), []), ), 1)
bop_79 = relay.bitwise_and(bop_62.astype('uint16'), relay.reshape(uop_65.astype('uint16'), relay.shape_of(bop_62))) # shape=(16,)
bop_82 = relay.floor_mod(call_75.astype('float64'), relay.reshape(var_76.astype('float64'), relay.shape_of(call_75))) # shape=(4,)
bop_85 = relay.floor_mod(call_78.astype('float64'), relay.reshape(var_76.astype('float64'), relay.shape_of(call_78))) # shape=(4,)
bop_86 = relay.bitwise_or(bop_79.astype('int64'), const_77.astype('int64')) # shape=(16,)
uop_89 = relay.asin(uop_65.astype('float32')) # shape=(16,)
bop_91 = relay.bitwise_and(uop_89.astype('int32'), relay.reshape(const_61.astype('int32'), relay.shape_of(uop_89))) # shape=(16,)
bop_94 = relay.logical_and(uop_89.astype('bool'), relay.reshape(const_61.astype('bool'), relay.shape_of(uop_89))) # shape=(16,)
uop_97 = relay.sinh(uop_65.astype('float32')) # shape=(16,)
output = relay.Tuple([bop_58,bop_68,bop_72,bop_82,bop_86,bop_91,bop_94,uop_97,])
output2 = relay.Tuple([bop_58,bop_68,bop_72,bop_85,bop_86,bop_91,bop_94,uop_97,])
func_99 = relay.Function([var_56,var_57,var_67,var_76,], output)
mod['func_99'] = func_99
mod = relay.transform.InferType()(mod)
mutated_mod['func_99'] = func_99
mutated_mod = relay.transform.InferType()(mutated_mod)
func_99_call = mutated_mod.get_global_var('func_99')
var_101 = relay.var("var_101", dtype = "uint32", shape = (16,))#candidate|101|(16,)|var|uint32
var_102 = relay.var("var_102", dtype = "uint32", shape = (16,))#candidate|102|(16,)|var|uint32
var_103 = relay.var("var_103", dtype = "uint32", shape = (16,))#candidate|103|(16,)|var|uint32
var_104 = relay.var("var_104", dtype = "float32", shape = (4,))#candidate|104|(4,)|var|float32
call_100 = func_99_call(var_101,var_102,var_103,var_104,)
output = call_100
func_105 = relay.Function([var_101,var_102,var_103,var_104,], output)
mutated_mod['func_105'] = func_105
mutated_mod = relay.transform.InferType()(mutated_mod)
var_107 = relay.var("var_107", dtype = "float32", shape = (13, 6))#candidate|107|(13, 6)|var|float32
uop_108 = relay.sinh(var_107.astype('float32')) # shape=(13, 6)
var_110 = relay.var("var_110", dtype = "float32", shape = (13, 6))#candidate|110|(13, 6)|var|float32
bop_111 = relay.mod(uop_108.astype('float64'), relay.reshape(var_110.astype('float64'), relay.shape_of(uop_108))) # shape=(13, 6)
output = relay.Tuple([bop_111,])
output2 = relay.Tuple([bop_111,])
func_114 = relay.Function([var_107,var_110,], output)
mod['func_114'] = func_114
mod = relay.transform.InferType()(mod)
mutated_mod['func_114'] = func_114
mutated_mod = relay.transform.InferType()(mutated_mod)
func_114_call = mutated_mod.get_global_var('func_114')
var_116 = relay.var("var_116", dtype = "float32", shape = (13, 6))#candidate|116|(13, 6)|var|float32
var_117 = relay.var("var_117", dtype = "float32", shape = (13, 6))#candidate|117|(13, 6)|var|float32
call_115 = func_114_call(var_116,var_117,)
output = call_115
func_118 = relay.Function([var_116,var_117,], output)
mutated_mod['func_118'] = func_118
mutated_mod = relay.transform.InferType()(mutated_mod)
const_120 = relay.const([-5.802968,-8.204344,-8.854218,-1.001686,-0.626733,-0.278043,-3.058654,9.799231,-8.432692,-3.686307,-7.354547,-7.958843,-4.723070], dtype = "float64")#candidate|120|(13,)|const|float64
const_121 = relay.const([7.545450,8.175475,9.998762,-5.628512,-2.495160,-4.624746,9.016860,2.603582,-0.709033,-8.753731,1.073602,-0.286471,9.705404], dtype = "float64")#candidate|121|(13,)|const|float64
bop_122 = relay.power(const_120.astype('float64'), relay.reshape(const_121.astype('float64'), relay.shape_of(const_120))) # shape=(13,)
output = bop_122
output2 = bop_122
func_125 = relay.Function([], output)
mod['func_125'] = func_125
mod = relay.transform.InferType()(mod)
output = func_125()
func_126 = relay.Function([], output)
mutated_mod['func_126'] = func_126
mutated_mod = relay.transform.InferType()(mutated_mod)
var_127 = relay.var("var_127", dtype = "float64", shape = ())#candidate|127|()|var|float64
uop_128 = relay.tan(var_127.astype('float64')) # shape=()
uop_130 = relay.log(uop_128.astype('float32')) # shape=()
uop_132 = relay.acosh(var_127.astype('float32')) # shape=()
output = relay.Tuple([uop_130,uop_132,])
output2 = relay.Tuple([uop_130,uop_132,])
func_134 = relay.Function([var_127,], output)
mod['func_134'] = func_134
mod = relay.transform.InferType()(mod)
mutated_mod['func_134'] = func_134
mutated_mod = relay.transform.InferType()(mutated_mod)
var_135 = relay.var("var_135", dtype = "float64", shape = ())#candidate|135|()|var|float64
func_134_call = mutated_mod.get_global_var('func_134')
call_136 = func_134_call(var_135)
output = call_136
func_137 = relay.Function([var_135], output)
mutated_mod['func_137'] = func_137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_139 = relay.var("var_139", dtype = "uint32", shape = (6,))#candidate|139|(6,)|var|uint32
var_140 = relay.var("var_140", dtype = "uint32", shape = (6,))#candidate|140|(6,)|var|uint32
bop_141 = relay.right_shift(var_139.astype('uint32'), relay.reshape(var_140.astype('uint32'), relay.shape_of(var_139))) # shape=(6,)
var_144 = relay.var("var_144", dtype = "uint32", shape = (6,))#candidate|144|(6,)|var|uint32
bop_145 = relay.greater(var_140.astype('bool'), relay.reshape(var_144.astype('bool'), relay.shape_of(var_140))) # shape=(6,)
var_148 = relay.var("var_148", dtype = "uint32", shape = (6,))#candidate|148|(6,)|var|uint32
bop_149 = relay.greater(bop_141.astype('bool'), relay.reshape(var_148.astype('bool'), relay.shape_of(bop_141))) # shape=(6,)
const_152 = relay.const([9,9,-9,-4,5,10], dtype = "uint32")#candidate|152|(6,)|const|uint32
bop_153 = relay.floor_divide(var_139.astype('float32'), relay.reshape(const_152.astype('float32'), relay.shape_of(var_139))) # shape=(6,)
bop_156 = relay.bitwise_and(bop_141.astype('uint32'), relay.reshape(var_140.astype('uint32'), relay.shape_of(bop_141))) # shape=(6,)
func_48_call = mod.get_global_var('func_48')
func_54_call = mutated_mod.get_global_var('func_54')
var_160 = relay.var("var_160", dtype = "float32", shape = (4, 1))#candidate|160|(4, 1)|var|float32
const_161 = relay.const(-7.589631, dtype = "float32")#candidate|161|()|const|float32
call_159 = relay.TupleGetItem(func_48_call(relay.reshape(var_160.astype('float32'), [4,]), relay.reshape(var_160.astype('float64'), [4,]), relay.reshape(var_160.astype('float64'), [4,]), relay.reshape(var_160.astype('bool'), [4,]), relay.reshape(const_161.astype('float32'), []), ), 3)
call_162 = relay.TupleGetItem(func_54_call(relay.reshape(var_160.astype('float32'), [4,]), relay.reshape(var_160.astype('float64'), [4,]), relay.reshape(var_160.astype('float64'), [4,]), relay.reshape(var_160.astype('bool'), [4,]), relay.reshape(const_161.astype('float32'), []), ), 3)
var_163 = relay.var("var_163", dtype = "uint32", shape = (6,))#candidate|163|(6,)|var|uint32
bop_164 = relay.less_equal(var_144.astype('bool'), relay.reshape(var_163.astype('bool'), relay.shape_of(var_144))) # shape=(6,)
bop_167 = relay.multiply(var_144.astype('float64'), relay.reshape(bop_156.astype('float64'), relay.shape_of(var_144))) # shape=(6,)
uop_170 = relay.atan(bop_167.astype('float64')) # shape=(6,)
uop_172 = relay.acosh(uop_170.astype('float64')) # shape=(6,)
bop_174 = relay.less(uop_170.astype('bool'), relay.reshape(bop_167.astype('bool'), relay.shape_of(uop_170))) # shape=(6,)
bop_177 = relay.floor_divide(uop_172.astype('float64'), relay.reshape(bop_149.astype('float64'), relay.shape_of(uop_172))) # shape=(6,)
bop_180 = relay.bitwise_or(bop_177.astype('uint16'), relay.reshape(bop_164.astype('uint16'), relay.shape_of(bop_177))) # shape=(6,)
bop_183 = relay.floor_mod(uop_170.astype('float32'), relay.reshape(bop_167.astype('float32'), relay.shape_of(uop_170))) # shape=(6,)
uop_186 = relay.sinh(bop_167.astype('float32')) # shape=(6,)
bop_188 = relay.mod(uop_170.astype('float32'), relay.reshape(bop_164.astype('float32'), relay.shape_of(uop_170))) # shape=(6,)
uop_191 = relay.exp(bop_177.astype('float32')) # shape=(6,)
uop_193 = relay.asinh(uop_191.astype('float32')) # shape=(6,)
uop_195 = relay.asinh(uop_193.astype('float32')) # shape=(6,)
bop_197 = relay.less(uop_195.astype('bool'), relay.reshape(bop_183.astype('bool'), relay.shape_of(uop_195))) # shape=(6,)
uop_200 = relay.acosh(uop_193.astype('float32')) # shape=(6,)
bop_202 = relay.bitwise_or(bop_197.astype('int8'), relay.reshape(bop_188.astype('int8'), relay.shape_of(bop_197))) # shape=(6,)
bop_205 = relay.right_shift(uop_195.astype('int16'), relay.reshape(bop_164.astype('int16'), relay.shape_of(uop_195))) # shape=(6,)
uop_208 = relay.sqrt(bop_202.astype('float64')) # shape=(6,)
bop_210 = relay.subtract(uop_200.astype('uint8'), relay.reshape(const_152.astype('uint8'), relay.shape_of(uop_200))) # shape=(6,)
var_213 = relay.var("var_213", dtype = "float64", shape = (6,))#candidate|213|(6,)|var|float64
bop_214 = relay.minimum(uop_208.astype('uint32'), relay.reshape(var_213.astype('uint32'), relay.shape_of(uop_208))) # shape=(6,)
func_114_call = mod.get_global_var('func_114')
func_118_call = mutated_mod.get_global_var('func_118')
var_218 = relay.var("var_218", dtype = "float32", shape = (78,))#candidate|218|(78,)|var|float32
call_217 = relay.TupleGetItem(func_114_call(relay.reshape(var_218.astype('float32'), [13, 6]), relay.reshape(var_218.astype('float32'), [13, 6]), ), 0)
call_219 = relay.TupleGetItem(func_118_call(relay.reshape(var_218.astype('float32'), [13, 6]), relay.reshape(var_218.astype('float32'), [13, 6]), ), 0)
bop_220 = relay.bitwise_and(bop_214.astype('int16'), relay.reshape(bop_197.astype('int16'), relay.shape_of(bop_214))) # shape=(6,)
bop_223 = relay.divide(bop_220.astype('float32'), relay.reshape(var_163.astype('float32'), relay.shape_of(bop_220))) # shape=(6,)
const_226 = relay.const([-9,-10,-7,-10,6,2], dtype = "uint8")#candidate|226|(6,)|const|uint8
bop_227 = relay.greater(bop_210.astype('bool'), relay.reshape(const_226.astype('bool'), relay.shape_of(bop_210))) # shape=(6,)
bop_230 = relay.power(uop_193.astype('float64'), relay.reshape(uop_170.astype('float64'), relay.shape_of(uop_193))) # shape=(6,)
bop_233 = relay.minimum(uop_208.astype('uint32'), relay.reshape(const_226.astype('uint32'), relay.shape_of(uop_208))) # shape=(6,)
uop_236 = relay.log2(bop_205.astype('float32')) # shape=(6,)
uop_238 = relay.asin(uop_200.astype('float64')) # shape=(6,)
bop_240 = relay.greater_equal(uop_191.astype('bool'), relay.reshape(uop_236.astype('bool'), relay.shape_of(uop_191))) # shape=(6,)
uop_243 = relay.rsqrt(bop_177.astype('float32')) # shape=(6,)
var_245 = relay.var("var_245", dtype = "float64", shape = (6,))#candidate|245|(6,)|var|float64
bop_246 = relay.subtract(bop_167.astype('uint32'), relay.reshape(var_245.astype('uint32'), relay.shape_of(bop_167))) # shape=(6,)
var_249 = relay.var("var_249", dtype = "float64", shape = (6,))#candidate|249|(6,)|var|float64
bop_250 = relay.floor_mod(uop_238.astype('float64'), relay.reshape(var_249.astype('float64'), relay.shape_of(uop_238))) # shape=(6,)
bop_253 = relay.left_shift(bop_202.astype('uint64'), relay.reshape(const_226.astype('uint64'), relay.shape_of(bop_202))) # shape=(6,)
uop_256 = relay.rsqrt(bop_250.astype('float32')) # shape=(6,)
var_258 = relay.var("var_258", dtype = "float32", shape = (6,))#candidate|258|(6,)|var|float32
bop_259 = relay.greater(uop_200.astype('bool'), relay.reshape(var_258.astype('bool'), relay.shape_of(uop_200))) # shape=(6,)
output = relay.Tuple([bop_145,bop_153,call_159,var_160,const_161,bop_174,bop_180,uop_186,call_217,var_218,bop_223,bop_227,bop_230,bop_233,bop_240,uop_243,bop_246,bop_253,uop_256,bop_259,])
output2 = relay.Tuple([bop_145,bop_153,call_162,var_160,const_161,bop_174,bop_180,uop_186,call_219,var_218,bop_223,bop_227,bop_230,bop_233,bop_240,uop_243,bop_246,bop_253,uop_256,bop_259,])
func_262 = relay.Function([var_139,var_140,var_144,var_148,var_160,var_163,var_213,var_218,var_245,var_249,var_258,], output)
mod['func_262'] = func_262
mod = relay.transform.InferType()(mod)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_262_call = mutated_mod.get_global_var('func_262')
var_264 = relay.var("var_264", dtype = "uint32", shape = (6,))#candidate|264|(6,)|var|uint32
var_265 = relay.var("var_265", dtype = "uint32", shape = (6,))#candidate|265|(6,)|var|uint32
var_266 = relay.var("var_266", dtype = "uint32", shape = (6,))#candidate|266|(6,)|var|uint32
var_267 = relay.var("var_267", dtype = "uint32", shape = (6,))#candidate|267|(6,)|var|uint32
var_268 = relay.var("var_268", dtype = "float32", shape = (4, 1))#candidate|268|(4, 1)|var|float32
var_269 = relay.var("var_269", dtype = "uint32", shape = (6,))#candidate|269|(6,)|var|uint32
var_270 = relay.var("var_270", dtype = "float64", shape = (6,))#candidate|270|(6,)|var|float64
var_271 = relay.var("var_271", dtype = "float32", shape = (78,))#candidate|271|(78,)|var|float32
var_272 = relay.var("var_272", dtype = "float64", shape = (6,))#candidate|272|(6,)|var|float64
var_273 = relay.var("var_273", dtype = "float64", shape = (6,))#candidate|273|(6,)|var|float64
var_274 = relay.var("var_274", dtype = "float32", shape = (6,))#candidate|274|(6,)|var|float32
call_263 = func_262_call(var_264,var_265,var_266,var_267,var_268,var_269,var_270,var_271,var_272,var_273,var_274,)
output = call_263
func_275 = relay.Function([var_264,var_265,var_266,var_267,var_268,var_269,var_270,var_271,var_272,var_273,var_274,], output)
mutated_mod['func_275'] = func_275
mutated_mod = relay.transform.InferType()(mutated_mod)
var_277 = relay.var("var_277", dtype = "uint16", shape = (14,))#candidate|277|(14,)|var|uint16
var_278 = relay.var("var_278", dtype = "uint16", shape = (14,))#candidate|278|(14,)|var|uint16
bop_279 = relay.bitwise_or(var_277.astype('uint16'), relay.reshape(var_278.astype('uint16'), relay.shape_of(var_277))) # shape=(14,)
uop_282 = relay.cosh(var_278.astype('float64')) # shape=(14,)
uop_284 = relay.tan(var_277.astype('float32')) # shape=(14,)
var_286 = relay.var("var_286", dtype = "float32", shape = (14,))#candidate|286|(14,)|var|float32
bop_287 = relay.less(uop_284.astype('bool'), relay.reshape(var_286.astype('bool'), relay.shape_of(uop_284))) # shape=(14,)
var_290 = relay.var("var_290", dtype = "float64", shape = (14,))#candidate|290|(14,)|var|float64
bop_291 = relay.logical_xor(uop_282.astype('int32'), relay.reshape(var_290.astype('int32'), relay.shape_of(uop_282))) # shape=(14,)
uop_294 = relay.atan(bop_287.astype('float32')) # shape=(14,)
var_296 = relay.var("var_296", dtype = "float32", shape = (14,))#candidate|296|(14,)|var|float32
bop_297 = relay.less(var_286.astype('bool'), relay.reshape(var_296.astype('bool'), relay.shape_of(var_286))) # shape=(14,)
bop_300 = relay.mod(uop_294.astype('float64'), relay.reshape(var_277.astype('float64'), relay.shape_of(uop_294))) # shape=(14,)
var_303 = relay.var("var_303", dtype = "uint16", shape = (14,))#candidate|303|(14,)|var|uint16
bop_304 = relay.not_equal(var_277.astype('bool'), relay.reshape(var_303.astype('bool'), relay.shape_of(var_277))) # shape=(14,)
uop_307 = relay.asin(bop_300.astype('float64')) # shape=(14,)
bop_309 = relay.bitwise_or(bop_300.astype('int64'), relay.reshape(bop_279.astype('int64'), relay.shape_of(bop_300))) # shape=(14,)
uop_312 = relay.atanh(uop_284.astype('float32')) # shape=(14,)
bop_314 = relay.bitwise_and(bop_291.astype('int32'), relay.reshape(bop_297.astype('int32'), relay.shape_of(bop_291))) # shape=(14,)
output = relay.Tuple([bop_304,uop_307,bop_309,uop_312,bop_314,])
output2 = relay.Tuple([bop_304,uop_307,bop_309,uop_312,bop_314,])
func_317 = relay.Function([var_277,var_278,var_286,var_290,var_296,var_303,], output)
mod['func_317'] = func_317
mod = relay.transform.InferType()(mod)
var_318 = relay.var("var_318", dtype = "uint16", shape = (14,))#candidate|318|(14,)|var|uint16
var_319 = relay.var("var_319", dtype = "uint16", shape = (14,))#candidate|319|(14,)|var|uint16
var_320 = relay.var("var_320", dtype = "float32", shape = (14,))#candidate|320|(14,)|var|float32
var_321 = relay.var("var_321", dtype = "float64", shape = (14,))#candidate|321|(14,)|var|float64
var_322 = relay.var("var_322", dtype = "float32", shape = (14,))#candidate|322|(14,)|var|float32
var_323 = relay.var("var_323", dtype = "uint16", shape = (14,))#candidate|323|(14,)|var|uint16
output = func_317(var_318,var_319,var_320,var_321,var_322,var_323,)
func_324 = relay.Function([var_318,var_319,var_320,var_321,var_322,var_323,], output)
mutated_mod['func_324'] = func_324
mutated_mod = relay.transform.InferType()(mutated_mod)
var_326 = relay.var("var_326", dtype = "uint16", shape = (11, 9, 11))#candidate|326|(11, 9, 11)|var|uint16
const_327 = relay.const([[[9,4,-4,9,10,5,-4,-10,7,-4,1],[3,1,3,-3,7,-8,6,-9,-6,-6,-4],[5,1,-3,-4,9,4,-3,5,-7,-7,-3],[-1,-7,9,7,8,-7,-5,6,-7,-7,6],[-5,7,3,-10,-7,9,7,1,-1,-7,-2],[1,2,-2,8,-10,-2,8,2,-2,-1,7],[8,4,-9,-10,-3,-6,8,5,-9,-10,5],[6,5,8,-10,-4,3,8,8,10,8,10],[7,1,-2,8,-8,-7,-4,-9,-8,-3,-2]],[[2,10,3,1,3,9,-5,-4,2,-7,4],[-2,6,-7,-2,1,-9,7,8,-5,7,6],[7,-4,1,-6,3,-10,-9,-7,4,-6,-8],[4,10,-6,3,8,1,7,-3,8,2,-4],[-5,-3,-6,3,-9,-9,-6,7,-6,-7,6],[8,-10,5,6,-4,-8,-3,5,10,3,-4],[-6,-8,5,9,3,1,6,5,5,5,6],[2,6,-5,3,7,2,2,-3,9,10,9],[-5,-10,-6,6,6,5,-9,-8,2,4,5]],[[1,8,-3,-9,-6,9,-7,-2,-8,2,-10],[-4,5,-6,-9,-4,-10,-10,1,-7,6,-3],[-2,-7,-5,6,1,-4,7,3,4,6,-10],[-6,8,5,1,10,-7,6,7,7,-1,2],[4,3,5,-9,8,3,9,3,-8,-3,-9],[6,8,-1,6,-6,1,8,9,-8,-5,6],[-10,3,-9,4,-5,3,6,2,-9,2,-8],[-5,-10,-7,-7,8,-1,7,5,-7,2,4],[3,-9,6,4,4,10,-4,8,9,9,6]],[[9,7,-2,7,-8,3,5,-9,-3,8,-6],[2,4,-9,-3,-10,6,10,8,-7,-8,-2],[-10,-3,5,-8,-6,6,-4,-4,1,1,1],[7,-7,-4,5,-9,10,-9,3,-5,-10,10],[7,4,6,-5,-5,6,7,8,-7,-6,-10],[1,4,4,-8,-1,8,1,9,3,-10,-7],[-9,8,5,-1,1,-10,-10,1,1,-1,7],[5,1,1,4,-8,-6,-9,10,-8,3,-8],[-4,-1,10,6,-5,5,-8,5,8,-7,10]],[[7,-7,3,-5,-3,9,-6,5,8,2,5],[-2,1,6,6,3,5,10,-10,-8,-4,8],[-6,1,-2,-7,-10,-1,-1,-9,2,2,-10],[7,7,-4,2,2,-4,2,-5,-6,2,-8],[-2,-9,8,2,-4,-9,-4,-4,6,4,9],[7,9,-1,-9,-3,7,-5,-5,-5,8,2],[9,-10,-9,5,2,-4,-5,1,5,5,6],[-8,-9,-10,9,8,-7,4,-3,-6,1,10],[-6,-8,-5,-4,4,-3,-5,9,6,-3,-6]],[[-1,-4,-7,-8,10,8,-6,2,-5,1,9],[-1,-1,6,10,-9,-4,-7,-9,-8,8,1],[-10,-3,9,-10,-10,-7,-8,3,4,8,-8],[-10,1,-7,5,-2,-1,7,8,10,-10,9],[7,-7,-7,-2,-1,1,10,2,8,-10,10],[-10,-9,-6,-7,-9,10,-9,3,9,2,8],[10,9,4,8,9,2,-10,6,-5,4,-3],[10,2,9,-1,-8,-7,-2,8,-4,-10,4],[-5,9,-7,5,4,5,-7,2,3,3,-8]],[[-10,-5,-3,1,6,10,-7,-6,7,8,-8],[6,6,-1,-9,2,-5,-6,-1,-8,4,-2],[-6,-3,-2,5,-9,1,2,2,1,3,-10],[-6,7,-2,3,3,-4,-4,-9,-6,2,2],[9,7,8,6,2,-3,-6,-1,-8,-10,-1],[7,-3,-8,10,3,4,9,-2,1,7,-5],[8,-5,10,-9,10,-3,-10,-10,-3,-2,-2],[10,-6,-10,-7,-7,8,-1,7,-3,7,10],[9,10,2,8,10,8,8,-10,-2,8,-1]],[[10,1,5,-9,7,-6,7,-6,-1,-2,-4],[-8,3,-1,10,4,-10,-3,-4,1,-10,6],[-4,-4,-1,-6,9,7,-6,7,-10,5,-7],[-6,-3,-2,-3,-4,-3,4,7,8,7,-9],[6,6,4,-8,2,-2,3,9,2,-3,-2],[-8,-8,-4,-6,6,7,-9,-5,-4,3,1],[-9,1,4,6,-2,4,3,-7,-10,-2,-6],[2,10,-10,3,10,-4,3,7,-1,-6,-1],[2,9,-2,1,-1,-3,8,-5,-7,-2,8]],[[-8,-7,-3,5,-3,5,-8,-2,-7,1,-4],[-5,9,6,2,7,8,-10,-6,-7,1,10],[9,10,4,7,-10,1,-4,-1,10,8,-1],[-8,-3,-3,-7,6,4,3,7,10,-4,-9],[7,-7,-9,2,5,-6,-5,3,-3,-7,4],[6,3,1,6,-6,-1,9,-9,-9,-1,3],[3,7,4,2,5,1,6,5,-3,7,5],[-5,7,1,8,-3,9,-8,3,4,2,7],[-7,-1,5,-6,4,-7,5,8,-1,6,-8]],[[-4,8,10,-1,-7,-9,-1,-6,5,8,10],[9,7,-8,9,-1,6,8,9,-3,10,-3],[-8,-9,1,-6,-1,9,-4,-4,3,-5,5],[7,3,-8,-3,7,4,-4,-3,5,3,1],[3,2,1,6,-9,9,2,8,-10,5,-10],[8,7,-5,-9,10,4,-9,9,10,-8,-1],[-8,-4,-5,4,-9,-7,6,-9,-10,7,2],[8,9,9,-9,-8,1,-7,4,-10,-4,9],[10,-4,-6,-2,-7,10,-8,-5,-9,-6,-6]],[[7,-6,3,5,-1,10,3,8,-6,8,3],[3,5,-1,-4,-7,9,9,7,-3,-1,6],[9,-1,-9,9,5,7,7,4,-9,4,6],[7,9,2,3,4,-9,4,-4,-9,-8,2],[8,-7,-4,-2,-4,4,1,3,-3,3,-4],[2,-2,10,9,3,5,-2,-1,-1,-5,8],[10,-7,10,5,-9,-3,-7,-10,4,-4,5],[10,-10,1,-6,1,-2,-1,10,-8,2,-1],[6,-5,-5,1,-5,-6,-2,10,7,5,2]]], dtype = "uint16")#candidate|327|(11, 9, 11)|const|uint16
bop_328 = relay.not_equal(var_326.astype('bool'), relay.reshape(const_327.astype('bool'), relay.shape_of(var_326))) # shape=(11, 9, 11)
output = bop_328
output2 = bop_328
func_331 = relay.Function([var_326,], output)
mod['func_331'] = func_331
mod = relay.transform.InferType()(mod)
mutated_mod['func_331'] = func_331
mutated_mod = relay.transform.InferType()(mutated_mod)
var_332 = relay.var("var_332", dtype = "uint16", shape = (11, 9, 11))#candidate|332|(11, 9, 11)|var|uint16
func_331_call = mutated_mod.get_global_var('func_331')
call_333 = func_331_call(var_332)
output = call_333
func_334 = relay.Function([var_332], output)
mutated_mod['func_334'] = func_334
mutated_mod = relay.transform.InferType()(mutated_mod)
var_336 = relay.var("var_336", dtype = "float32", shape = ())#candidate|336|()|var|float32
uop_337 = relay.rsqrt(var_336.astype('float32')) # shape=()
var_339 = relay.var("var_339", dtype = "float32", shape = (6, 2))#candidate|339|(6, 2)|var|float32
bop_340 = relay.not_equal(var_336.astype('bool'), var_339.astype('bool')) # shape=(6, 2)
bop_343 = relay.subtract(uop_337.astype('int16'), var_339.astype('int16')) # shape=(6, 2)
bop_346 = relay.logical_xor(uop_337.astype('uint64'), bop_343.astype('uint64')) # shape=(6, 2)
bop_349 = relay.floor_mod(uop_337.astype('float64'), bop_340.astype('float64')) # shape=(6, 2)
bop_352 = relay.floor_mod(uop_337.astype('float32'), bop_340.astype('float32')) # shape=(6, 2)
uop_355 = relay.acosh(bop_346.astype('float32')) # shape=(6, 2)
bop_357 = relay.add(bop_352.astype('float32'), relay.reshape(bop_346.astype('float32'), relay.shape_of(bop_352))) # shape=(6, 2)
var_360 = relay.var("var_360", dtype = "float32", shape = (6, 2))#candidate|360|(6, 2)|var|float32
bop_361 = relay.logical_xor(uop_355.astype('uint8'), relay.reshape(var_360.astype('uint8'), relay.shape_of(uop_355))) # shape=(6, 2)
uop_364 = relay.exp(uop_355.astype('float64')) # shape=(6, 2)
uop_366 = relay.asinh(uop_364.astype('float64')) # shape=(6, 2)
func_114_call = mod.get_global_var('func_114')
func_118_call = mutated_mod.get_global_var('func_118')
const_369 = relay.const([-4.874870,-8.021114,-3.853558,-0.629151,3.491516,3.827412,-3.982251,3.251953,-3.887936,5.846359,2.064244,9.509891,-2.789191,7.494079,-1.681734,-8.599285,-6.296003,1.169159,-2.348798,6.145755,2.573380,-7.097896,9.662476,-4.908976,0.828989,2.134310,3.407657,5.203809,9.084685,3.356528,-9.301943,9.080993,-3.901965,5.400375,-3.096749,7.765527,3.561938,-3.769965,1.680876,-4.427305,-0.009109,-0.893621,-7.067453,0.293530,-7.055000,-1.291851,-7.376150,-6.717437,-8.934638,-5.810976,-3.290427,-5.369497,9.734581,-5.420479,8.950312,8.315607,-9.112334,1.331219,2.101250,-8.596243,5.967393,7.432227,-0.881557,7.174542,8.062025,-6.945707,0.045130,-6.984326,1.060501,2.363546,0.927994,-8.788294,-9.422791,8.827074,8.504038,-4.616343,-6.138828,-3.007207], dtype = "float32")#candidate|369|(78,)|const|float32
call_368 = relay.TupleGetItem(func_114_call(relay.reshape(const_369.astype('float32'), [13, 6]), relay.reshape(const_369.astype('float32'), [13, 6]), ), 0)
call_370 = relay.TupleGetItem(func_118_call(relay.reshape(const_369.astype('float32'), [13, 6]), relay.reshape(const_369.astype('float32'), [13, 6]), ), 0)
uop_371 = relay.sigmoid(var_360.astype('float64')) # shape=(6, 2)
uop_373 = relay.tan(uop_366.astype('float32')) # shape=(6, 2)
bop_375 = relay.add(uop_373.astype('float64'), relay.reshape(bop_352.astype('float64'), relay.shape_of(uop_373))) # shape=(6, 2)
uop_378 = relay.asin(bop_361.astype('float32')) # shape=(6, 2)
const_380 = relay.const([[4.099540,5.298885],[9.710627,2.425498],[1.809744,-1.948662],[-4.725868,-9.266737],[-4.519619,1.744371],[-0.388323,6.002309]], dtype = "float32")#candidate|380|(6, 2)|const|float32
bop_381 = relay.subtract(var_360.astype('uint32'), relay.reshape(const_380.astype('uint32'), relay.shape_of(var_360))) # shape=(6, 2)
output = relay.Tuple([bop_349,bop_357,call_368,const_369,uop_371,bop_375,uop_378,bop_381,])
output2 = relay.Tuple([bop_349,bop_357,call_370,const_369,uop_371,bop_375,uop_378,bop_381,])
F = relay.Function([var_336,var_339,var_360,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_336,var_339,var_360,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
	relay.transform.InferType(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_336= np.array(-4.829707, dtype='float32')
module1.set_input('var_336', input_336)
input_339= np.array([[4.477412,-9.182808],[-3.063280,4.159682],[-1.891802,7.984088],[-3.129087,-2.082745],[-6.154571,-0.600534],[7.182477,-1.357741]], dtype='float32')
module1.set_input('var_339', input_339)
input_360= np.array([[-3.921114,-6.901488],[7.778840,-9.727559],[-9.212234,8.460375],[6.481016,-8.994634],[7.685234,-7.510732],[2.986134,-9.575905]], dtype='float32')
module1.set_input('var_360', input_360)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_336, input_339, input_360, )
res3 = intrp3.evaluate()(input_336, input_339, input_360, )
res4 = intrp4.evaluate()(input_336, input_339, input_360, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_336', input_336)
module5.set_input('var_339', input_339)
module5.set_input('var_360', input_360)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_336, input_339, input_360, )
res7 = intrp7.evaluate()(input_336, input_339, input_360, )
res8 = intrp8.evaluate()(input_336, input_339, input_360, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_336', input_336)
module9.set_input('var_339', input_339)
module9.set_input('var_360', input_360)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_336, input_339, input_360, )
res11 = intrp11.evaluate()(input_336, input_339, input_360, )
res12 = intrp12.evaluate()(input_336, input_339, input_360, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_336', input_336)
module13.set_input('var_339', input_339)
module13.set_input('var_360', input_360)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_336, input_339, input_360, )
res15 = intrp15.evaluate()(input_336, input_339, input_360, )
res16 = intrp16.evaluate()(input_336, input_339, input_360, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_336', input_336)
module17.set_input('var_339', input_339)
module17.set_input('var_360', input_360)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_336, input_339, input_360, )
res19 = intrp19.evaluate()(input_336, input_339, input_360, )
res20 = intrp20.evaluate()(input_336, input_339, input_360, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_336', input_336)
module21.set_input('var_339', input_339)
module21.set_input('var_360', input_360)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_336, input_339, input_360, )
res23 = intrp23.evaluate()(input_336, input_339, input_360, )
res24 = intrp24.evaluate()(input_336, input_339, input_360, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''