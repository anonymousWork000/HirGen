import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = ())#candidate|0|()|var|int8
const_1 = relay.const([[[10,-7,-10,5,-9,-5,-3,-9,3,7,10,-9,-8],[-7,-2,7,4,2,-1,7,3,-2,-4,3,2,5],[-10,4,-1,-4,-3,-6,7,10,-4,9,-10,-4,-3],[-10,-8,6,9,9,10,4,6,-8,-7,10,-7,9],[-3,10,9,-8,6,9,3,7,3,7,-3,-2,-3],[-4,-5,-8,5,2,-9,-2,-6,10,1,5,3,3],[6,8,2,-2,4,-5,7,2,-10,10,-7,9,10],[-4,-5,10,-4,5,-2,-3,8,-7,7,-2,6,-5],[2,3,-8,-6,-5,8,-7,-7,1,-5,-10,-5,-4],[4,-9,-4,-4,5,-5,-7,-7,10,-8,-3,7,-8],[-2,3,-10,-5,7,9,10,5,5,4,9,-8,-10]],[[-7,-8,-3,-8,6,3,-6,-3,-6,-1,6,5,9],[-7,4,-7,6,6,4,8,-3,-3,3,-5,9,-2],[-3,-9,4,9,-3,8,10,9,-1,7,-9,-4,4],[-3,-7,-10,-1,-1,2,2,-6,5,4,3,-2,-9],[1,-3,-5,10,1,-10,-6,9,3,-3,2,9,3],[-3,-4,-4,-8,-10,5,-2,-9,-3,7,4,3,-3],[7,-3,5,5,-10,6,8,-8,-7,1,7,10,-6],[-4,-4,-6,-10,-1,-6,-6,-5,-2,-8,6,-5,1],[3,-5,-6,9,-7,-10,7,2,10,-10,10,-6,4],[-6,-10,-2,10,3,-10,7,9,-4,1,-10,6,5],[-1,6,4,-6,-1,-9,-8,9,5,5,3,10,7]],[[-4,9,-1,-10,-8,1,1,2,4,-2,-8,-9,1],[-4,8,3,4,-3,4,2,-10,-6,8,10,-10,7],[9,4,-7,-1,10,9,5,9,-5,-1,-5,-5,9],[-4,-10,-8,6,9,10,10,-5,4,-1,1,-5,1],[1,2,3,-8,7,-4,-8,8,-4,-8,7,10,4],[-4,-6,-8,10,7,-7,8,1,-9,-6,6,5,-10],[-5,-8,2,7,-6,-4,-4,2,6,-5,6,5,-9],[2,7,6,-4,1,8,-3,3,-3,-10,6,6,10],[-5,4,10,-10,9,10,-10,-9,-9,3,2,8,-10],[6,6,-8,5,-7,-9,1,-2,-9,-4,-9,1,-4],[7,-6,6,2,10,-5,3,9,10,10,-2,2,-7]],[[10,4,-2,-8,7,2,8,-3,-6,-8,10,6,-7],[9,6,-4,-4,2,1,-8,-4,2,-2,-6,1,5],[9,9,2,9,4,4,-4,-7,4,5,-4,9,-10],[-6,6,-2,3,-3,1,-2,-5,-4,5,-4,-5,-9],[6,6,-3,-8,-4,-6,-4,-1,-2,2,3,6,7],[9,1,-4,-5,4,3,-9,-4,1,5,-5,-6,2],[-4,7,10,-7,3,-9,-2,-8,-5,-1,1,7,5],[-1,-2,10,3,9,-5,-6,10,7,-6,-6,-2,-10],[-8,-7,2,3,2,9,-3,1,-7,-4,-2,-10,8],[1,-4,10,-1,-4,-8,-6,10,-8,-6,-1,-7,1],[-8,10,-6,5,-6,-1,-6,8,1,4,9,-6,-2]],[[7,2,1,-8,7,3,-3,6,6,8,4,9,-1],[-2,3,-4,5,10,-7,8,10,5,-10,7,3,-1],[-3,6,9,2,4,-6,-3,5,-3,-7,4,-8,3],[10,1,2,2,-9,-8,4,-9,10,-7,6,-8,6],[-3,6,-10,-1,-10,4,-2,4,5,1,8,-8,8],[6,-6,-8,7,-6,-4,7,-9,5,-5,1,-7,-6],[8,10,9,-2,8,-4,7,3,5,3,-2,-7,-7],[1,-3,-9,-10,-6,8,-3,-9,-3,-5,8,-6,-7],[-1,-9,3,4,-4,8,3,4,4,-8,-4,-1,-7],[10,10,-6,-2,-1,3,-2,8,3,-3,-5,-4,-10],[-5,-7,10,10,7,-10,8,-3,-7,-8,-4,-8,-7]],[[6,7,-10,-8,7,-8,-7,10,3,1,9,-2,2],[-9,7,-5,-9,-8,3,8,2,-6,1,10,-5,2],[8,-2,-4,-5,7,1,-10,-7,-2,4,10,-5,-5],[-5,-6,6,-2,6,-9,6,-1,-4,-5,4,5,-3],[8,-4,-3,-5,7,-2,-2,-5,-1,1,-8,-3,-5],[2,4,4,1,9,8,-2,-7,-4,-5,4,-1,-8],[-9,6,9,-5,-1,-7,9,-6,-9,-4,5,7,-10],[-7,-5,4,7,9,5,-9,5,9,-3,2,5,10],[5,-1,-8,8,5,-7,-9,10,-2,-2,-6,-10,-8],[-1,-2,5,8,-4,6,10,-3,8,3,8,7,-2],[-1,-4,-9,-3,7,8,-8,2,4,7,-8,1,-3]],[[9,-9,4,5,8,-4,5,-1,-7,-5,2,10,9],[4,-3,9,6,-3,5,-8,-2,-5,4,-9,-2,-9],[-6,-4,8,4,-7,-1,8,-5,4,7,-6,2,-8],[-10,-7,-5,-9,-7,10,-6,6,-2,-3,-9,-10,2],[1,-7,-7,1,7,7,6,-1,-7,5,-8,8,-2],[10,-5,10,-6,-5,4,-7,2,7,9,-8,8,-10],[10,8,6,6,2,-7,2,3,10,9,3,-1,5],[-9,-3,-9,-8,5,-7,-5,-6,7,-6,4,-8,7],[-8,-4,-10,-5,-3,-5,1,4,2,7,4,6,2],[-6,-4,4,3,-4,-2,-3,-5,-5,-10,-6,-10,10],[7,-4,7,-1,-2,2,6,6,9,2,-10,2,-6]],[[4,-1,8,2,7,1,-2,-7,-6,-2,-9,-4,5],[-8,5,5,-9,-4,4,-8,-7,1,2,4,8,-10],[7,10,9,-8,1,2,2,7,-1,-9,6,6,7],[-5,7,6,1,-5,3,5,-1,-3,4,-8,-7,-3],[-6,-10,-10,2,2,1,-3,6,-4,-9,7,-5,-2],[-5,-10,1,-9,1,-5,7,10,-3,-6,6,-9,4],[-6,8,-4,4,-3,-1,5,-2,-4,10,-6,-6,3],[2,-8,-1,-5,-2,-3,-4,3,-7,-7,1,-5,-7],[5,5,5,1,4,-8,10,-2,6,7,1,-10,-2],[-2,-1,10,-10,5,4,1,-7,-9,-6,-1,-6,4],[4,-6,2,-5,-8,-10,-2,6,-2,-4,-5,-9,3]],[[-5,-8,-6,2,7,1,10,9,-10,6,4,2,-8],[-2,-7,-7,-4,3,7,4,-1,8,-6,3,5,-1],[-9,9,-1,-6,-6,3,8,-9,-3,-1,-8,8,-5],[10,-2,10,-6,-9,-2,5,8,9,4,-2,-1,-1],[-1,4,2,5,5,-5,6,5,-1,-7,8,6,2],[-9,3,3,-1,-2,-1,6,4,-6,-5,8,1,4],[1,-1,10,-7,2,-8,9,7,-5,-5,-6,1,1],[-9,7,4,-5,-1,7,-9,10,-3,5,8,-6,-1],[3,6,-1,8,10,6,-9,2,4,4,-9,2,10],[6,-2,-8,10,1,-9,-1,-3,4,-3,7,-10,-3],[1,-4,5,6,-10,-2,-6,-2,-4,-4,2,-10,-6]]], dtype = "int8")#candidate|1|(9, 11, 13)|const|int8
bop_2 = relay.multiply(var_0.astype('int8'), const_1.astype('int8')) # shape=(9, 11, 13)
bop_5 = relay.mod(var_0.astype('float64'), const_1.astype('float64')) # shape=(9, 11, 13)
output = relay.Tuple([bop_2,bop_5,])
output2 = relay.Tuple([bop_2,bop_5,])
func_8 = relay.Function([var_0,], output)
mod['func_8'] = func_8
mod = relay.transform.InferType()(mod)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9 = relay.var("var_9", dtype = "int8", shape = ())#candidate|9|()|var|int8
func_8_call = mutated_mod.get_global_var('func_8')
call_10 = func_8_call(var_9)
output = call_10
func_11 = relay.Function([var_9], output)
mutated_mod['func_11'] = func_11
mutated_mod = relay.transform.InferType()(mutated_mod)
const_13 = relay.const([[-1,-4,3,-9,-6,7,-6,2],[-1,-9,10,7,2,-8,2,-8],[-4,9,2,-4,-9,-4,-6,-4],[7,3,-7,-1,-2,8,5,-8],[-10,-6,-2,-1,-1,-5,1,-5],[-5,8,-1,-1,-8,-8,4,-3],[2,7,10,-7,2,10,-3,4],[5,2,-2,2,3,-4,7,-1]], dtype = "uint32")#candidate|13|(8, 8)|const|uint32
var_14 = relay.var("var_14", dtype = "uint32", shape = (8, 8))#candidate|14|(8, 8)|var|uint32
bop_15 = relay.maximum(const_13.astype('uint32'), relay.reshape(var_14.astype('uint32'), relay.shape_of(const_13))) # shape=(8, 8)
const_18 = relay.const([[-3,-3,-4,-8,10,7,-4,-2],[9,4,-1,3,3,2,9,9],[8,2,-10,1,2,-10,6,-5],[-5,-9,4,-6,-1,6,10,3],[7,10,-8,7,-10,8,8,1],[2,2,1,2,-6,3,6,-4],[3,-10,8,5,-4,-3,6,-6],[3,6,-7,7,9,-9,-4,-7]], dtype = "uint32")#candidate|18|(8, 8)|const|uint32
bop_19 = relay.floor_mod(var_14.astype('float32'), relay.reshape(const_18.astype('float32'), relay.shape_of(var_14))) # shape=(8, 8)
uop_22 = relay.asinh(var_14.astype('float32')) # shape=(8, 8)
uop_24 = relay.asinh(var_14.astype('float32')) # shape=(8, 8)
bop_26 = relay.greater(uop_24.astype('bool'), relay.reshape(const_13.astype('bool'), relay.shape_of(uop_24))) # shape=(8, 8)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
const_30 = relay.const(-10, dtype = "int8")#candidate|30|()|const|int8
call_29 = relay.TupleGetItem(func_8_call(relay.reshape(const_30.astype('int8'), [])), 0)
call_31 = relay.TupleGetItem(func_11_call(relay.reshape(const_30.astype('int8'), [])), 0)
bop_32 = relay.power(var_14.astype('float32'), relay.reshape(const_18.astype('float32'), relay.shape_of(var_14))) # shape=(8, 8)
uop_35 = relay.rsqrt(uop_22.astype('float64')) # shape=(8, 8)
uop_37 = relay.erf(uop_35.astype('float32')) # shape=(8, 8)
bop_39 = relay.power(uop_37.astype('float64'), relay.reshape(uop_24.astype('float64'), relay.shape_of(uop_37))) # shape=(8, 8)
var_42 = relay.var("var_42", dtype = "float32", shape = (8, 8))#candidate|42|(8, 8)|var|float32
bop_43 = relay.logical_xor(uop_37.astype('uint32'), relay.reshape(var_42.astype('uint32'), relay.shape_of(uop_37))) # shape=(8, 8)
output = relay.Tuple([bop_15,bop_19,bop_26,call_29,const_30,bop_32,bop_39,bop_43,])
output2 = relay.Tuple([bop_15,bop_19,bop_26,call_31,const_30,bop_32,bop_39,bop_43,])
func_46 = relay.Function([var_14,var_42,], output)
mod['func_46'] = func_46
mod = relay.transform.InferType()(mod)
mutated_mod['func_46'] = func_46
mutated_mod = relay.transform.InferType()(mutated_mod)
func_46_call = mutated_mod.get_global_var('func_46')
var_48 = relay.var("var_48", dtype = "uint32", shape = (8, 8))#candidate|48|(8, 8)|var|uint32
var_49 = relay.var("var_49", dtype = "float32", shape = (8, 8))#candidate|49|(8, 8)|var|float32
call_47 = func_46_call(var_48,var_49,)
output = call_47
func_50 = relay.Function([var_48,var_49,], output)
mutated_mod['func_50'] = func_50
mutated_mod = relay.transform.InferType()(mutated_mod)
var_52 = relay.var("var_52", dtype = "float32", shape = ())#candidate|52|()|var|float32
uop_53 = relay.acos(var_52.astype('float32')) # shape=()
bop_55 = relay.right_shift(uop_53.astype('int8'), var_52.astype('int8')) # shape=()
uop_58 = relay.asin(bop_55.astype('float64')) # shape=()
uop_60 = relay.sqrt(uop_58.astype('float64')) # shape=()
bop_62 = relay.minimum(uop_60.astype('uint32'), bop_55.astype('uint32')) # shape=()
bop_65 = relay.left_shift(uop_58.astype('int16'), var_52.astype('int16')) # shape=()
bop_68 = relay.maximum(bop_65.astype('int32'), bop_55.astype('int32')) # shape=()
const_71 = relay.const([[-2.294214,7.017932,9.966073,-5.409430,1.706578,3.566010,7.936267,-2.823633,5.506962,3.773743,-3.031341,0.176839],[3.655381,9.748239,8.746087,-2.818533,1.123394,-6.457789,1.467909,-4.307613,-1.044074,4.699796,-0.370161,-6.579865],[8.846060,-3.612701,-4.090735,4.079694,-4.758285,7.943531,-9.272444,7.711438,6.969953,-0.938911,-9.319736,-6.529958],[4.896423,-2.870608,0.889636,2.871625,3.485763,-6.860462,4.778045,5.255364,4.314825,-8.928520,-1.955577,2.603689],[4.865167,-4.859664,-3.039260,-9.588856,0.745802,7.786615,5.483002,8.171095,-0.268963,-8.242175,-0.529204,9.329316],[1.859337,2.646619,6.713847,1.540727,-4.712183,-1.398685,-2.165268,-4.223158,-2.776791,-8.771790,-8.816709,-4.731683],[-5.563081,9.870730,-4.074325,-0.429934,-2.990400,-5.657562,-0.741453,-4.140980,7.322859,4.602950,5.477968,5.538332],[-5.989783,9.839848,-2.372613,8.973249,8.673559,6.876949,-1.623149,9.464715,0.884260,-8.248359,4.574203,-7.948765],[-3.704226,3.830206,-8.175752,0.555434,-4.369851,6.654566,-9.980292,6.750835,9.592468,0.234761,-5.157266,-3.817722],[-4.996043,1.370000,8.696429,6.882695,-7.123367,8.372113,9.217683,3.029472,-7.419679,-1.573372,3.070332,-1.268506],[-8.465358,-1.168976,-2.049662,-8.538004,-1.664559,-4.599726,-4.255510,2.547675,-4.526868,4.301558,5.559267,-8.012046],[8.862309,-4.033031,-1.088907,-5.587410,-0.295918,-5.735058,0.328491,-4.831175,-6.464563,-5.274233,-9.872878,0.896427],[-1.830040,-2.411516,2.105463,5.605703,-2.174541,-1.355836,-3.851208,1.765650,5.591666,9.882321,3.990094,-4.924006],[1.242946,-3.259521,-3.743620,-9.760881,-9.678479,-2.043733,0.490862,-3.258002,3.460204,3.789260,2.191019,3.917187],[-5.437652,-1.817365,-0.951616,3.565945,5.492675,6.968698,-9.036460,-7.346411,-4.253656,-1.705120,0.422408,7.130841]], dtype = "float64")#candidate|71|(15, 12)|const|float64
bop_72 = relay.greater_equal(uop_60.astype('bool'), const_71.astype('bool')) # shape=(15, 12)
bop_75 = relay.minimum(uop_58.astype('int32'), bop_65.astype('int32')) # shape=()
bop_78 = relay.right_shift(bop_65.astype('int8'), bop_68.astype('int8')) # shape=()
func_46_call = mod.get_global_var('func_46')
func_50_call = mutated_mod.get_global_var('func_50')
var_82 = relay.var("var_82", dtype = "uint32", shape = (64,))#candidate|82|(64,)|var|uint32
call_81 = relay.TupleGetItem(func_46_call(relay.reshape(var_82.astype('uint32'), [8, 8]), relay.reshape(var_82.astype('float32'), [8, 8]), ), 6)
call_83 = relay.TupleGetItem(func_50_call(relay.reshape(var_82.astype('uint32'), [8, 8]), relay.reshape(var_82.astype('float32'), [8, 8]), ), 6)
var_84 = relay.var("var_84", dtype = "bool", shape = (15, 12))#candidate|84|(15, 12)|var|bool
bop_85 = relay.logical_and(bop_72.astype('bool'), relay.reshape(var_84.astype('bool'), relay.shape_of(bop_72))) # shape=(15, 12)
bop_88 = relay.logical_or(bop_55.astype('bool'), bop_65.astype('bool')) # shape=()
var_91 = relay.var("var_91", dtype = "int8", shape = (9, 7))#candidate|91|(9, 7)|var|int8
bop_92 = relay.maximum(bop_55.astype('uint64'), var_91.astype('uint64')) # shape=(9, 7)
uop_95 = relay.rsqrt(bop_78.astype('float64')) # shape=()
uop_97 = relay.log(uop_53.astype('float32')) # shape=()
uop_99 = relay.asinh(var_91.astype('float32')) # shape=(9, 7)
var_101 = relay.var("var_101", dtype = "float32", shape = (8, 1, 7))#candidate|101|(8, 1, 7)|var|float32
bop_102 = relay.subtract(var_52.astype('int8'), var_101.astype('int8')) # shape=(8, 1, 7)
uop_105 = relay.log2(bop_72.astype('float32')) # shape=(15, 12)
uop_107 = relay.log(uop_105.astype('float32')) # shape=(15, 12)
var_109 = relay.var("var_109", dtype = "float32", shape = (15, 12))#candidate|109|(15, 12)|var|float32
bop_110 = relay.greater(uop_107.astype('bool'), relay.reshape(var_109.astype('bool'), relay.shape_of(uop_107))) # shape=(15, 12)
bop_113 = relay.maximum(bop_75.astype('int32'), uop_107.astype('int32')) # shape=(15, 12)
var_116 = relay.var("var_116", dtype = "bool", shape = (15, 12))#candidate|116|(15, 12)|var|bool
bop_117 = relay.subtract(bop_85.astype('int8'), relay.reshape(var_116.astype('int8'), relay.shape_of(bop_85))) # shape=(15, 12)
const_120 = relay.const([[True,True,False,False,False,False,True,True,True,False,True,True],[True,False,True,False,True,False,False,False,False,False,False,False],[False,True,True,True,False,True,True,True,False,True,False,True],[False,True,False,True,True,True,False,True,True,True,True,False],[True,True,True,True,False,True,True,False,False,False,True,False],[True,False,True,True,True,True,False,True,False,False,False,False],[True,False,True,False,True,False,True,False,True,False,True,True],[True,False,True,True,False,False,True,True,False,False,True,False],[False,True,True,False,False,False,False,True,False,True,False,False],[True,True,False,True,True,False,False,False,False,False,True,True],[False,False,False,True,False,True,True,False,True,False,True,True],[False,True,False,True,True,False,True,False,True,True,True,False],[True,False,False,False,False,True,True,False,True,True,True,False],[True,False,False,False,True,True,True,True,True,True,False,False],[False,True,False,True,True,False,False,False,False,False,False,False]], dtype = "bool")#candidate|120|(15, 12)|const|bool
bop_121 = relay.floor_divide(bop_110.astype('float32'), relay.reshape(const_120.astype('float32'), relay.shape_of(bop_110))) # shape=(15, 12)
var_124 = relay.var("var_124", dtype = "bool", shape = (15, 12))#candidate|124|(15, 12)|var|bool
bop_125 = relay.power(bop_110.astype('float32'), relay.reshape(var_124.astype('float32'), relay.shape_of(bop_110))) # shape=(15, 12)
bop_128 = relay.not_equal(uop_95.astype('bool'), bop_68.astype('bool')) # shape=()
uop_131 = relay.acosh(uop_105.astype('float64')) # shape=(15, 12)
var_133 = relay.var("var_133", dtype = "float32", shape = (15, 12))#candidate|133|(15, 12)|var|float32
bop_134 = relay.logical_or(uop_107.astype('bool'), relay.reshape(var_133.astype('bool'), relay.shape_of(uop_107))) # shape=(15, 12)
const_137 = relay.const([[5.929378,-8.285467,9.946058,-2.691579,-1.723651,-4.691991,-7.908805,8.892360,-1.285990,-9.303415,-5.515179,-7.921497],[7.252979,1.911454,-8.740908,-0.395055,9.608393,3.888370,-7.345876,-6.641931,-7.581777,-6.502795,-1.265953,5.407382],[-5.702911,-5.188205,-6.824915,9.018184,4.172720,3.198558,4.425928,-6.594038,-3.072384,6.070115,7.065326,-4.900538],[3.197085,6.829327,-4.896011,-0.244112,-0.203398,9.272026,2.166564,7.358657,-8.830515,1.519375,-4.111626,-8.157424],[0.399047,4.647185,8.850633,-6.527685,9.786624,-7.115681,-3.642739,-4.894002,1.570578,1.988234,-2.868003,-7.758589],[8.997111,6.743231,0.596834,-3.727519,2.180125,6.712088,0.965864,6.971669,4.897043,-3.120861,1.218328,3.641462],[5.457468,0.243933,0.007916,-9.125250,0.019311,-0.527021,1.393782,8.380373,-6.494625,0.377704,-5.181481,-0.560718],[-3.209163,9.595797,-8.885409,-9.876020,1.269102,1.263378,0.477176,2.901766,1.367082,9.804401,9.825359,-1.713517],[-1.257124,8.859313,-7.797958,-5.609423,9.388331,-9.792764,-0.345825,2.988079,1.713885,-2.284016,-2.616713,5.593281],[7.198562,-7.445795,-8.851734,0.621899,-8.632359,8.934724,-7.622121,0.890476,-0.936318,8.558453,-7.620613,-3.110505],[-3.170243,5.080276,6.614411,-0.124648,3.125177,4.183207,2.631408,-1.456846,0.748849,2.344244,-3.770938,5.409219],[-6.774130,4.978038,4.941753,-9.966995,8.830926,-7.202803,5.127581,0.005645,1.025702,-3.775897,0.710465,-9.697910],[-1.681611,5.532540,-4.922949,6.483729,4.532913,-5.410984,7.260237,-3.330313,-1.538503,3.529704,-1.101596,-7.525745],[2.925482,-4.911082,-6.707551,1.066405,-9.951149,9.297235,-3.609352,-3.356309,2.364233,-1.085881,2.929068,8.655509],[-7.165429,2.586072,-6.196713,-2.198241,-5.624106,-3.151668,-7.309944,-0.767375,-3.924078,1.299635,-3.084045,1.681369]], dtype = "float32")#candidate|137|(15, 12)|const|float32
bop_138 = relay.subtract(uop_105.astype('uint16'), relay.reshape(const_137.astype('uint16'), relay.shape_of(uop_105))) # shape=(15, 12)
bop_141 = relay.less_equal(uop_131.astype('bool'), bop_88.astype('bool')) # shape=(15, 12)
output = relay.Tuple([bop_62,call_81,var_82,bop_92,uop_97,uop_99,bop_102,bop_113,bop_117,bop_121,bop_125,bop_128,bop_134,bop_138,bop_141,])
output2 = relay.Tuple([bop_62,call_83,var_82,bop_92,uop_97,uop_99,bop_102,bop_113,bop_117,bop_121,bop_125,bop_128,bop_134,bop_138,bop_141,])
func_144 = relay.Function([var_52,var_82,var_84,var_91,var_101,var_109,var_116,var_124,var_133,], output)
mod['func_144'] = func_144
mod = relay.transform.InferType()(mod)
mutated_mod['func_144'] = func_144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_144_call = mutated_mod.get_global_var('func_144')
var_146 = relay.var("var_146", dtype = "float32", shape = ())#candidate|146|()|var|float32
var_147 = relay.var("var_147", dtype = "uint32", shape = (64,))#candidate|147|(64,)|var|uint32
var_148 = relay.var("var_148", dtype = "bool", shape = (15, 12))#candidate|148|(15, 12)|var|bool
var_149 = relay.var("var_149", dtype = "int8", shape = (9, 7))#candidate|149|(9, 7)|var|int8
var_150 = relay.var("var_150", dtype = "float32", shape = (8, 1, 7))#candidate|150|(8, 1, 7)|var|float32
var_151 = relay.var("var_151", dtype = "float32", shape = (15, 12))#candidate|151|(15, 12)|var|float32
var_152 = relay.var("var_152", dtype = "bool", shape = (15, 12))#candidate|152|(15, 12)|var|bool
var_153 = relay.var("var_153", dtype = "bool", shape = (15, 12))#candidate|153|(15, 12)|var|bool
var_154 = relay.var("var_154", dtype = "float32", shape = (15, 12))#candidate|154|(15, 12)|var|float32
call_145 = func_144_call(var_146,var_147,var_148,var_149,var_150,var_151,var_152,var_153,var_154,)
output = call_145
func_155 = relay.Function([var_146,var_147,var_148,var_149,var_150,var_151,var_152,var_153,var_154,], output)
mutated_mod['func_155'] = func_155
mutated_mod = relay.transform.InferType()(mutated_mod)
var_157 = relay.var("var_157", dtype = "float64", shape = (8, 6, 13))#candidate|157|(8, 6, 13)|var|float64
uop_158 = relay.sqrt(var_157.astype('float64')) # shape=(8, 6, 13)
uop_160 = relay.log10(var_157.astype('float64')) # shape=(8, 6, 13)
output = relay.Tuple([uop_158,uop_160,])
output2 = relay.Tuple([uop_158,uop_160,])
func_162 = relay.Function([var_157,], output)
mod['func_162'] = func_162
mod = relay.transform.InferType()(mod)
var_163 = relay.var("var_163", dtype = "float64", shape = (8, 6, 13))#candidate|163|(8, 6, 13)|var|float64
output = func_162(var_163)
func_164 = relay.Function([var_163], output)
mutated_mod['func_164'] = func_164
mutated_mod = relay.transform.InferType()(mutated_mod)
var_166 = relay.var("var_166", dtype = "float64", shape = ())#candidate|166|()|var|float64
var_167 = relay.var("var_167", dtype = "float64", shape = (10, 13))#candidate|167|(10, 13)|var|float64
bop_168 = relay.floor_divide(var_166.astype('float64'), var_167.astype('float64')) # shape=(10, 13)
uop_171 = relay.asinh(bop_168.astype('float64')) # shape=(10, 13)
uop_173 = relay.sin(uop_171.astype('float64')) # shape=(10, 13)
bop_175 = relay.mod(uop_173.astype('float64'), relay.reshape(var_167.astype('float64'), relay.shape_of(uop_173))) # shape=(10, 13)
uop_178 = relay.sqrt(bop_175.astype('float32')) # shape=(10, 13)
output = relay.Tuple([uop_178,])
output2 = relay.Tuple([uop_178,])
func_180 = relay.Function([var_166,var_167,], output)
mod['func_180'] = func_180
mod = relay.transform.InferType()(mod)
var_181 = relay.var("var_181", dtype = "float64", shape = ())#candidate|181|()|var|float64
var_182 = relay.var("var_182", dtype = "float64", shape = (10, 13))#candidate|182|(10, 13)|var|float64
output = func_180(var_181,var_182,)
func_183 = relay.Function([var_181,var_182,], output)
mutated_mod['func_183'] = func_183
mutated_mod = relay.transform.InferType()(mutated_mod)
var_185 = relay.var("var_185", dtype = "float32", shape = (9,))#candidate|185|(9,)|var|float32
uop_186 = relay.sqrt(var_185.astype('float32')) # shape=(9,)
func_144_call = mod.get_global_var('func_144')
func_155_call = mutated_mod.get_global_var('func_155')
var_189 = relay.var("var_189", dtype = "float32", shape = ())#candidate|189|()|var|float32
const_190 = relay.const([[-3,10,-7,4,-8,-10,1,1],[6,-3,6,-1,6,1,-1,-8],[7,6,-1,-4,9,10,-3,7],[10,-2,-7,-3,6,-2,-8,-3],[10,-8,8,-2,6,-8,-4,-10],[6,-3,4,6,1,-7,10,-3],[-9,-1,-3,-5,-8,-7,9,-9],[9,8,7,3,3,8,-2,-4]], dtype = "uint32")#candidate|190|(8, 8)|const|uint32
const_191 = relay.const([True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True], dtype = "bool")#candidate|191|(180,)|const|bool
var_192 = relay.var("var_192", dtype = "int8", shape = (7, 9))#candidate|192|(7, 9)|var|int8
var_193 = relay.var("var_193", dtype = "float32", shape = (1, 56))#candidate|193|(1, 56)|var|float32
call_188 = relay.TupleGetItem(func_144_call(relay.reshape(var_189.astype('float32'), []), relay.reshape(const_190.astype('uint32'), [64,]), relay.reshape(const_191.astype('bool'), [15, 12]), relay.reshape(var_192.astype('int8'), [9, 7]), relay.reshape(var_193.astype('float32'), [8, 1, 7]), relay.reshape(const_191.astype('float32'), [15, 12]), relay.reshape(const_191.astype('bool'), [15, 12]), relay.reshape(const_191.astype('bool'), [15, 12]), relay.reshape(const_191.astype('float32'), [15, 12]), ), 8)
call_194 = relay.TupleGetItem(func_155_call(relay.reshape(var_189.astype('float32'), []), relay.reshape(const_190.astype('uint32'), [64,]), relay.reshape(const_191.astype('bool'), [15, 12]), relay.reshape(var_192.astype('int8'), [9, 7]), relay.reshape(var_193.astype('float32'), [8, 1, 7]), relay.reshape(const_191.astype('float32'), [15, 12]), relay.reshape(const_191.astype('bool'), [15, 12]), relay.reshape(const_191.astype('bool'), [15, 12]), relay.reshape(const_191.astype('float32'), [15, 12]), ), 8)
bop_195 = relay.logical_or(const_191.astype('bool'), var_189.astype('bool')) # shape=(180,)
bop_198 = relay.left_shift(uop_186.astype('int8'), relay.reshape(var_185.astype('int8'), relay.shape_of(uop_186))) # shape=(9,)
bop_201 = relay.less(call_188.astype('bool'), relay.reshape(const_191.astype('bool'), relay.shape_of(call_188))) # shape=(15, 12)
bop_204 = relay.less(call_194.astype('bool'), relay.reshape(const_191.astype('bool'), relay.shape_of(call_194))) # shape=(15, 12)
uop_205 = relay.log2(uop_186.astype('float32')) # shape=(9,)
func_46_call = mod.get_global_var('func_46')
func_50_call = mutated_mod.get_global_var('func_50')
call_207 = relay.TupleGetItem(func_46_call(relay.reshape(const_190.astype('uint32'), [8, 8]), relay.reshape(const_190.astype('float32'), [8, 8]), ), 3)
call_208 = relay.TupleGetItem(func_50_call(relay.reshape(const_190.astype('uint32'), [8, 8]), relay.reshape(const_190.astype('float32'), [8, 8]), ), 3)
uop_209 = relay.sigmoid(bop_198.astype('float32')) # shape=(9,)
output = relay.Tuple([const_190,var_192,var_193,bop_195,bop_201,uop_205,call_207,uop_209,])
output2 = relay.Tuple([const_190,var_192,var_193,bop_195,bop_204,uop_205,call_208,uop_209,])
func_211 = relay.Function([var_185,var_189,var_192,var_193,], output)
mod['func_211'] = func_211
mod = relay.transform.InferType()(mod)
var_212 = relay.var("var_212", dtype = "float32", shape = (9,))#candidate|212|(9,)|var|float32
var_213 = relay.var("var_213", dtype = "float32", shape = ())#candidate|213|()|var|float32
var_214 = relay.var("var_214", dtype = "int8", shape = (7, 9))#candidate|214|(7, 9)|var|int8
var_215 = relay.var("var_215", dtype = "float32", shape = (1, 56))#candidate|215|(1, 56)|var|float32
output = func_211(var_212,var_213,var_214,var_215,)
func_216 = relay.Function([var_212,var_213,var_214,var_215,], output)
mutated_mod['func_216'] = func_216
mutated_mod = relay.transform.InferType()(mutated_mod)
var_218 = relay.var("var_218", dtype = "float64", shape = (10,))#candidate|218|(10,)|var|float64
uop_219 = relay.tan(var_218.astype('float64')) # shape=(10,)
uop_221 = relay.asinh(var_218.astype('float64')) # shape=(10,)
const_223 = relay.const([7.515873,7.954337,9.467695,-4.804376,-1.644084,0.337720,-0.778045,9.826444,-9.257359,-5.260826], dtype = "float64")#candidate|223|(10,)|const|float64
bop_224 = relay.floor_divide(uop_221.astype('float32'), relay.reshape(const_223.astype('float32'), relay.shape_of(uop_221))) # shape=(10,)
var_227 = relay.var("var_227", dtype = "float64", shape = (10,))#candidate|227|(10,)|var|float64
bop_228 = relay.floor_mod(var_218.astype('float64'), relay.reshape(var_227.astype('float64'), relay.shape_of(var_218))) # shape=(10,)
var_231 = relay.var("var_231", dtype = "float32", shape = (10,))#candidate|231|(10,)|var|float32
bop_232 = relay.maximum(bop_224.astype('float32'), relay.reshape(var_231.astype('float32'), relay.shape_of(bop_224))) # shape=(10,)
bop_235 = relay.less_equal(bop_228.astype('bool'), relay.reshape(var_231.astype('bool'), relay.shape_of(bop_228))) # shape=(10,)
bop_238 = relay.multiply(uop_219.astype('int16'), relay.reshape(uop_221.astype('int16'), relay.shape_of(uop_219))) # shape=(10,)
bop_241 = relay.left_shift(uop_221.astype('uint32'), relay.reshape(const_223.astype('uint32'), relay.shape_of(uop_221))) # shape=(10,)
output = relay.Tuple([bop_232,bop_235,bop_238,bop_241,])
output2 = relay.Tuple([bop_232,bop_235,bop_238,bop_241,])
func_244 = relay.Function([var_218,var_227,var_231,], output)
mod['func_244'] = func_244
mod = relay.transform.InferType()(mod)
mutated_mod['func_244'] = func_244
mutated_mod = relay.transform.InferType()(mutated_mod)
func_244_call = mutated_mod.get_global_var('func_244')
var_246 = relay.var("var_246", dtype = "float64", shape = (10,))#candidate|246|(10,)|var|float64
var_247 = relay.var("var_247", dtype = "float64", shape = (10,))#candidate|247|(10,)|var|float64
var_248 = relay.var("var_248", dtype = "float32", shape = (10,))#candidate|248|(10,)|var|float32
call_245 = func_244_call(var_246,var_247,var_248,)
output = call_245
func_249 = relay.Function([var_246,var_247,var_248,], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
const_251 = relay.const([-6,-1,-5,5,6,-7,9,-2,8,-7], dtype = "int8")#candidate|251|(10,)|const|int8
var_252 = relay.var("var_252", dtype = "int8", shape = (10,))#candidate|252|(10,)|var|int8
bop_253 = relay.bitwise_and(const_251.astype('int8'), relay.reshape(var_252.astype('int8'), relay.shape_of(const_251))) # shape=(10,)
uop_256 = relay.asin(const_251.astype('float32')) # shape=(10,)
uop_258 = relay.acosh(uop_256.astype('float64')) # shape=(10,)
bop_260 = relay.minimum(uop_258.astype('float64'), relay.reshape(uop_256.astype('float64'), relay.shape_of(uop_258))) # shape=(10,)
var_263 = relay.var("var_263", dtype = "float64", shape = (10,))#candidate|263|(10,)|var|float64
bop_264 = relay.floor_mod(bop_260.astype('float64'), relay.reshape(var_263.astype('float64'), relay.shape_of(bop_260))) # shape=(10,)
output = relay.Tuple([bop_253,bop_264,])
output2 = relay.Tuple([bop_253,bop_264,])
func_267 = relay.Function([var_252,var_263,], output)
mod['func_267'] = func_267
mod = relay.transform.InferType()(mod)
mutated_mod['func_267'] = func_267
mutated_mod = relay.transform.InferType()(mutated_mod)
func_267_call = mutated_mod.get_global_var('func_267')
var_269 = relay.var("var_269", dtype = "int8", shape = (10,))#candidate|269|(10,)|var|int8
var_270 = relay.var("var_270", dtype = "float64", shape = (10,))#candidate|270|(10,)|var|float64
call_268 = func_267_call(var_269,var_270,)
output = call_268
func_271 = relay.Function([var_269,var_270,], output)
mutated_mod['func_271'] = func_271
mutated_mod = relay.transform.InferType()(mutated_mod)
var_273 = relay.var("var_273", dtype = "float32", shape = (15,))#candidate|273|(15,)|var|float32
var_274 = relay.var("var_274", dtype = "float32", shape = (15,))#candidate|274|(15,)|var|float32
bop_275 = relay.not_equal(var_273.astype('bool'), relay.reshape(var_274.astype('bool'), relay.shape_of(var_273))) # shape=(15,)
bop_278 = relay.subtract(var_273.astype('uint64'), relay.reshape(var_274.astype('uint64'), relay.shape_of(var_273))) # shape=(15,)
bop_281 = relay.power(bop_278.astype('float64'), relay.reshape(var_273.astype('float64'), relay.shape_of(bop_278))) # shape=(15,)
var_284 = relay.var("var_284", dtype = "float64", shape = (15,))#candidate|284|(15,)|var|float64
bop_285 = relay.bitwise_or(bop_281.astype('uint8'), relay.reshape(var_284.astype('uint8'), relay.shape_of(bop_281))) # shape=(15,)
bop_288 = relay.left_shift(bop_281.astype('int32'), relay.reshape(var_284.astype('int32'), relay.shape_of(bop_281))) # shape=(15,)
func_211_call = mod.get_global_var('func_211')
func_216_call = mutated_mod.get_global_var('func_216')
const_292 = relay.const([[9.279349,5.475268,-3.584276],[3.634357,9.363694,-6.363133],[-5.385178,-1.529971,0.150602]], dtype = "float32")#candidate|292|(3, 3)|const|float32
var_293 = relay.var("var_293", dtype = "float32", shape = ())#candidate|293|()|var|float32
const_294 = relay.const([5,2,-3,2,4,-8,5,3,-1,2,1,5,-10,-6,-1,10,3,7,-4,7,-2,-2,8,-5,-2,-6,-4,8,-5,2,1,9,5,-9,6,6,-4,5,4,10,6,1,-6,-3,-1,-4,-8,-6,10,1,-3,4,-7,-7,8,9,5,3,6,2,-2,2,1], dtype = "int8")#candidate|294|(63,)|const|int8
var_295 = relay.var("var_295", dtype = "float32", shape = (56,))#candidate|295|(56,)|var|float32
call_291 = relay.TupleGetItem(func_211_call(relay.reshape(const_292.astype('float32'), [9,]), relay.reshape(var_293.astype('float32'), []), relay.reshape(const_294.astype('int8'), [7, 9]), relay.reshape(var_295.astype('float32'), [1, 56]), ), 2)
call_296 = relay.TupleGetItem(func_216_call(relay.reshape(const_292.astype('float32'), [9,]), relay.reshape(var_293.astype('float32'), []), relay.reshape(const_294.astype('int8'), [7, 9]), relay.reshape(var_295.astype('float32'), [1, 56]), ), 2)
uop_297 = relay.cosh(var_273.astype('float32')) # shape=(15,)
uop_299 = relay.rsqrt(uop_297.astype('float32')) # shape=(15,)
uop_301 = relay.asinh(uop_299.astype('float32')) # shape=(15,)
bop_303 = relay.floor_mod(bop_285.astype('float64'), var_293.astype('float64')) # shape=(15,)
bop_306 = relay.bitwise_xor(uop_299.astype('int32'), relay.reshape(bop_278.astype('int32'), relay.shape_of(uop_299))) # shape=(15,)
var_309 = relay.var("var_309", dtype = "int32", shape = (15,))#candidate|309|(15,)|var|int32
bop_310 = relay.bitwise_or(bop_306.astype('int32'), relay.reshape(var_309.astype('int32'), relay.shape_of(bop_306))) # shape=(15,)
uop_313 = relay.sinh(bop_310.astype('float64')) # shape=(15,)
var_315 = relay.var("var_315", dtype = "float64", shape = (15,))#candidate|315|(15,)|var|float64
bop_316 = relay.less(uop_313.astype('bool'), relay.reshape(var_315.astype('bool'), relay.shape_of(uop_313))) # shape=(15,)
uop_319 = relay.acos(bop_316.astype('float64')) # shape=(15,)
func_162_call = mod.get_global_var('func_162')
func_164_call = mutated_mod.get_global_var('func_164')
var_322 = relay.var("var_322", dtype = "float64", shape = (624,))#candidate|322|(624,)|var|float64
call_321 = relay.TupleGetItem(func_162_call(relay.reshape(var_322.astype('float64'), [8, 6, 13])), 0)
call_323 = relay.TupleGetItem(func_164_call(relay.reshape(var_322.astype('float64'), [8, 6, 13])), 0)
uop_324 = relay.atan(uop_319.astype('float64')) # shape=(15,)
bop_326 = relay.subtract(uop_324.astype('int8'), relay.reshape(uop_319.astype('int8'), relay.shape_of(uop_324))) # shape=(15,)
uop_329 = relay.erf(uop_297.astype('float64')) # shape=(15,)
uop_331 = relay.acos(uop_319.astype('float64')) # shape=(15,)
var_333 = relay.var("var_333", dtype = "float64", shape = (15,))#candidate|333|(15,)|var|float64
bop_334 = relay.bitwise_or(uop_331.astype('int32'), relay.reshape(var_333.astype('int32'), relay.shape_of(uop_331))) # shape=(15,)
bop_337 = relay.minimum(bop_316.astype('int64'), relay.reshape(var_315.astype('int64'), relay.shape_of(bop_316))) # shape=(15,)
uop_340 = relay.cosh(uop_324.astype('float64')) # shape=(15,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_342 = relay.TupleGetItem(func_8_call(relay.reshape(var_293.astype('int8'), [])), 1)
call_343 = relay.TupleGetItem(func_11_call(relay.reshape(var_293.astype('int8'), [])), 1)
uop_344 = relay.log10(uop_319.astype('float32')) # shape=(15,)
bop_346 = relay.mod(uop_340.astype('float64'), relay.reshape(bop_326.astype('float64'), relay.shape_of(uop_340))) # shape=(15,)
const_349 = relay.const([-5.241550,-9.871011,8.198003,-8.589165,8.738190,5.276620,7.473690,9.415278,6.044228,0.842484,5.799858,-2.961042,1.290598,1.370244,0.719237], dtype = "float64")#candidate|349|(15,)|const|float64
bop_350 = relay.not_equal(uop_319.astype('bool'), relay.reshape(const_349.astype('bool'), relay.shape_of(uop_319))) # shape=(15,)
uop_353 = relay.cos(bop_326.astype('float32')) # shape=(15,)
bop_355 = relay.maximum(uop_319.astype('int16'), var_293.astype('int16')) # shape=(15,)
var_358 = relay.var("var_358", dtype = "float64", shape = (15,))#candidate|358|(15,)|var|float64
bop_359 = relay.divide(uop_331.astype('float64'), relay.reshape(var_358.astype('float64'), relay.shape_of(uop_331))) # shape=(15,)
uop_362 = relay.asinh(bop_346.astype('float64')) # shape=(15,)
var_364 = relay.var("var_364", dtype = "float64", shape = (15,))#candidate|364|(15,)|var|float64
bop_365 = relay.right_shift(uop_331.astype('uint8'), relay.reshape(var_364.astype('uint8'), relay.shape_of(uop_331))) # shape=(15,)
uop_368 = relay.asinh(uop_362.astype('float32')) # shape=(15,)
const_370 = relay.const([-8.884487,-9.704944,8.381703,2.520829,-8.853480,9.012531,-9.658544,-8.374415,7.328076,4.945757,0.616435,-5.190912,0.526405,7.161325,9.489803], dtype = "float32")#candidate|370|(15,)|const|float32
bop_371 = relay.right_shift(uop_353.astype('uint64'), relay.reshape(const_370.astype('uint64'), relay.shape_of(uop_353))) # shape=(15,)
bop_374 = relay.power(uop_368.astype('float64'), relay.reshape(bop_337.astype('float64'), relay.shape_of(uop_368))) # shape=(15,)
bop_377 = relay.less(bop_374.astype('bool'), var_293.astype('bool')) # shape=(15,)
output = relay.Tuple([bop_275,bop_288,call_291,const_292,const_294,var_295,uop_301,bop_303,call_321,var_322,uop_329,bop_334,call_342,uop_344,bop_350,bop_355,bop_359,bop_365,bop_371,bop_377,])
output2 = relay.Tuple([bop_275,bop_288,call_296,const_292,const_294,var_295,uop_301,bop_303,call_323,var_322,uop_329,bop_334,call_343,uop_344,bop_350,bop_355,bop_359,bop_365,bop_371,bop_377,])
F = relay.Function([var_273,var_274,var_284,var_293,var_295,var_309,var_315,var_322,var_333,var_358,var_364,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_273,var_274,var_284,var_293,var_295,var_309,var_315,var_322,var_333,var_358,var_364,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_273= np.array([-2.222635,-0.344541,8.248460,-2.180000,-0.275806,-4.097283,-8.409555,2.018208,-9.425517,-2.684010,6.472379,3.900920,-8.134966,-3.554760,9.719661], dtype='float32')
module1.set_input('var_273', input_273)
input_274= np.array([5.920038,9.318198,-4.896278,9.445655,4.388727,2.980376,2.193111,5.089149,-6.014365,2.280755,7.585592,7.049994,-8.075415,0.040673,-0.599305], dtype='float32')
module1.set_input('var_274', input_274)
input_284= np.array([-9.417898,2.201449,2.285660,1.349235,-1.689823,-7.913596,-1.167677,8.389865,-1.674251,1.712104,-4.338502,1.061951,-0.367045,-3.577459,-4.380559], dtype='float64')
module1.set_input('var_284', input_284)
input_293= np.array(-5.763646, dtype='float32')
module1.set_input('var_293', input_293)
input_295= np.array([-6.042660,-1.770375,7.676825,3.044953,-0.550368,-0.226810,3.400316,-9.589429,7.702648,5.574728,2.654705,5.221391,-6.853818,8.977675,-6.644875,-2.894378,1.738782,5.244172,-0.002245,7.051580,-2.415553,9.845143,5.788125,-7.094399,4.254620,6.295569,-5.034884,-7.806292,-6.210618,7.196373,-5.013005,9.578994,-2.621500,-0.143596,8.192992,5.921913,6.226184,1.416823,-1.327053,9.157885,7.319225,-7.386312,-8.371535,6.382700,0.443913,5.832109,-9.715006,5.834645,7.344044,2.352572,3.028087,5.685938,2.672481,-3.325360,-3.609767,8.670249], dtype='float32')
module1.set_input('var_295', input_295)
input_309= np.array([8,1,-7,-5,-1,-2,8,10,5,7,-2,-1,-2,-4,5], dtype='int32')
module1.set_input('var_309', input_309)
input_315= np.array([-1.592620,-6.705121,3.764332,-5.846444,-8.306255,3.767381,8.569934,-2.425223,-9.486573,-2.172448,0.915593,4.301750,3.723111,4.153332,-0.866152], dtype='float64')
module1.set_input('var_315', input_315)
input_322= np.array([-7.802271,3.319001,-9.105750,9.191741,4.325420,-5.346488,-8.637675,-2.732193,-0.554484,7.858343,1.495773,8.065921,6.425926,-5.970968,5.531273,0.051742,0.935834,-6.056325,-0.087613,7.422577,0.891974,-5.529680,7.773200,2.140183,-9.293086,-9.360099,0.983463,-3.618138,-4.351689,6.542530,0.962429,-0.582685,9.626332,-9.494139,-5.258451,7.516470,3.920957,4.140935,-5.774052,4.224141,2.542183,-1.439241,1.184753,8.294777,3.398485,-9.426165,-2.192861,-2.971571,2.110247,5.811770,-5.035113,-9.959483,-9.858342,-2.095536,-7.538114,1.128458,-2.437514,-7.063106,9.639106,4.736036,4.255392,8.383326,-1.548417,5.950227,4.194168,4.604914,-9.337994,8.240269,0.636958,7.217916,4.042594,-6.343315,5.333316,-6.480601,-4.113550,2.992087,4.035572,5.384267,-1.382109,3.973758,8.869831,3.885831,-6.111563,6.707637,3.567249,5.629547,5.164572,-8.811797,6.118420,9.591582,-3.278941,5.685834,-9.136921,-0.768728,2.529078,-6.117874,-1.084609,-8.250075,-7.699591,7.461712,4.689232,0.605766,-3.736898,8.876020,-3.812659,5.139440,3.471623,-0.371541,-3.669279,0.213630,-5.137017,-7.242894,4.724822,-1.364416,-0.244851,5.899356,-9.996796,2.252477,-0.215098,-8.739001,1.949959,-8.151223,-4.225071,-2.277201,6.558472,1.420662,7.452606,-8.115762,-4.056051,3.155940,-9.106826,-6.923791,9.751167,4.566098,-0.583139,-7.059972,-4.154853,5.573517,4.069133,3.507154,1.498487,-7.412172,-4.041293,9.831409,7.225444,-5.143873,-9.216910,2.107068,-0.710838,3.307813,-8.090860,-2.166565,-3.707384,-0.688070,-1.804236,-0.652778,-9.479992,-7.106435,-1.178952,7.657116,-2.571753,8.051347,2.349933,-4.409706,-2.398150,-4.243000,1.671103,5.851515,-6.492627,7.413147,9.476497,-0.300674,4.379451,-2.261981,4.045422,7.418160,8.057436,-9.036070,3.870659,-9.101550,-1.824018,6.838800,-1.008783,-0.121583,-2.016021,8.129187,5.512672,4.299157,-6.108196,-7.325139,6.883755,-1.935805,1.237756,7.315533,9.918447,-2.035253,5.200786,-2.726064,-6.367867,-2.495155,-6.330926,-8.593461,-9.675782,-1.378233,6.556636,-8.324452,0.023773,-3.132256,0.989312,3.824049,9.696424,-6.438474,9.139830,-1.386247,3.365030,-1.265791,-6.970618,-3.436077,-4.881950,-1.508783,0.288898,9.241526,1.284969,7.673149,6.316121,8.545102,-8.290159,0.473790,-5.423465,8.785913,7.132850,-8.463606,-8.899226,-4.872496,8.691031,6.691924,3.522934,1.586277,-3.557951,5.120308,-5.034454,-6.555693,-7.637542,-7.091696,-0.108932,8.136538,-2.004578,9.281215,-8.328815,3.314098,-0.327322,-2.647691,1.773606,-2.647922,5.972923,-4.958675,4.824259,-4.130040,-0.623690,-3.419264,2.011891,-4.594392,1.418839,-3.923284,0.494539,-9.549004,-9.131413,9.119215,-2.932316,6.455336,7.648380,5.882413,7.163977,8.741950,4.135677,-9.645300,8.555220,-8.241094,-3.475436,-1.588279,-4.254834,-0.138943,3.768947,7.139630,8.676107,6.486685,-6.901633,0.521585,2.960861,2.475711,7.257609,0.348175,6.702725,3.001747,-4.545487,5.098031,-3.521509,-9.855670,-8.936461,-5.067395,-3.606769,-6.038967,-9.895978,-9.134867,-6.328169,-8.973648,1.785144,-7.510832,9.506217,6.856789,8.177313,8.459082,-2.251128,-9.707609,2.425866,-3.141245,-3.399203,-9.916060,1.658748,-2.114975,-4.068280,1.531606,-4.991572,-8.258605,0.079349,-3.543234,4.659264,0.760506,5.684349,-0.169082,-6.102415,-3.297556,2.486583,8.950001,-9.161155,1.673925,6.909700,-2.939434,-4.952707,2.751096,-2.350328,6.478154,3.372814,4.330026,-2.032413,0.035869,7.073217,1.239497,-6.276029,6.674779,2.680976,-5.302569,8.347405,-1.089229,8.277451,9.580096,6.528416,3.705771,4.075815,3.798206,-9.246688,-5.271709,5.717215,7.814125,2.582622,-3.502594,2.521345,3.998428,9.875117,-4.895234,0.908587,6.861882,-7.713633,-5.645534,0.907774,5.364827,-4.917001,8.979186,-6.198670,-7.363321,5.454067,-9.377778,4.955402,0.147690,0.965259,9.252934,-1.857058,-3.878073,-1.911454,-1.516231,-0.965521,0.451606,-0.157423,-9.376305,7.104614,-9.112909,7.745673,5.821325,-3.942030,-9.460111,0.127558,-8.205146,-8.188400,-8.173559,7.217463,-2.438958,6.708214,3.457389,1.395295,-0.115093,-9.576902,6.664342,9.354077,-2.424999,-4.427569,9.939939,-9.472614,1.817730,-7.152538,4.589445,-7.343004,-3.628596,-2.240512,1.579731,0.206313,-2.656753,-5.777153,-3.935158,1.306737,9.280442,6.512605,4.500625,4.907170,-8.524060,-6.302895,7.250394,9.078661,-7.249125,0.152234,9.855529,9.113800,-8.650210,-0.198583,8.665400,8.194673,6.309253,-3.111318,9.777143,7.452706,8.930976,2.112226,-8.526042,-5.917892,-1.460131,3.745928,4.233849,-6.367922,-8.903470,-2.032690,-0.326501,0.753173,-5.924131,-9.700965,3.626413,5.108077,3.424113,7.884655,0.911909,5.293642,-7.120064,-1.985283,3.622135,8.310297,2.582458,-0.597687,-4.653487,1.430703,3.072633,-7.055863,5.667851,6.938438,-0.312312,-7.100544,9.347691,-2.833276,-0.431719,4.053409,5.760398,-9.980322,-4.509596,-9.004627,-9.833147,0.850071,4.605916,-6.713153,2.432194,8.046184,-8.356563,6.773333,7.393870,9.282333,-0.466744,-1.219516,-5.250188,-9.071872,8.962558,8.774679,-2.216961,5.388885,-7.451347,-0.315304,5.845200,6.347479,-6.084092,1.483062,-5.039020,8.719934,2.040540,-2.617679,-7.497497,-7.759864,6.655980,2.843562,-2.290105,6.680026,-2.230682,-8.133043,-6.501548,-8.257256,2.388939,-5.213811,-6.300425,-8.902921,3.041815,3.163219,-0.859832,6.961739,7.783736,6.712481,5.037553,-4.007523,7.300495,-4.587139,9.958270,-5.030292,-9.670395,-8.040598,-9.797324,2.416561,-0.543943,-9.918937,-3.582783,-5.658890,-4.951657,-6.686045,2.047284,-1.491593,2.481166,-5.795186,4.830575,1.027643,4.652901,-3.377326,4.133541,-7.639781,4.090281,-5.826403,-2.232979,1.100257,-1.143057,1.790637,6.284831,-9.301023,-4.719274,3.369524,7.977308,8.040636,-0.180320,7.813669,1.946828,8.313862,-6.613369,6.164647,3.053645,1.076938,-6.517591,1.201686,-7.328231,-3.053889,-1.365223,-9.501866,2.312159,-4.859508,-8.454382,2.595271,3.926860,-8.902619,-6.246956,3.581626,-8.610320,7.369156,8.967157,-9.094333,3.736617,-1.460644,-8.562445,6.116204,-5.629176,-8.817027,7.144064,5.130576,-0.324570,-6.738679,9.615658,-2.156523,4.453939,-2.344648,-6.455912,-7.230228,5.664458,1.758308,-8.468952,0.831572,8.004442], dtype='float64')
module1.set_input('var_322', input_322)
input_333= np.array([6.645298,8.961244,8.977528,-2.754297,-9.312728,1.437734,7.722973,2.875637,8.917158,5.434138,6.663214,-8.680062,-0.966520,5.813048,-9.274575], dtype='float64')
module1.set_input('var_333', input_333)
input_358= np.array([2.642431,-9.320820,-6.675418,5.841781,7.004224,-9.697571,-1.389284,0.254151,6.693878,-5.054985,3.430545,9.824903,-4.066603,-8.051337,-9.119576], dtype='float64')
module1.set_input('var_358', input_358)
input_364= np.array([-1.806002,-2.611249,-8.907355,3.884866,6.290647,-6.408827,8.568337,2.853705,-3.886375,-0.331004,1.376438,-0.263596,9.217325,0.950938,-2.040619], dtype='float64')
module1.set_input('var_364', input_364)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res3 = intrp3.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res4 = intrp4.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
module5.set_input('var_273', input_273)
module5.set_input('var_274', input_274)
module5.set_input('var_284', input_284)
module5.set_input('var_293', input_293)
module5.set_input('var_295', input_295)
module5.set_input('var_309', input_309)
module5.set_input('var_315', input_315)
module5.set_input('var_322', input_322)
module5.set_input('var_333', input_333)
module5.set_input('var_358', input_358)
module5.set_input('var_364', input_364)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res7 = intrp7.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res8 = intrp8.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
module9.set_input('var_273', input_273)
module9.set_input('var_274', input_274)
module9.set_input('var_284', input_284)
module9.set_input('var_293', input_293)
module9.set_input('var_295', input_295)
module9.set_input('var_309', input_309)
module9.set_input('var_315', input_315)
module9.set_input('var_322', input_322)
module9.set_input('var_333', input_333)
module9.set_input('var_358', input_358)
module9.set_input('var_364', input_364)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res11 = intrp11.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res12 = intrp12.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
module13.set_input('var_273', input_273)
module13.set_input('var_274', input_274)
module13.set_input('var_284', input_284)
module13.set_input('var_293', input_293)
module13.set_input('var_295', input_295)
module13.set_input('var_309', input_309)
module13.set_input('var_315', input_315)
module13.set_input('var_322', input_322)
module13.set_input('var_333', input_333)
module13.set_input('var_358', input_358)
module13.set_input('var_364', input_364)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res15 = intrp15.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res16 = intrp16.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
module17.set_input('var_273', input_273)
module17.set_input('var_274', input_274)
module17.set_input('var_284', input_284)
module17.set_input('var_293', input_293)
module17.set_input('var_295', input_295)
module17.set_input('var_309', input_309)
module17.set_input('var_315', input_315)
module17.set_input('var_322', input_322)
module17.set_input('var_333', input_333)
module17.set_input('var_358', input_358)
module17.set_input('var_364', input_364)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res19 = intrp19.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res20 = intrp20.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
module21.set_input('var_273', input_273)
module21.set_input('var_274', input_274)
module21.set_input('var_284', input_284)
module21.set_input('var_293', input_293)
module21.set_input('var_295', input_295)
module21.set_input('var_309', input_309)
module21.set_input('var_315', input_315)
module21.set_input('var_322', input_322)
module21.set_input('var_333', input_333)
module21.set_input('var_358', input_358)
module21.set_input('var_364', input_364)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res23 = intrp23.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res24 = intrp24.evaluate()(input_273, input_274, input_284, input_293, input_295, input_309, input_315, input_322, input_333, input_358, input_364, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()

'''83: TVMFuncCall
82: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
81: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
80: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
79: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
78: tvm::transform::Pass::operator()(tvm::IRModule) const
77: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
76: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
75: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
74: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
73: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
72: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''